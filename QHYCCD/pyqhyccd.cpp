/* Generated by Cython 3.0a6 */

#define PY_SSIZE_T_CLEAN
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0a6"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A6
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP487_INIT_SUBCLASS
  #define CYTHON_PEP487_INIT_SUBCLASS 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS(n)
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((n) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET)
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  (n)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static inline void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
#else
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__QHYCCD__pyqhyccd
#define __PYX_HAVE_API__QHYCCD__pyqhyccd
/* Early includes */
#include <stdint.h>
#include "qhyccderr.h"
#include "qhyccdstruct.h"
#include "qhyccd.h"
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "Cython/Includes/numpy/" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "QHYCCD\\\\pyqhyccd.pyx",
  "__init__.pxd",
  "type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":746
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":747
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":787
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, nargs, NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, CYTHON_UNUSED PyObject *typ) {
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, Py_ssize_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func.vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CONTROL_ID(CONTROL_ID value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE CONTROL_ID __Pyx_PyInt_As_CONTROL_ID(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "cython" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.stdint" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "qhyccd" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.buffer" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.mem" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
#endif
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from "libc.stdlib" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "QHYCCD.pyqhyccd" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif
static int __pyx_f_6QHYCCD_8pyqhyccd_chkerr(long); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "QHYCCD.pyqhyccd"
extern int __pyx_module_is_main_QHYCCD__pyqhyccd;
int __pyx_module_is_main_QHYCCD__pyqhyccd = 0;

/* Implementation of "QHYCCD.pyqhyccd" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "-";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__2[] = ",";
static const char __pyx_k__8[] = "*";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k__82[] = "?";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_bpp[] = "bpp";
static const char __pyx_k_cam[] = "cam";
static const char __pyx_k_day[] = "day";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_binh[] = "binh";
static const char __pyx_k_binw[] = "binw";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_hbin[] = "hbin";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_pmax[] = "pmax";
static const char __pyx_k_pmin[] = "pmin";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_wbin[] = "wbin";
static const char __pyx_k_year[] = "year";
static const char __pyx_k_camid[] = "camid";
static const char __pyx_k_chiph[] = "chiph";
static const char __pyx_k_chipw[] = "chipw";
static const char __pyx_k_error[] = "error: ";
static const char __pyx_k_modes[] = "modes";
static const char __pyx_k_month[] = "month";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_pstep[] = "pstep";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_sizeX[] = "sizeX";
static const char __pyx_k_sizeY[] = "sizeY";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_xsize[] = "xsize";
static const char __pyx_k_ysize[] = "ysize";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_imageh[] = "imageh";
static const char __pyx_k_imagew[] = "imagew";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_pixelh[] = "pixelh";
static const char __pyx_k_pixelw[] = "pixelw";
static const char __pyx_k_startX[] = "startX";
static const char __pyx_k_startY[] = "startY";
static const char __pyx_k_subday[] = "subday";
static const char __pyx_k_CAM_GPS[] = "CAM_GPS";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_imgdata[] = "imgdata";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_cammodel[] = "cammodel";
static const char __pyx_k_channels[] = "channels";
static const char __pyx_k_numModes[] = "numModes";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_stderror[] = "stderror";
static const char __pyx_k_strerror[] = "strerror";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_CAM_8BITS[] = "CAM_8BITS";
static const char __pyx_k_CAM_COLOR[] = "CAM_COLOR";
static const char __pyx_k_controlId[] = "controlId";
static const char __pyx_k_memlength[] = "memlength";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_CAM_16BITS[] = "CAM_16BITS";
static const char __pyx_k_CONTROL_ID[] = "CONTROL_ID";
static const char __pyx_k_InitQHYCCD[] = "InitQHYCCD";
static const char __pyx_k_OpenQHYCCD[] = "OpenQHYCCD";
static const char __pyx_k_QHYCCD_SDK[] = "QHYCCD SDK ";
static const char __pyx_k_ScanQHYCCD[] = "ScanQHYCCD";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_modeNumber[] = "modeNumber";
static const char __pyx_k_CONTROL_DDR[] = "CONTROL_DDR";
static const char __pyx_k_CONTROL_WBB[] = "CONTROL_WBB";
static const char __pyx_k_CONTROL_WBG[] = "CONTROL_WBG";
static const char __pyx_k_CONTROL_WBR[] = "CONTROL_WBR";
static const char __pyx_k_CloseQHYCCD[] = "CloseQHYCCD";
static const char __pyx_k_DefaultGain[] = "DefaultGain";
static const char __pyx_k_GetBinModes[] = "GetBinModes";
static const char __pyx_k_GetQHYCCDId[] = "GetQHYCCDId";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_CAM_HUMIDITY[] = "CAM_HUMIDITY";
static const char __pyx_k_CAM_IS_COLOR[] = "CAM_IS_COLOR";
static const char __pyx_k_CAM_PRESSURE[] = "CAM_PRESSURE";
static const char __pyx_k_CONTROL_AMPV[] = "CONTROL_AMPV";
static const char __pyx_k_CONTROL_GAIN[] = "CONTROL_GAIN";
static const char __pyx_k_CONTROL_VCAM[] = "CONTROL_VCAM";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_CAM_VIEW_MODE[] = "CAM_VIEW_MODE";
static const char __pyx_k_CONTROL_GAMMA[] = "CONTROL_GAMMA";
static const char __pyx_k_CONTROL_SPEED[] = "CONTROL_SPEED";
static const char __pyx_k_ClocksPerLine[] = "ClocksPerLine";
static const char __pyx_k_DefaultOffset[] = "DefaultOffset";
static const char __pyx_k_GetQHYCCDType[] = "GetQHYCCDType";
static const char __pyx_k_LinePeriod_ns[] = "LinePeriod_ns";
static const char __pyx_k_LinesPerFrame[] = "LinesPerFrame";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_CAM_BIN1X1MODE[] = "CAM_BIN1X1MODE";
static const char __pyx_k_CAM_BIN2X2MODE[] = "CAM_BIN2X2MODE";
static const char __pyx_k_CAM_BIN3X3MODE[] = "CAM_BIN3X3MODE";
static const char __pyx_k_CAM_BIN4X4MODE[] = "CAM_BIN4X4MODE";
static const char __pyx_k_CONTROL_COOLER[] = "CONTROL_COOLER";
static const char __pyx_k_CONTROL_CURPWM[] = "CONTROL_CURPWM";
static const char __pyx_k_CONTROL_MAX_ID[] = "CONTROL_MAX_ID";
static const char __pyx_k_CONTROL_OFFSET[] = "CONTROL_OFFSET";
static const char __pyx_k_FramePeriod_us[] = "FramePeriod_us";
static const char __pyx_k_GetQHYCCDModel[] = "GetQHYCCDModel";
static const char __pyx_k_GetQHYCCDParam[] = "GetQHYCCDParam";
static const char __pyx_k_PixelPeriod_ps[] = "PixelPeriod_ps";
static const char __pyx_k_ScreenStretchB[] = "ScreenStretchB";
static const char __pyx_k_ScreenStretchW[] = "ScreenStretchW";
static const char __pyx_k_SetQHYCCDParam[] = "SetQHYCCDParam";
static const char __pyx_k_StopQHYCCDLive[] = "StopQHYCCDLive";
static const char __pyx_k_BeginQHYCCDLive[] = "BeginQHYCCDLive";
static const char __pyx_k_CONTROL_CFWPORT[] = "CONTROL_CFWPORT";
static const char __pyx_k_CONTROL_CURTEMP[] = "CONTROL_CURTEMP";
static const char __pyx_k_CONTROL_ST4PORT[] = "CONTROL_ST4PORT";
static const char __pyx_k_QHYCCD_pyqhyccd[] = "QHYCCD.pyqhyccd";
static const char __pyx_k_CONTROL_CHANNELS[] = "CONTROL_CHANNELS";
static const char __pyx_k_CONTROL_CONTRAST[] = "CONTROL_CONTRAST";
static const char __pyx_k_CONTROL_EXPOSURE[] = "CONTROL_EXPOSURE";
static const char __pyx_k_CONTROL_MANULPWM[] = "CONTROL_MANULPWM";
static const char __pyx_k_IS_EXPOSING_DONE[] = "IS_EXPOSING_DONE";
static const char __pyx_k_SetQHYCCDBinMode[] = "SetQHYCCDBinMode";
static const char __pyx_k_CAM_LIVEVIDEOMODE[] = "CAM_LIVEVIDEOMODE";
static const char __pyx_k_GetQHYCCDChipInfo[] = "GetQHYCCDChipInfo";
static const char __pyx_k_GetQHYCCDReadMode[] = "GetQHYCCDReadMode";
static const char __pyx_k_SetQHYCCDBitsMode[] = "SetQHYCCDBitsMode";
static const char __pyx_k_SetQHYCCDReadMode[] = "SetQHYCCDReadMode";
static const char __pyx_k_ActualExposureTime[] = "ActualExposureTime";
static const char __pyx_k_CONTROL_BRIGHTNESS[] = "CONTROL_BRIGHTNESS";
static const char __pyx_k_CONTROL_ROWNOISERE[] = "CONTROL_ROWNOISERE";
static const char __pyx_k_CONTROL_USBTRAFFIC[] = "CONTROL_USBTRAFFIC";
static const char __pyx_k_GetQHYCCDLiveFrame[] = "GetQHYCCDLiveFrame";
static const char __pyx_k_GetQHYCCDMemLength[] = "GetQHYCCDMemLength";
static const char __pyx_k_InitQHYCCDResource[] = "InitQHYCCDResource";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_isLongExposureMode[] = "isLongExposureMode";
static const char __pyx_k_CAM_SINGLEFRAMEMODE[] = "CAM_SINGLEFRAMEMODE";
static const char __pyx_k_CONTROL_CFWSLOTSNUM[] = "CONTROL_CFWSLOTSNUM";
static const char __pyx_k_CONTROL_TRANSFERBIT[] = "CONTROL_TRANSFERBIT";
static const char __pyx_k_CONTROL_VACUUM_PUMP[] = "CONTROL_VACUUM_PUMP";
static const char __pyx_k_DDR_BUFFER_CAPACITY[] = "DDR_BUFFER_CAPACITY";
static const char __pyx_k_GetQHYCCDSDKVersion[] = "GetQHYCCDSDKVersion";
static const char __pyx_k_OutputDataAlignment[] = "OutputDataAlignment";
static const char __pyx_k_QHYCCD_3A_AUTOFOCUS[] = "QHYCCD_3A_AUTOFOCUS";
static const char __pyx_k_QHYCCD_pyqhyccd_pyx[] = "QHYCCD\\pyqhyccd.pyx";
static const char __pyx_k_SetQHYCCDResolution[] = "SetQHYCCDResolution";
static const char __pyx_k_SetQHYCCDStreamMode[] = "SetQHYCCDStreamMode";
static const char __pyx_k_CAM_TRIGER_INTERFACE[] = "CAM_TRIGER_INTERFACE";
static const char __pyx_k_CONTROL_MAX_ID_Error[] = "CONTROL_MAX_ID_Error";
static const char __pyx_k_CancelQHYCCDExposing[] = "CancelQHYCCDExposing";
static const char __pyx_k_ExpQHYCCDSingleFrame[] = "ExpQHYCCDSingleFrame";
static const char __pyx_k_GetQHYCCDSingleFrame[] = "GetQHYCCDSingleFrame";
static const char __pyx_k_OutputDataActualBits[] = "OutputDataActualBits";
static const char __pyx_k_CAM_MECHANICALSHUTTER[] = "CAM_MECHANICALSHUTTER";
static const char __pyx_k_CAM_QHY5II_GUIDE_MODE[] = "CAM_QHY5II_GUIDE_MODE";
static const char __pyx_k_GetQHYCCDOverScanArea[] = "GetQHYCCDOverScanArea";
static const char __pyx_k_GetQHYCCDReadModeName[] = "GetQHYCCDReadModeName";
static const char __pyx_k_QHYCCD_3A_AUTOBALANCE[] = "QHYCCD_3A_AUTOBALANCE";
static const char __pyx_k_ReleaseQHYCCDResource[] = "ReleaseQHYCCDResource";
static const char __pyx_k_CAM_FINETONE_INTERFACE[] = "CAM_FINETONE_INTERFACE";
static const char __pyx_k_GetQHYCCDEffectiveArea[] = "GetQHYCCDEffectiveArea";
static const char __pyx_k_QHYCCD_3A_AUTOEXPOSURE[] = "QHYCCD_3A_AUTOEXPOSURE";
static const char __pyx_k_hasHardwareFrameCounter[] = "hasHardwareFrameCounter";
static const char __pyx_k_GetQHYCCDParamMinMaxStep[] = "GetQHYCCDParamMinMaxStep";
static const char __pyx_k_IsQHYCCDControlAvailable[] = "IsQHYCCDControlAvailable";
static const char __pyx_k_DDR_BUFFER_READ_THRESHOLD[] = "DDR_BUFFER_READ_THRESHOLD";
static const char __pyx_k_CAM_CALIBRATEFPN_INTERFACE[] = "CAM_CALIBRATEFPN_INTERFACE";
static const char __pyx_k_CAM_LIGHT_PERFORMANCE_MODE[] = "CAM_LIGHT_PERFORMANCE_MODE";
static const char __pyx_k_CAM_SINGNALCLAMP_INTERFACE[] = "CAM_SINGNALCLAMP_INTERFACE";
static const char __pyx_k_GetQHYCCDExposureRemaining[] = "GetQHYCCDExposureRemaining";
static const char __pyx_k_GetQHYCCDNumberOfReadModes[] = "GetQHYCCDNumberOfReadModes";
static const char __pyx_k_GetQHYCCDReadModeResolution[] = "GetQHYCCDReadModeResolution";
static const char __pyx_k_CAM_IGNOREOVERSCAN_INTERFACE[] = "CAM_IGNOREOVERSCAN_INTERFACE";
static const char __pyx_k_CAM_TECOVERPROTECT_INTERFACE[] = "CAM_TECOVERPROTECT_INTERFACE";
static const char __pyx_k_GetQHYCCDPreciseExposureInfo[] = "GetQHYCCDPreciseExposureInfo";
static const char __pyx_k_CancelQHYCCDExposingAndReadout[] = "CancelQHYCCDExposingAndReadout";
static const char __pyx_k_CAM_USBREADOUTSLOWEST_INTERFACE[] = "CAM_USBREADOUTSLOWEST_INTERFACE";
static const char __pyx_k_CONTROL_SensorChamberCycle_PUMP[] = "CONTROL_SensorChamberCycle_PUMP";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_CAM_CHIPTEMPERATURESENSOR_INTERF[] = "CAM_CHIPTEMPERATURESENSOR_INTERFACE";
static const char __pyx_k_CAM_SHUTTERMOTORHEATING_INTERFAC[] = "CAM_SHUTTERMOTORHEATING_INTERFACE";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_n_s_ActualExposureTime;
static PyObject *__pyx_n_s_BeginQHYCCDLive;
static PyObject *__pyx_n_s_CAM_16BITS;
static PyObject *__pyx_n_s_CAM_8BITS;
static PyObject *__pyx_n_s_CAM_BIN1X1MODE;
static PyObject *__pyx_n_s_CAM_BIN2X2MODE;
static PyObject *__pyx_n_s_CAM_BIN3X3MODE;
static PyObject *__pyx_n_s_CAM_BIN4X4MODE;
static PyObject *__pyx_n_s_CAM_CALIBRATEFPN_INTERFACE;
static PyObject *__pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF;
static PyObject *__pyx_n_s_CAM_COLOR;
static PyObject *__pyx_n_s_CAM_FINETONE_INTERFACE;
static PyObject *__pyx_n_s_CAM_GPS;
static PyObject *__pyx_n_s_CAM_HUMIDITY;
static PyObject *__pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE;
static PyObject *__pyx_n_s_CAM_IS_COLOR;
static PyObject *__pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE;
static PyObject *__pyx_n_s_CAM_LIVEVIDEOMODE;
static PyObject *__pyx_n_s_CAM_MECHANICALSHUTTER;
static PyObject *__pyx_n_s_CAM_PRESSURE;
static PyObject *__pyx_n_s_CAM_QHY5II_GUIDE_MODE;
static PyObject *__pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC;
static PyObject *__pyx_n_s_CAM_SINGLEFRAMEMODE;
static PyObject *__pyx_n_s_CAM_SINGNALCLAMP_INTERFACE;
static PyObject *__pyx_n_s_CAM_TECOVERPROTECT_INTERFACE;
static PyObject *__pyx_n_s_CAM_TRIGER_INTERFACE;
static PyObject *__pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE;
static PyObject *__pyx_n_s_CAM_VIEW_MODE;
static PyObject *__pyx_n_s_CONTROL_AMPV;
static PyObject *__pyx_n_s_CONTROL_BRIGHTNESS;
static PyObject *__pyx_n_s_CONTROL_CFWPORT;
static PyObject *__pyx_n_s_CONTROL_CFWSLOTSNUM;
static PyObject *__pyx_n_s_CONTROL_CHANNELS;
static PyObject *__pyx_n_s_CONTROL_CONTRAST;
static PyObject *__pyx_n_s_CONTROL_COOLER;
static PyObject *__pyx_n_s_CONTROL_CURPWM;
static PyObject *__pyx_n_s_CONTROL_CURTEMP;
static PyObject *__pyx_n_s_CONTROL_DDR;
static PyObject *__pyx_n_s_CONTROL_EXPOSURE;
static PyObject *__pyx_n_s_CONTROL_GAIN;
static PyObject *__pyx_n_s_CONTROL_GAMMA;
static PyObject *__pyx_n_s_CONTROL_ID;
static PyObject *__pyx_n_s_CONTROL_MANULPWM;
static PyObject *__pyx_n_s_CONTROL_MAX_ID;
static PyObject *__pyx_n_s_CONTROL_MAX_ID_Error;
static PyObject *__pyx_n_s_CONTROL_OFFSET;
static PyObject *__pyx_n_s_CONTROL_ROWNOISERE;
static PyObject *__pyx_n_s_CONTROL_SPEED;
static PyObject *__pyx_n_s_CONTROL_ST4PORT;
static PyObject *__pyx_n_s_CONTROL_SensorChamberCycle_PUMP;
static PyObject *__pyx_n_s_CONTROL_TRANSFERBIT;
static PyObject *__pyx_n_s_CONTROL_USBTRAFFIC;
static PyObject *__pyx_n_s_CONTROL_VACUUM_PUMP;
static PyObject *__pyx_n_s_CONTROL_VCAM;
static PyObject *__pyx_n_s_CONTROL_WBB;
static PyObject *__pyx_n_s_CONTROL_WBG;
static PyObject *__pyx_n_s_CONTROL_WBR;
static PyObject *__pyx_n_s_CancelQHYCCDExposing;
static PyObject *__pyx_n_s_CancelQHYCCDExposingAndReadout;
static PyObject *__pyx_n_s_ClocksPerLine;
static PyObject *__pyx_n_s_CloseQHYCCD;
static PyObject *__pyx_n_s_DDR_BUFFER_CAPACITY;
static PyObject *__pyx_n_s_DDR_BUFFER_READ_THRESHOLD;
static PyObject *__pyx_n_s_DefaultGain;
static PyObject *__pyx_n_s_DefaultOffset;
static PyObject *__pyx_n_s_ExpQHYCCDSingleFrame;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_FramePeriod_us;
static PyObject *__pyx_n_s_GetBinModes;
static PyObject *__pyx_n_s_GetQHYCCDChipInfo;
static PyObject *__pyx_n_s_GetQHYCCDEffectiveArea;
static PyObject *__pyx_n_s_GetQHYCCDExposureRemaining;
static PyObject *__pyx_n_s_GetQHYCCDId;
static PyObject *__pyx_n_s_GetQHYCCDLiveFrame;
static PyObject *__pyx_n_s_GetQHYCCDMemLength;
static PyObject *__pyx_n_s_GetQHYCCDModel;
static PyObject *__pyx_n_s_GetQHYCCDNumberOfReadModes;
static PyObject *__pyx_n_s_GetQHYCCDOverScanArea;
static PyObject *__pyx_n_s_GetQHYCCDParam;
static PyObject *__pyx_n_s_GetQHYCCDParamMinMaxStep;
static PyObject *__pyx_n_s_GetQHYCCDPreciseExposureInfo;
static PyObject *__pyx_n_s_GetQHYCCDReadMode;
static PyObject *__pyx_n_s_GetQHYCCDReadModeName;
static PyObject *__pyx_n_s_GetQHYCCDReadModeResolution;
static PyObject *__pyx_n_s_GetQHYCCDSDKVersion;
static PyObject *__pyx_n_s_GetQHYCCDSingleFrame;
static PyObject *__pyx_n_s_GetQHYCCDType;
static PyObject *__pyx_n_s_IS_EXPOSING_DONE;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_InitQHYCCD;
static PyObject *__pyx_n_s_InitQHYCCDResource;
static PyObject *__pyx_n_s_IsQHYCCDControlAvailable;
static PyObject *__pyx_n_s_LinePeriod_ns;
static PyObject *__pyx_n_s_LinesPerFrame;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_OSError;
static PyObject *__pyx_n_s_OpenQHYCCD;
static PyObject *__pyx_n_s_OutputDataActualBits;
static PyObject *__pyx_n_s_OutputDataAlignment;
static PyObject *__pyx_n_s_PixelPeriod_ps;
static PyObject *__pyx_n_s_QHYCCD_3A_AUTOBALANCE;
static PyObject *__pyx_n_s_QHYCCD_3A_AUTOEXPOSURE;
static PyObject *__pyx_n_s_QHYCCD_3A_AUTOFOCUS;
static PyObject *__pyx_kp_u_QHYCCD_SDK;
static PyObject *__pyx_n_s_QHYCCD_pyqhyccd;
static PyObject *__pyx_kp_s_QHYCCD_pyqhyccd_pyx;
static PyObject *__pyx_n_s_ReleaseQHYCCDResource;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_ScanQHYCCD;
static PyObject *__pyx_n_s_ScreenStretchB;
static PyObject *__pyx_n_s_ScreenStretchW;
static PyObject *__pyx_n_s_SetQHYCCDBinMode;
static PyObject *__pyx_n_s_SetQHYCCDBitsMode;
static PyObject *__pyx_n_s_SetQHYCCDParam;
static PyObject *__pyx_n_s_SetQHYCCDReadMode;
static PyObject *__pyx_n_s_SetQHYCCDResolution;
static PyObject *__pyx_n_s_SetQHYCCDStreamMode;
static PyObject *__pyx_n_s_StopQHYCCDLive;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_n_s__8;
static PyObject *__pyx_n_s__82;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_binh;
static PyObject *__pyx_n_s_binw;
static PyObject *__pyx_n_s_bpp;
static PyObject *__pyx_n_s_cam;
static PyObject *__pyx_n_s_camid;
static PyObject *__pyx_n_s_cammodel;
static PyObject *__pyx_n_s_channels;
static PyObject *__pyx_n_s_chiph;
static PyObject *__pyx_n_s_chipw;
static PyObject *__pyx_n_s_class_getitem;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_controlId;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_day;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_kp_s_error;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_hasHardwareFrameCounter;
static PyObject *__pyx_n_s_hbin;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_imageh;
static PyObject *__pyx_n_s_imagew;
static PyObject *__pyx_n_s_imgdata;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init_subclass;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_isLongExposureMode;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_memlength;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_modeNumber;
static PyObject *__pyx_n_s_modes;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_month;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numModes;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_pixelh;
static PyObject *__pyx_n_s_pixelw;
static PyObject *__pyx_n_s_pmax;
static PyObject *__pyx_n_s_pmin;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pstep;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_set_name;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sizeX;
static PyObject *__pyx_n_s_sizeY;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_startX;
static PyObject *__pyx_n_s_startY;
static PyObject *__pyx_n_s_stderror;
static PyObject *__pyx_n_s_strerror;
static PyObject *__pyx_n_s_subday;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_wbin;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xsize;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_year;
static PyObject *__pyx_n_s_ysize;
#endif
/* #### Code section: decls ### */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_InitQHYCCDResource(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_2ReleaseQHYCCDResource(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_4ScanQHYCCD(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_6GetQHYCCDId(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_8OpenQHYCCD(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_camid); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_10SetQHYCCDStreamMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_12InitQHYCCD(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_14CloseQHYCCD(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_16GetQHYCCDChipInfo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_18GetQHYCCDModel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_camid); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_20IsQHYCCDControlAvailable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_22GetQHYCCDParam(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_24SetQHYCCDParam(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_26GetQHYCCDParamMinMaxStep(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_28ExpQHYCCDSingleFrame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_30CancelQHYCCDExposing(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_32CancelQHYCCDExposingAndReadout(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_34GetQHYCCDSingleFrame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_36GetQHYCCDMemLength(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_38SetQHYCCDBinMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_wbin, PyObject *__pyx_v_hbin); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_40SetQHYCCDResolution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_xsize, PyObject *__pyx_v_ysize); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_42GetQHYCCDExposureRemaining(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_44GetQHYCCDType(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_46GetQHYCCDSDKVersion(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_48GetQHYCCDNumberOfReadModes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_50GetQHYCCDReadModeResolution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_modeNumber); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_52GetQHYCCDReadModeName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_modeNumber); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_54GetQHYCCDReadMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_56SetQHYCCDReadMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_modeNumber); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_58GetQHYCCDOverScanArea(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_60GetQHYCCDEffectiveArea(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_62SetQHYCCDBinMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_binw, PyObject *__pyx_v_binh); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_64BeginQHYCCDLive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_66StopQHYCCDLive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_68GetQHYCCDLiveFrame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_70GetQHYCCDPreciseExposureInfo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_72SetQHYCCDBitsMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_74GetBinModes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam); /* proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_n_s_ActualExposureTime;
  PyObject *__pyx_n_s_BeginQHYCCDLive;
  PyObject *__pyx_n_s_CAM_16BITS;
  PyObject *__pyx_n_s_CAM_8BITS;
  PyObject *__pyx_n_s_CAM_BIN1X1MODE;
  PyObject *__pyx_n_s_CAM_BIN2X2MODE;
  PyObject *__pyx_n_s_CAM_BIN3X3MODE;
  PyObject *__pyx_n_s_CAM_BIN4X4MODE;
  PyObject *__pyx_n_s_CAM_CALIBRATEFPN_INTERFACE;
  PyObject *__pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF;
  PyObject *__pyx_n_s_CAM_COLOR;
  PyObject *__pyx_n_s_CAM_FINETONE_INTERFACE;
  PyObject *__pyx_n_s_CAM_GPS;
  PyObject *__pyx_n_s_CAM_HUMIDITY;
  PyObject *__pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE;
  PyObject *__pyx_n_s_CAM_IS_COLOR;
  PyObject *__pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE;
  PyObject *__pyx_n_s_CAM_LIVEVIDEOMODE;
  PyObject *__pyx_n_s_CAM_MECHANICALSHUTTER;
  PyObject *__pyx_n_s_CAM_PRESSURE;
  PyObject *__pyx_n_s_CAM_QHY5II_GUIDE_MODE;
  PyObject *__pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC;
  PyObject *__pyx_n_s_CAM_SINGLEFRAMEMODE;
  PyObject *__pyx_n_s_CAM_SINGNALCLAMP_INTERFACE;
  PyObject *__pyx_n_s_CAM_TECOVERPROTECT_INTERFACE;
  PyObject *__pyx_n_s_CAM_TRIGER_INTERFACE;
  PyObject *__pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE;
  PyObject *__pyx_n_s_CAM_VIEW_MODE;
  PyObject *__pyx_n_s_CONTROL_AMPV;
  PyObject *__pyx_n_s_CONTROL_BRIGHTNESS;
  PyObject *__pyx_n_s_CONTROL_CFWPORT;
  PyObject *__pyx_n_s_CONTROL_CFWSLOTSNUM;
  PyObject *__pyx_n_s_CONTROL_CHANNELS;
  PyObject *__pyx_n_s_CONTROL_CONTRAST;
  PyObject *__pyx_n_s_CONTROL_COOLER;
  PyObject *__pyx_n_s_CONTROL_CURPWM;
  PyObject *__pyx_n_s_CONTROL_CURTEMP;
  PyObject *__pyx_n_s_CONTROL_DDR;
  PyObject *__pyx_n_s_CONTROL_EXPOSURE;
  PyObject *__pyx_n_s_CONTROL_GAIN;
  PyObject *__pyx_n_s_CONTROL_GAMMA;
  PyObject *__pyx_n_s_CONTROL_ID;
  PyObject *__pyx_n_s_CONTROL_MANULPWM;
  PyObject *__pyx_n_s_CONTROL_MAX_ID;
  PyObject *__pyx_n_s_CONTROL_MAX_ID_Error;
  PyObject *__pyx_n_s_CONTROL_OFFSET;
  PyObject *__pyx_n_s_CONTROL_ROWNOISERE;
  PyObject *__pyx_n_s_CONTROL_SPEED;
  PyObject *__pyx_n_s_CONTROL_ST4PORT;
  PyObject *__pyx_n_s_CONTROL_SensorChamberCycle_PUMP;
  PyObject *__pyx_n_s_CONTROL_TRANSFERBIT;
  PyObject *__pyx_n_s_CONTROL_USBTRAFFIC;
  PyObject *__pyx_n_s_CONTROL_VACUUM_PUMP;
  PyObject *__pyx_n_s_CONTROL_VCAM;
  PyObject *__pyx_n_s_CONTROL_WBB;
  PyObject *__pyx_n_s_CONTROL_WBG;
  PyObject *__pyx_n_s_CONTROL_WBR;
  PyObject *__pyx_n_s_CancelQHYCCDExposing;
  PyObject *__pyx_n_s_CancelQHYCCDExposingAndReadout;
  PyObject *__pyx_n_s_ClocksPerLine;
  PyObject *__pyx_n_s_CloseQHYCCD;
  PyObject *__pyx_n_s_DDR_BUFFER_CAPACITY;
  PyObject *__pyx_n_s_DDR_BUFFER_READ_THRESHOLD;
  PyObject *__pyx_n_s_DefaultGain;
  PyObject *__pyx_n_s_DefaultOffset;
  PyObject *__pyx_n_s_ExpQHYCCDSingleFrame;
  PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
  PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
  PyObject *__pyx_n_s_FramePeriod_us;
  PyObject *__pyx_n_s_GetBinModes;
  PyObject *__pyx_n_s_GetQHYCCDChipInfo;
  PyObject *__pyx_n_s_GetQHYCCDEffectiveArea;
  PyObject *__pyx_n_s_GetQHYCCDExposureRemaining;
  PyObject *__pyx_n_s_GetQHYCCDId;
  PyObject *__pyx_n_s_GetQHYCCDLiveFrame;
  PyObject *__pyx_n_s_GetQHYCCDMemLength;
  PyObject *__pyx_n_s_GetQHYCCDModel;
  PyObject *__pyx_n_s_GetQHYCCDNumberOfReadModes;
  PyObject *__pyx_n_s_GetQHYCCDOverScanArea;
  PyObject *__pyx_n_s_GetQHYCCDParam;
  PyObject *__pyx_n_s_GetQHYCCDParamMinMaxStep;
  PyObject *__pyx_n_s_GetQHYCCDPreciseExposureInfo;
  PyObject *__pyx_n_s_GetQHYCCDReadMode;
  PyObject *__pyx_n_s_GetQHYCCDReadModeName;
  PyObject *__pyx_n_s_GetQHYCCDReadModeResolution;
  PyObject *__pyx_n_s_GetQHYCCDSDKVersion;
  PyObject *__pyx_n_s_GetQHYCCDSingleFrame;
  PyObject *__pyx_n_s_GetQHYCCDType;
  PyObject *__pyx_n_s_IS_EXPOSING_DONE;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_n_s_InitQHYCCD;
  PyObject *__pyx_n_s_InitQHYCCDResource;
  PyObject *__pyx_n_s_IsQHYCCDControlAvailable;
  PyObject *__pyx_n_s_LinePeriod_ns;
  PyObject *__pyx_n_s_LinesPerFrame;
  PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
  PyObject *__pyx_n_s_OSError;
  PyObject *__pyx_n_s_OpenQHYCCD;
  PyObject *__pyx_n_s_OutputDataActualBits;
  PyObject *__pyx_n_s_OutputDataAlignment;
  PyObject *__pyx_n_s_PixelPeriod_ps;
  PyObject *__pyx_n_s_QHYCCD_3A_AUTOBALANCE;
  PyObject *__pyx_n_s_QHYCCD_3A_AUTOEXPOSURE;
  PyObject *__pyx_n_s_QHYCCD_3A_AUTOFOCUS;
  PyObject *__pyx_kp_u_QHYCCD_SDK;
  PyObject *__pyx_n_s_QHYCCD_pyqhyccd;
  PyObject *__pyx_kp_s_QHYCCD_pyqhyccd_pyx;
  PyObject *__pyx_n_s_ReleaseQHYCCDResource;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_ScanQHYCCD;
  PyObject *__pyx_n_s_ScreenStretchB;
  PyObject *__pyx_n_s_ScreenStretchW;
  PyObject *__pyx_n_s_SetQHYCCDBinMode;
  PyObject *__pyx_n_s_SetQHYCCDBitsMode;
  PyObject *__pyx_n_s_SetQHYCCDParam;
  PyObject *__pyx_n_s_SetQHYCCDReadMode;
  PyObject *__pyx_n_s_SetQHYCCDResolution;
  PyObject *__pyx_n_s_SetQHYCCDStreamMode;
  PyObject *__pyx_n_s_StopQHYCCDLive;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_n_s__8;
  PyObject *__pyx_n_s__82;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_binh;
  PyObject *__pyx_n_s_binw;
  PyObject *__pyx_n_s_bpp;
  PyObject *__pyx_n_s_cam;
  PyObject *__pyx_n_s_camid;
  PyObject *__pyx_n_s_cammodel;
  PyObject *__pyx_n_s_channels;
  PyObject *__pyx_n_s_chiph;
  PyObject *__pyx_n_s_chipw;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_controlId;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_day;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_kp_s_error;
  PyObject *__pyx_n_s_h;
  PyObject *__pyx_n_s_hasHardwareFrameCounter;
  PyObject *__pyx_n_s_hbin;
  PyObject *__pyx_n_s_height;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_imageh;
  PyObject *__pyx_n_s_imagew;
  PyObject *__pyx_n_s_imgdata;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_isLongExposureMode;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_memlength;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_modeNumber;
  PyObject *__pyx_n_s_modes;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_month;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_numModes;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_pixelh;
  PyObject *__pyx_n_s_pixelw;
  PyObject *__pyx_n_s_pmax;
  PyObject *__pyx_n_s_pmin;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_pstep;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_ret;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_sizeX;
  PyObject *__pyx_n_s_sizeY;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_startX;
  PyObject *__pyx_n_s_startY;
  PyObject *__pyx_n_s_stderror;
  PyObject *__pyx_n_s_strerror;
  PyObject *__pyx_n_s_subday;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_w;
  PyObject *__pyx_n_s_warnings;
  PyObject *__pyx_n_s_wbin;
  PyObject *__pyx_n_s_width;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_s_xsize;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_n_s_year;
  PyObject *__pyx_n_s_ysize;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_codeobj__9;
  PyObject *__pyx_codeobj__10;
  PyObject *__pyx_codeobj__11;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_n_s_ActualExposureTime);
  Py_CLEAR(clear_module_state->__pyx_n_s_BeginQHYCCDLive);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_16BITS);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_8BITS);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_BIN1X1MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_BIN2X2MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_BIN3X3MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_BIN4X4MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_CALIBRATEFPN_INTERFACE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_COLOR);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_FINETONE_INTERFACE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_GPS);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_HUMIDITY);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_IS_COLOR);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_LIVEVIDEOMODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_MECHANICALSHUTTER);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_PRESSURE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_QHY5II_GUIDE_MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_SINGLEFRAMEMODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_SINGNALCLAMP_INTERFACE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_TECOVERPROTECT_INTERFACE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_TRIGER_INTERFACE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CAM_VIEW_MODE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_AMPV);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_BRIGHTNESS);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_CFWPORT);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_CFWSLOTSNUM);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_CHANNELS);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_CONTRAST);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_COOLER);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_CURPWM);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_CURTEMP);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_DDR);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_EXPOSURE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_GAIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_GAMMA);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_ID);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_MANULPWM);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_MAX_ID);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_MAX_ID_Error);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_OFFSET);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_ROWNOISERE);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_SPEED);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_ST4PORT);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_SensorChamberCycle_PUMP);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_TRANSFERBIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_USBTRAFFIC);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_VACUUM_PUMP);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_VCAM);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_WBB);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_WBG);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONTROL_WBR);
  Py_CLEAR(clear_module_state->__pyx_n_s_CancelQHYCCDExposing);
  Py_CLEAR(clear_module_state->__pyx_n_s_CancelQHYCCDExposingAndReadout);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClocksPerLine);
  Py_CLEAR(clear_module_state->__pyx_n_s_CloseQHYCCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_DDR_BUFFER_CAPACITY);
  Py_CLEAR(clear_module_state->__pyx_n_s_DDR_BUFFER_READ_THRESHOLD);
  Py_CLEAR(clear_module_state->__pyx_n_s_DefaultGain);
  Py_CLEAR(clear_module_state->__pyx_n_s_DefaultOffset);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExpQHYCCDSingleFrame);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Format_string_allocated_too_shor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Format_string_allocated_too_shor_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_FramePeriod_us);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetBinModes);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDChipInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDEffectiveArea);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDExposureRemaining);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDId);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDLiveFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDMemLength);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDModel);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDNumberOfReadModes);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDOverScanArea);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDParam);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDParamMinMaxStep);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDPreciseExposureInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDReadMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDReadModeName);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDReadModeResolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDSDKVersion);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDSingleFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_GetQHYCCDType);
  Py_CLEAR(clear_module_state->__pyx_n_s_IS_EXPOSING_DONE);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_n_s_InitQHYCCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_InitQHYCCDResource);
  Py_CLEAR(clear_module_state->__pyx_n_s_IsQHYCCDControlAvailable);
  Py_CLEAR(clear_module_state->__pyx_n_s_LinePeriod_ns);
  Py_CLEAR(clear_module_state->__pyx_n_s_LinesPerFrame);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Non_native_byte_order_not_suppor);
  Py_CLEAR(clear_module_state->__pyx_n_s_OSError);
  Py_CLEAR(clear_module_state->__pyx_n_s_OpenQHYCCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_OutputDataActualBits);
  Py_CLEAR(clear_module_state->__pyx_n_s_OutputDataAlignment);
  Py_CLEAR(clear_module_state->__pyx_n_s_PixelPeriod_ps);
  Py_CLEAR(clear_module_state->__pyx_n_s_QHYCCD_3A_AUTOBALANCE);
  Py_CLEAR(clear_module_state->__pyx_n_s_QHYCCD_3A_AUTOEXPOSURE);
  Py_CLEAR(clear_module_state->__pyx_n_s_QHYCCD_3A_AUTOFOCUS);
  Py_CLEAR(clear_module_state->__pyx_kp_u_QHYCCD_SDK);
  Py_CLEAR(clear_module_state->__pyx_n_s_QHYCCD_pyqhyccd);
  Py_CLEAR(clear_module_state->__pyx_kp_s_QHYCCD_pyqhyccd_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReleaseQHYCCDResource);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ScanQHYCCD);
  Py_CLEAR(clear_module_state->__pyx_n_s_ScreenStretchB);
  Py_CLEAR(clear_module_state->__pyx_n_s_ScreenStretchW);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetQHYCCDBinMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetQHYCCDBitsMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetQHYCCDParam);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetQHYCCDReadMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetQHYCCDResolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_SetQHYCCDStreamMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopQHYCCDLive);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_n_s__8);
  Py_CLEAR(clear_module_state->__pyx_n_s__82);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_binh);
  Py_CLEAR(clear_module_state->__pyx_n_s_binw);
  Py_CLEAR(clear_module_state->__pyx_n_s_bpp);
  Py_CLEAR(clear_module_state->__pyx_n_s_cam);
  Py_CLEAR(clear_module_state->__pyx_n_s_camid);
  Py_CLEAR(clear_module_state->__pyx_n_s_cammodel);
  Py_CLEAR(clear_module_state->__pyx_n_s_channels);
  Py_CLEAR(clear_module_state->__pyx_n_s_chiph);
  Py_CLEAR(clear_module_state->__pyx_n_s_chipw);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_controlId);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_day);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_kp_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_h);
  Py_CLEAR(clear_module_state->__pyx_n_s_hasHardwareFrameCounter);
  Py_CLEAR(clear_module_state->__pyx_n_s_hbin);
  Py_CLEAR(clear_module_state->__pyx_n_s_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_imageh);
  Py_CLEAR(clear_module_state->__pyx_n_s_imagew);
  Py_CLEAR(clear_module_state->__pyx_n_s_imgdata);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_isLongExposureMode);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_memlength);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_modeNumber);
  Py_CLEAR(clear_module_state->__pyx_n_s_modes);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_month);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_numModes);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_s_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_s_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_os);
  Py_CLEAR(clear_module_state->__pyx_n_s_pixelh);
  Py_CLEAR(clear_module_state->__pyx_n_s_pixelw);
  Py_CLEAR(clear_module_state->__pyx_n_s_pmax);
  Py_CLEAR(clear_module_state->__pyx_n_s_pmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_pstep);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_sizeX);
  Py_CLEAR(clear_module_state->__pyx_n_s_sizeY);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_startX);
  Py_CLEAR(clear_module_state->__pyx_n_s_startY);
  Py_CLEAR(clear_module_state->__pyx_n_s_stderror);
  Py_CLEAR(clear_module_state->__pyx_n_s_strerror);
  Py_CLEAR(clear_module_state->__pyx_n_s_subday);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_kp_u_unknown_dtype_code_in_numpy_pxd);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_w);
  Py_CLEAR(clear_module_state->__pyx_n_s_warnings);
  Py_CLEAR(clear_module_state->__pyx_n_s_wbin);
  Py_CLEAR(clear_module_state->__pyx_n_s_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_xsize);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_n_s_year);
  Py_CLEAR(clear_module_state->__pyx_n_s_ysize);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__9);
  Py_CLEAR(clear_module_state->__pyx_codeobj__10);
  Py_CLEAR(clear_module_state->__pyx_codeobj__11);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_n_s_ActualExposureTime);
  Py_VISIT(traverse_module_state->__pyx_n_s_BeginQHYCCDLive);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_16BITS);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_8BITS);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_BIN1X1MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_BIN2X2MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_BIN3X3MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_BIN4X4MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_CALIBRATEFPN_INTERFACE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_COLOR);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_FINETONE_INTERFACE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_GPS);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_HUMIDITY);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_IS_COLOR);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_LIVEVIDEOMODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_MECHANICALSHUTTER);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_PRESSURE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_QHY5II_GUIDE_MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_SINGLEFRAMEMODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_SINGNALCLAMP_INTERFACE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_TECOVERPROTECT_INTERFACE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_TRIGER_INTERFACE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CAM_VIEW_MODE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_AMPV);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_BRIGHTNESS);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_CFWPORT);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_CFWSLOTSNUM);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_CHANNELS);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_CONTRAST);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_COOLER);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_CURPWM);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_CURTEMP);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_DDR);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_EXPOSURE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_GAIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_GAMMA);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_ID);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_MANULPWM);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_MAX_ID);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_MAX_ID_Error);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_OFFSET);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_ROWNOISERE);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_SPEED);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_ST4PORT);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_SensorChamberCycle_PUMP);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_TRANSFERBIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_USBTRAFFIC);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_VACUUM_PUMP);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_VCAM);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_WBB);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_WBG);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONTROL_WBR);
  Py_VISIT(traverse_module_state->__pyx_n_s_CancelQHYCCDExposing);
  Py_VISIT(traverse_module_state->__pyx_n_s_CancelQHYCCDExposingAndReadout);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClocksPerLine);
  Py_VISIT(traverse_module_state->__pyx_n_s_CloseQHYCCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_DDR_BUFFER_CAPACITY);
  Py_VISIT(traverse_module_state->__pyx_n_s_DDR_BUFFER_READ_THRESHOLD);
  Py_VISIT(traverse_module_state->__pyx_n_s_DefaultGain);
  Py_VISIT(traverse_module_state->__pyx_n_s_DefaultOffset);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExpQHYCCDSingleFrame);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Format_string_allocated_too_shor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Format_string_allocated_too_shor_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_FramePeriod_us);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetBinModes);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDChipInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDEffectiveArea);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDExposureRemaining);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDId);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDLiveFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDMemLength);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDModel);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDNumberOfReadModes);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDOverScanArea);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDParam);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDParamMinMaxStep);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDPreciseExposureInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDReadMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDReadModeName);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDReadModeResolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDSDKVersion);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDSingleFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_GetQHYCCDType);
  Py_VISIT(traverse_module_state->__pyx_n_s_IS_EXPOSING_DONE);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_n_s_InitQHYCCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_InitQHYCCDResource);
  Py_VISIT(traverse_module_state->__pyx_n_s_IsQHYCCDControlAvailable);
  Py_VISIT(traverse_module_state->__pyx_n_s_LinePeriod_ns);
  Py_VISIT(traverse_module_state->__pyx_n_s_LinesPerFrame);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Non_native_byte_order_not_suppor);
  Py_VISIT(traverse_module_state->__pyx_n_s_OSError);
  Py_VISIT(traverse_module_state->__pyx_n_s_OpenQHYCCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_OutputDataActualBits);
  Py_VISIT(traverse_module_state->__pyx_n_s_OutputDataAlignment);
  Py_VISIT(traverse_module_state->__pyx_n_s_PixelPeriod_ps);
  Py_VISIT(traverse_module_state->__pyx_n_s_QHYCCD_3A_AUTOBALANCE);
  Py_VISIT(traverse_module_state->__pyx_n_s_QHYCCD_3A_AUTOEXPOSURE);
  Py_VISIT(traverse_module_state->__pyx_n_s_QHYCCD_3A_AUTOFOCUS);
  Py_VISIT(traverse_module_state->__pyx_kp_u_QHYCCD_SDK);
  Py_VISIT(traverse_module_state->__pyx_n_s_QHYCCD_pyqhyccd);
  Py_VISIT(traverse_module_state->__pyx_kp_s_QHYCCD_pyqhyccd_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReleaseQHYCCDResource);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ScanQHYCCD);
  Py_VISIT(traverse_module_state->__pyx_n_s_ScreenStretchB);
  Py_VISIT(traverse_module_state->__pyx_n_s_ScreenStretchW);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetQHYCCDBinMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetQHYCCDBitsMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetQHYCCDParam);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetQHYCCDReadMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetQHYCCDResolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_SetQHYCCDStreamMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopQHYCCDLive);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_n_s__8);
  Py_VISIT(traverse_module_state->__pyx_n_s__82);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_binh);
  Py_VISIT(traverse_module_state->__pyx_n_s_binw);
  Py_VISIT(traverse_module_state->__pyx_n_s_bpp);
  Py_VISIT(traverse_module_state->__pyx_n_s_cam);
  Py_VISIT(traverse_module_state->__pyx_n_s_camid);
  Py_VISIT(traverse_module_state->__pyx_n_s_cammodel);
  Py_VISIT(traverse_module_state->__pyx_n_s_channels);
  Py_VISIT(traverse_module_state->__pyx_n_s_chiph);
  Py_VISIT(traverse_module_state->__pyx_n_s_chipw);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_controlId);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_day);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_kp_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_h);
  Py_VISIT(traverse_module_state->__pyx_n_s_hasHardwareFrameCounter);
  Py_VISIT(traverse_module_state->__pyx_n_s_hbin);
  Py_VISIT(traverse_module_state->__pyx_n_s_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_imageh);
  Py_VISIT(traverse_module_state->__pyx_n_s_imagew);
  Py_VISIT(traverse_module_state->__pyx_n_s_imgdata);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_isLongExposureMode);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_memlength);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_modeNumber);
  Py_VISIT(traverse_module_state->__pyx_n_s_modes);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_month);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_numModes);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_s_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_s_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_os);
  Py_VISIT(traverse_module_state->__pyx_n_s_pixelh);
  Py_VISIT(traverse_module_state->__pyx_n_s_pixelw);
  Py_VISIT(traverse_module_state->__pyx_n_s_pmax);
  Py_VISIT(traverse_module_state->__pyx_n_s_pmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_pstep);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_sizeX);
  Py_VISIT(traverse_module_state->__pyx_n_s_sizeY);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_startX);
  Py_VISIT(traverse_module_state->__pyx_n_s_startY);
  Py_VISIT(traverse_module_state->__pyx_n_s_stderror);
  Py_VISIT(traverse_module_state->__pyx_n_s_strerror);
  Py_VISIT(traverse_module_state->__pyx_n_s_subday);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_kp_u_unknown_dtype_code_in_numpy_pxd);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_w);
  Py_VISIT(traverse_module_state->__pyx_n_s_warnings);
  Py_VISIT(traverse_module_state->__pyx_n_s_wbin);
  Py_VISIT(traverse_module_state->__pyx_n_s_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_xsize);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_n_s_year);
  Py_VISIT(traverse_module_state->__pyx_n_s_ysize);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__9);
  Py_VISIT(traverse_module_state->__pyx_codeobj__10);
  Py_VISIT(traverse_module_state->__pyx_codeobj__11);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_n_s_ActualExposureTime __pyx_mstate_global->__pyx_n_s_ActualExposureTime
#define __pyx_n_s_BeginQHYCCDLive __pyx_mstate_global->__pyx_n_s_BeginQHYCCDLive
#define __pyx_n_s_CAM_16BITS __pyx_mstate_global->__pyx_n_s_CAM_16BITS
#define __pyx_n_s_CAM_8BITS __pyx_mstate_global->__pyx_n_s_CAM_8BITS
#define __pyx_n_s_CAM_BIN1X1MODE __pyx_mstate_global->__pyx_n_s_CAM_BIN1X1MODE
#define __pyx_n_s_CAM_BIN2X2MODE __pyx_mstate_global->__pyx_n_s_CAM_BIN2X2MODE
#define __pyx_n_s_CAM_BIN3X3MODE __pyx_mstate_global->__pyx_n_s_CAM_BIN3X3MODE
#define __pyx_n_s_CAM_BIN4X4MODE __pyx_mstate_global->__pyx_n_s_CAM_BIN4X4MODE
#define __pyx_n_s_CAM_CALIBRATEFPN_INTERFACE __pyx_mstate_global->__pyx_n_s_CAM_CALIBRATEFPN_INTERFACE
#define __pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF __pyx_mstate_global->__pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF
#define __pyx_n_s_CAM_COLOR __pyx_mstate_global->__pyx_n_s_CAM_COLOR
#define __pyx_n_s_CAM_FINETONE_INTERFACE __pyx_mstate_global->__pyx_n_s_CAM_FINETONE_INTERFACE
#define __pyx_n_s_CAM_GPS __pyx_mstate_global->__pyx_n_s_CAM_GPS
#define __pyx_n_s_CAM_HUMIDITY __pyx_mstate_global->__pyx_n_s_CAM_HUMIDITY
#define __pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE __pyx_mstate_global->__pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE
#define __pyx_n_s_CAM_IS_COLOR __pyx_mstate_global->__pyx_n_s_CAM_IS_COLOR
#define __pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE __pyx_mstate_global->__pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE
#define __pyx_n_s_CAM_LIVEVIDEOMODE __pyx_mstate_global->__pyx_n_s_CAM_LIVEVIDEOMODE
#define __pyx_n_s_CAM_MECHANICALSHUTTER __pyx_mstate_global->__pyx_n_s_CAM_MECHANICALSHUTTER
#define __pyx_n_s_CAM_PRESSURE __pyx_mstate_global->__pyx_n_s_CAM_PRESSURE
#define __pyx_n_s_CAM_QHY5II_GUIDE_MODE __pyx_mstate_global->__pyx_n_s_CAM_QHY5II_GUIDE_MODE
#define __pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC __pyx_mstate_global->__pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC
#define __pyx_n_s_CAM_SINGLEFRAMEMODE __pyx_mstate_global->__pyx_n_s_CAM_SINGLEFRAMEMODE
#define __pyx_n_s_CAM_SINGNALCLAMP_INTERFACE __pyx_mstate_global->__pyx_n_s_CAM_SINGNALCLAMP_INTERFACE
#define __pyx_n_s_CAM_TECOVERPROTECT_INTERFACE __pyx_mstate_global->__pyx_n_s_CAM_TECOVERPROTECT_INTERFACE
#define __pyx_n_s_CAM_TRIGER_INTERFACE __pyx_mstate_global->__pyx_n_s_CAM_TRIGER_INTERFACE
#define __pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE __pyx_mstate_global->__pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE
#define __pyx_n_s_CAM_VIEW_MODE __pyx_mstate_global->__pyx_n_s_CAM_VIEW_MODE
#define __pyx_n_s_CONTROL_AMPV __pyx_mstate_global->__pyx_n_s_CONTROL_AMPV
#define __pyx_n_s_CONTROL_BRIGHTNESS __pyx_mstate_global->__pyx_n_s_CONTROL_BRIGHTNESS
#define __pyx_n_s_CONTROL_CFWPORT __pyx_mstate_global->__pyx_n_s_CONTROL_CFWPORT
#define __pyx_n_s_CONTROL_CFWSLOTSNUM __pyx_mstate_global->__pyx_n_s_CONTROL_CFWSLOTSNUM
#define __pyx_n_s_CONTROL_CHANNELS __pyx_mstate_global->__pyx_n_s_CONTROL_CHANNELS
#define __pyx_n_s_CONTROL_CONTRAST __pyx_mstate_global->__pyx_n_s_CONTROL_CONTRAST
#define __pyx_n_s_CONTROL_COOLER __pyx_mstate_global->__pyx_n_s_CONTROL_COOLER
#define __pyx_n_s_CONTROL_CURPWM __pyx_mstate_global->__pyx_n_s_CONTROL_CURPWM
#define __pyx_n_s_CONTROL_CURTEMP __pyx_mstate_global->__pyx_n_s_CONTROL_CURTEMP
#define __pyx_n_s_CONTROL_DDR __pyx_mstate_global->__pyx_n_s_CONTROL_DDR
#define __pyx_n_s_CONTROL_EXPOSURE __pyx_mstate_global->__pyx_n_s_CONTROL_EXPOSURE
#define __pyx_n_s_CONTROL_GAIN __pyx_mstate_global->__pyx_n_s_CONTROL_GAIN
#define __pyx_n_s_CONTROL_GAMMA __pyx_mstate_global->__pyx_n_s_CONTROL_GAMMA
#define __pyx_n_s_CONTROL_ID __pyx_mstate_global->__pyx_n_s_CONTROL_ID
#define __pyx_n_s_CONTROL_MANULPWM __pyx_mstate_global->__pyx_n_s_CONTROL_MANULPWM
#define __pyx_n_s_CONTROL_MAX_ID __pyx_mstate_global->__pyx_n_s_CONTROL_MAX_ID
#define __pyx_n_s_CONTROL_MAX_ID_Error __pyx_mstate_global->__pyx_n_s_CONTROL_MAX_ID_Error
#define __pyx_n_s_CONTROL_OFFSET __pyx_mstate_global->__pyx_n_s_CONTROL_OFFSET
#define __pyx_n_s_CONTROL_ROWNOISERE __pyx_mstate_global->__pyx_n_s_CONTROL_ROWNOISERE
#define __pyx_n_s_CONTROL_SPEED __pyx_mstate_global->__pyx_n_s_CONTROL_SPEED
#define __pyx_n_s_CONTROL_ST4PORT __pyx_mstate_global->__pyx_n_s_CONTROL_ST4PORT
#define __pyx_n_s_CONTROL_SensorChamberCycle_PUMP __pyx_mstate_global->__pyx_n_s_CONTROL_SensorChamberCycle_PUMP
#define __pyx_n_s_CONTROL_TRANSFERBIT __pyx_mstate_global->__pyx_n_s_CONTROL_TRANSFERBIT
#define __pyx_n_s_CONTROL_USBTRAFFIC __pyx_mstate_global->__pyx_n_s_CONTROL_USBTRAFFIC
#define __pyx_n_s_CONTROL_VACUUM_PUMP __pyx_mstate_global->__pyx_n_s_CONTROL_VACUUM_PUMP
#define __pyx_n_s_CONTROL_VCAM __pyx_mstate_global->__pyx_n_s_CONTROL_VCAM
#define __pyx_n_s_CONTROL_WBB __pyx_mstate_global->__pyx_n_s_CONTROL_WBB
#define __pyx_n_s_CONTROL_WBG __pyx_mstate_global->__pyx_n_s_CONTROL_WBG
#define __pyx_n_s_CONTROL_WBR __pyx_mstate_global->__pyx_n_s_CONTROL_WBR
#define __pyx_n_s_CancelQHYCCDExposing __pyx_mstate_global->__pyx_n_s_CancelQHYCCDExposing
#define __pyx_n_s_CancelQHYCCDExposingAndReadout __pyx_mstate_global->__pyx_n_s_CancelQHYCCDExposingAndReadout
#define __pyx_n_s_ClocksPerLine __pyx_mstate_global->__pyx_n_s_ClocksPerLine
#define __pyx_n_s_CloseQHYCCD __pyx_mstate_global->__pyx_n_s_CloseQHYCCD
#define __pyx_n_s_DDR_BUFFER_CAPACITY __pyx_mstate_global->__pyx_n_s_DDR_BUFFER_CAPACITY
#define __pyx_n_s_DDR_BUFFER_READ_THRESHOLD __pyx_mstate_global->__pyx_n_s_DDR_BUFFER_READ_THRESHOLD
#define __pyx_n_s_DefaultGain __pyx_mstate_global->__pyx_n_s_DefaultGain
#define __pyx_n_s_DefaultOffset __pyx_mstate_global->__pyx_n_s_DefaultOffset
#define __pyx_n_s_ExpQHYCCDSingleFrame __pyx_mstate_global->__pyx_n_s_ExpQHYCCDSingleFrame
#define __pyx_kp_u_Format_string_allocated_too_shor __pyx_mstate_global->__pyx_kp_u_Format_string_allocated_too_shor
#define __pyx_kp_u_Format_string_allocated_too_shor_2 __pyx_mstate_global->__pyx_kp_u_Format_string_allocated_too_shor_2
#define __pyx_n_s_FramePeriod_us __pyx_mstate_global->__pyx_n_s_FramePeriod_us
#define __pyx_n_s_GetBinModes __pyx_mstate_global->__pyx_n_s_GetBinModes
#define __pyx_n_s_GetQHYCCDChipInfo __pyx_mstate_global->__pyx_n_s_GetQHYCCDChipInfo
#define __pyx_n_s_GetQHYCCDEffectiveArea __pyx_mstate_global->__pyx_n_s_GetQHYCCDEffectiveArea
#define __pyx_n_s_GetQHYCCDExposureRemaining __pyx_mstate_global->__pyx_n_s_GetQHYCCDExposureRemaining
#define __pyx_n_s_GetQHYCCDId __pyx_mstate_global->__pyx_n_s_GetQHYCCDId
#define __pyx_n_s_GetQHYCCDLiveFrame __pyx_mstate_global->__pyx_n_s_GetQHYCCDLiveFrame
#define __pyx_n_s_GetQHYCCDMemLength __pyx_mstate_global->__pyx_n_s_GetQHYCCDMemLength
#define __pyx_n_s_GetQHYCCDModel __pyx_mstate_global->__pyx_n_s_GetQHYCCDModel
#define __pyx_n_s_GetQHYCCDNumberOfReadModes __pyx_mstate_global->__pyx_n_s_GetQHYCCDNumberOfReadModes
#define __pyx_n_s_GetQHYCCDOverScanArea __pyx_mstate_global->__pyx_n_s_GetQHYCCDOverScanArea
#define __pyx_n_s_GetQHYCCDParam __pyx_mstate_global->__pyx_n_s_GetQHYCCDParam
#define __pyx_n_s_GetQHYCCDParamMinMaxStep __pyx_mstate_global->__pyx_n_s_GetQHYCCDParamMinMaxStep
#define __pyx_n_s_GetQHYCCDPreciseExposureInfo __pyx_mstate_global->__pyx_n_s_GetQHYCCDPreciseExposureInfo
#define __pyx_n_s_GetQHYCCDReadMode __pyx_mstate_global->__pyx_n_s_GetQHYCCDReadMode
#define __pyx_n_s_GetQHYCCDReadModeName __pyx_mstate_global->__pyx_n_s_GetQHYCCDReadModeName
#define __pyx_n_s_GetQHYCCDReadModeResolution __pyx_mstate_global->__pyx_n_s_GetQHYCCDReadModeResolution
#define __pyx_n_s_GetQHYCCDSDKVersion __pyx_mstate_global->__pyx_n_s_GetQHYCCDSDKVersion
#define __pyx_n_s_GetQHYCCDSingleFrame __pyx_mstate_global->__pyx_n_s_GetQHYCCDSingleFrame
#define __pyx_n_s_GetQHYCCDType __pyx_mstate_global->__pyx_n_s_GetQHYCCDType
#define __pyx_n_s_IS_EXPOSING_DONE __pyx_mstate_global->__pyx_n_s_IS_EXPOSING_DONE
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_n_s_InitQHYCCD __pyx_mstate_global->__pyx_n_s_InitQHYCCD
#define __pyx_n_s_InitQHYCCDResource __pyx_mstate_global->__pyx_n_s_InitQHYCCDResource
#define __pyx_n_s_IsQHYCCDControlAvailable __pyx_mstate_global->__pyx_n_s_IsQHYCCDControlAvailable
#define __pyx_n_s_LinePeriod_ns __pyx_mstate_global->__pyx_n_s_LinePeriod_ns
#define __pyx_n_s_LinesPerFrame __pyx_mstate_global->__pyx_n_s_LinesPerFrame
#define __pyx_kp_u_Non_native_byte_order_not_suppor __pyx_mstate_global->__pyx_kp_u_Non_native_byte_order_not_suppor
#define __pyx_n_s_OSError __pyx_mstate_global->__pyx_n_s_OSError
#define __pyx_n_s_OpenQHYCCD __pyx_mstate_global->__pyx_n_s_OpenQHYCCD
#define __pyx_n_s_OutputDataActualBits __pyx_mstate_global->__pyx_n_s_OutputDataActualBits
#define __pyx_n_s_OutputDataAlignment __pyx_mstate_global->__pyx_n_s_OutputDataAlignment
#define __pyx_n_s_PixelPeriod_ps __pyx_mstate_global->__pyx_n_s_PixelPeriod_ps
#define __pyx_n_s_QHYCCD_3A_AUTOBALANCE __pyx_mstate_global->__pyx_n_s_QHYCCD_3A_AUTOBALANCE
#define __pyx_n_s_QHYCCD_3A_AUTOEXPOSURE __pyx_mstate_global->__pyx_n_s_QHYCCD_3A_AUTOEXPOSURE
#define __pyx_n_s_QHYCCD_3A_AUTOFOCUS __pyx_mstate_global->__pyx_n_s_QHYCCD_3A_AUTOFOCUS
#define __pyx_kp_u_QHYCCD_SDK __pyx_mstate_global->__pyx_kp_u_QHYCCD_SDK
#define __pyx_n_s_QHYCCD_pyqhyccd __pyx_mstate_global->__pyx_n_s_QHYCCD_pyqhyccd
#define __pyx_kp_s_QHYCCD_pyqhyccd_pyx __pyx_mstate_global->__pyx_kp_s_QHYCCD_pyqhyccd_pyx
#define __pyx_n_s_ReleaseQHYCCDResource __pyx_mstate_global->__pyx_n_s_ReleaseQHYCCDResource
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_ScanQHYCCD __pyx_mstate_global->__pyx_n_s_ScanQHYCCD
#define __pyx_n_s_ScreenStretchB __pyx_mstate_global->__pyx_n_s_ScreenStretchB
#define __pyx_n_s_ScreenStretchW __pyx_mstate_global->__pyx_n_s_ScreenStretchW
#define __pyx_n_s_SetQHYCCDBinMode __pyx_mstate_global->__pyx_n_s_SetQHYCCDBinMode
#define __pyx_n_s_SetQHYCCDBitsMode __pyx_mstate_global->__pyx_n_s_SetQHYCCDBitsMode
#define __pyx_n_s_SetQHYCCDParam __pyx_mstate_global->__pyx_n_s_SetQHYCCDParam
#define __pyx_n_s_SetQHYCCDReadMode __pyx_mstate_global->__pyx_n_s_SetQHYCCDReadMode
#define __pyx_n_s_SetQHYCCDResolution __pyx_mstate_global->__pyx_n_s_SetQHYCCDResolution
#define __pyx_n_s_SetQHYCCDStreamMode __pyx_mstate_global->__pyx_n_s_SetQHYCCDStreamMode
#define __pyx_n_s_StopQHYCCDLive __pyx_mstate_global->__pyx_n_s_StopQHYCCDLive
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_n_s__8 __pyx_mstate_global->__pyx_n_s__8
#define __pyx_n_s__82 __pyx_mstate_global->__pyx_n_s__82
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_binh __pyx_mstate_global->__pyx_n_s_binh
#define __pyx_n_s_binw __pyx_mstate_global->__pyx_n_s_binw
#define __pyx_n_s_bpp __pyx_mstate_global->__pyx_n_s_bpp
#define __pyx_n_s_cam __pyx_mstate_global->__pyx_n_s_cam
#define __pyx_n_s_camid __pyx_mstate_global->__pyx_n_s_camid
#define __pyx_n_s_cammodel __pyx_mstate_global->__pyx_n_s_cammodel
#define __pyx_n_s_channels __pyx_mstate_global->__pyx_n_s_channels
#define __pyx_n_s_chiph __pyx_mstate_global->__pyx_n_s_chiph
#define __pyx_n_s_chipw __pyx_mstate_global->__pyx_n_s_chipw
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_controlId __pyx_mstate_global->__pyx_n_s_controlId
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_day __pyx_mstate_global->__pyx_n_s_day
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_kp_s_error __pyx_mstate_global->__pyx_kp_s_error
#define __pyx_n_s_h __pyx_mstate_global->__pyx_n_s_h
#define __pyx_n_s_hasHardwareFrameCounter __pyx_mstate_global->__pyx_n_s_hasHardwareFrameCounter
#define __pyx_n_s_hbin __pyx_mstate_global->__pyx_n_s_hbin
#define __pyx_n_s_height __pyx_mstate_global->__pyx_n_s_height
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_imageh __pyx_mstate_global->__pyx_n_s_imageh
#define __pyx_n_s_imagew __pyx_mstate_global->__pyx_n_s_imagew
#define __pyx_n_s_imgdata __pyx_mstate_global->__pyx_n_s_imgdata
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_isLongExposureMode __pyx_mstate_global->__pyx_n_s_isLongExposureMode
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_memlength __pyx_mstate_global->__pyx_n_s_memlength
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_modeNumber __pyx_mstate_global->__pyx_n_s_modeNumber
#define __pyx_n_s_modes __pyx_mstate_global->__pyx_n_s_modes
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_month __pyx_mstate_global->__pyx_n_s_month
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_numModes __pyx_mstate_global->__pyx_n_s_numModes
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_s_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_s_numpy_core_multiarray_failed_to
#define __pyx_kp_s_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_s_numpy_core_umath_failed_to_impor
#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os
#define __pyx_n_s_pixelh __pyx_mstate_global->__pyx_n_s_pixelh
#define __pyx_n_s_pixelw __pyx_mstate_global->__pyx_n_s_pixelw
#define __pyx_n_s_pmax __pyx_mstate_global->__pyx_n_s_pmax
#define __pyx_n_s_pmin __pyx_mstate_global->__pyx_n_s_pmin
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_pstep __pyx_mstate_global->__pyx_n_s_pstep
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_ret __pyx_mstate_global->__pyx_n_s_ret
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_sizeX __pyx_mstate_global->__pyx_n_s_sizeX
#define __pyx_n_s_sizeY __pyx_mstate_global->__pyx_n_s_sizeY
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_startX __pyx_mstate_global->__pyx_n_s_startX
#define __pyx_n_s_startY __pyx_mstate_global->__pyx_n_s_startY
#define __pyx_n_s_stderror __pyx_mstate_global->__pyx_n_s_stderror
#define __pyx_n_s_strerror __pyx_mstate_global->__pyx_n_s_strerror
#define __pyx_n_s_subday __pyx_mstate_global->__pyx_n_s_subday
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_kp_u_unknown_dtype_code_in_numpy_pxd __pyx_mstate_global->__pyx_kp_u_unknown_dtype_code_in_numpy_pxd
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_w __pyx_mstate_global->__pyx_n_s_w
#define __pyx_n_s_warnings __pyx_mstate_global->__pyx_n_s_warnings
#define __pyx_n_s_wbin __pyx_mstate_global->__pyx_n_s_wbin
#define __pyx_n_s_width __pyx_mstate_global->__pyx_n_s_width
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_s_xsize __pyx_mstate_global->__pyx_n_s_xsize
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_n_s_year __pyx_mstate_global->__pyx_n_s_year
#define __pyx_n_s_ysize __pyx_mstate_global->__pyx_n_s_ysize
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_codeobj__9 __pyx_mstate_global->__pyx_codeobj__9
#define __pyx_codeobj__10 __pyx_mstate_global->__pyx_codeobj__10
#define __pyx_codeobj__11 __pyx_mstate_global->__pyx_codeobj__11
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#endif
/* #### Code section: module_code ### */

/* "QHYCCD/pyqhyccd.pyx":130
 *     CONTROL_MAX_ID=qhy.CONTROL_MAX_ID
 * 
 * cdef int chkerr(long err):             # <<<<<<<<<<<<<<
 *     if err != qhy.QHYCCD_SUCCESS:
 *         print("error: ", err)
 */

static int __pyx_f_6QHYCCD_8pyqhyccd_chkerr(long __pyx_v_err) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chkerr", 0);

  /* "QHYCCD/pyqhyccd.pyx":131
 * 
 * cdef int chkerr(long err):
 *     if err != qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         print("error: ", err)
 *         raise OSError(-err, os.strerror(-err))
 */
  __pyx_t_1 = ((__pyx_v_err != QHYCCD_SUCCESS) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "QHYCCD/pyqhyccd.pyx":132
 * cdef int chkerr(long err):
 *     if err != qhy.QHYCCD_SUCCESS:
 *         print("error: ", err)             # <<<<<<<<<<<<<<
 *         raise OSError(-err, os.strerror(-err))
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_err); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_s_error);
    __Pyx_GIVEREF(__pyx_kp_s_error);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_error);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "QHYCCD/pyqhyccd.pyx":133
 *     if err != qhy.QHYCCD_SUCCESS:
 *         print("error: ", err)
 *         raise OSError(-err, os.strerror(-err))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long((-__pyx_v_err)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_strerror); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_long((-__pyx_v_err)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_OSError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 133, __pyx_L1_error)

    /* "QHYCCD/pyqhyccd.pyx":131
 * 
 * cdef int chkerr(long err):
 *     if err != qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         print("error: ", err)
 *         raise OSError(-err, os.strerror(-err))
 */
  }

  /* "QHYCCD/pyqhyccd.pyx":130
 *     CONTROL_MAX_ID=qhy.CONTROL_MAX_ID
 * 
 * cdef int chkerr(long err):             # <<<<<<<<<<<<<<
 *     if err != qhy.QHYCCD_SUCCESS:
 *         print("error: ", err)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("QHYCCD.pyqhyccd.chkerr", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":136
 * 
 * 
 * def InitQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_1InitQHYCCDResource(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_1InitQHYCCDResource = {"InitQHYCCDResource", (PyCFunction)__pyx_pw_6QHYCCD_8pyqhyccd_1InitQHYCCDResource, METH_NOARGS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_1InitQHYCCDResource(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("InitQHYCCDResource (wrapper)", 0);
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_InitQHYCCDResource(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_InitQHYCCDResource(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("InitQHYCCDResource", 0);

  /* "QHYCCD/pyqhyccd.pyx":137
 * 
 * def InitQHYCCDResource():
 *     chkerr(qhy.InitQHYCCDResource())             # <<<<<<<<<<<<<<
 * 
 * def ReleaseQHYCCDResource():
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(InitQHYCCDResource()));

  /* "QHYCCD/pyqhyccd.pyx":136
 * 
 * 
 * def InitQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":139
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 * def ReleaseQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_3ReleaseQHYCCDResource(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_3ReleaseQHYCCDResource = {"ReleaseQHYCCDResource", (PyCFunction)__pyx_pw_6QHYCCD_8pyqhyccd_3ReleaseQHYCCDResource, METH_NOARGS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_3ReleaseQHYCCDResource(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ReleaseQHYCCDResource (wrapper)", 0);
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_2ReleaseQHYCCDResource(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_2ReleaseQHYCCDResource(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ReleaseQHYCCDResource", 0);

  /* "QHYCCD/pyqhyccd.pyx":140
 * 
 * def ReleaseQHYCCDResource():
 *     chkerr(qhy.ReleaseQHYCCDResource())             # <<<<<<<<<<<<<<
 * 
 * def ScanQHYCCD():
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(ReleaseQHYCCDResource()));

  /* "QHYCCD/pyqhyccd.pyx":139
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 * def ReleaseQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":142
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 * def ScanQHYCCD():             # <<<<<<<<<<<<<<
 *     return(qhy.ScanQHYCCD())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_5ScanQHYCCD(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_5ScanQHYCCD = {"ScanQHYCCD", (PyCFunction)__pyx_pw_6QHYCCD_8pyqhyccd_5ScanQHYCCD, METH_NOARGS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_5ScanQHYCCD(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ScanQHYCCD (wrapper)", 0);
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_4ScanQHYCCD(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_4ScanQHYCCD(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ScanQHYCCD", 0);

  /* "QHYCCD/pyqhyccd.pyx":143
 * 
 * def ScanQHYCCD():
 *     return(qhy.ScanQHYCCD())             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDId(i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(ScanQHYCCD()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":142
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 * def ScanQHYCCD():             # <<<<<<<<<<<<<<
 *     return(qhy.ScanQHYCCD())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.ScanQHYCCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":145
 *     return(qhy.ScanQHYCCD())
 * 
 * def GetQHYCCDId(i):             # <<<<<<<<<<<<<<
 *     cdef char camid[256]
 *     chkerr(qhy.GetQHYCCDId(i, camid))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_7GetQHYCCDId(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_7GetQHYCCDId = {"GetQHYCCDId", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_7GetQHYCCDId, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_7GetQHYCCDId(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_i = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDId (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 145, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDId") < 0)) __PYX_ERR(0, 145, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_i = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDId", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 145, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_6GetQHYCCDId(__pyx_self, __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_6GetQHYCCDId(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_i) {
  char __pyx_v_camid[0x100];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDId", 0);

  /* "QHYCCD/pyqhyccd.pyx":147
 * def GetQHYCCDId(i):
 *     cdef char camid[256]
 *     chkerr(qhy.GetQHYCCDId(i, camid))             # <<<<<<<<<<<<<<
 *     return camid
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_i); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDId(__pyx_t_1, __pyx_v_camid)));

  /* "QHYCCD/pyqhyccd.pyx":148
 *     cdef char camid[256]
 *     chkerr(qhy.GetQHYCCDId(i, camid))
 *     return camid             # <<<<<<<<<<<<<<
 * 
 * def OpenQHYCCD(camid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_FromString(__pyx_v_camid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":145
 *     return(qhy.ScanQHYCCD())
 * 
 * def GetQHYCCDId(i):             # <<<<<<<<<<<<<<
 *     cdef char camid[256]
 *     chkerr(qhy.GetQHYCCDId(i, camid))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":150
 *     return camid
 * 
 * def OpenQHYCCD(camid):             # <<<<<<<<<<<<<<
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_9OpenQHYCCD(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_9OpenQHYCCD = {"OpenQHYCCD", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_9OpenQHYCCD, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_9OpenQHYCCD(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_camid = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("OpenQHYCCD (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_camid,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_camid,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_camid)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "OpenQHYCCD") < 0)) __PYX_ERR(0, 150, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_camid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("OpenQHYCCD", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 150, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.OpenQHYCCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_8OpenQHYCCD(__pyx_self, __pyx_v_camid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_8OpenQHYCCD(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_camid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("OpenQHYCCD", 0);

  /* "QHYCCD/pyqhyccd.pyx":151
 * 
 * def OpenQHYCCD(camid):
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))             # <<<<<<<<<<<<<<
 * 
 * def SetQHYCCDStreamMode(cam, mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_camid); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_t_2 = PyLong_FromVoidPtr(OpenQHYCCD(((char *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":150
 *     return camid
 * 
 * def OpenQHYCCD(camid):             # <<<<<<<<<<<<<<
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.OpenQHYCCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":153
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 * def SetQHYCCDStreamMode(cam, mode):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_11SetQHYCCDStreamMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_11SetQHYCCDStreamMode = {"SetQHYCCDStreamMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_11SetQHYCCDStreamMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_11SetQHYCCDStreamMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_mode = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetQHYCCDStreamMode (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_mode,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_mode,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 153, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 153, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDStreamMode", 1, 2, 2, 1); __PYX_ERR(0, 153, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetQHYCCDStreamMode") < 0)) __PYX_ERR(0, 153, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_mode = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetQHYCCDStreamMode", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 153, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDStreamMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_10SetQHYCCDStreamMode(__pyx_self, __pyx_v_cam, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_10SetQHYCCDStreamMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint8_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetQHYCCDStreamMode", 0);

  /* "QHYCCD/pyqhyccd.pyx":154
 * 
 * def SetQHYCCDStreamMode(cam, mode):
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))             # <<<<<<<<<<<<<<
 * 
 * def InitQHYCCD(cam):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint8_t(__pyx_v_mode); if (unlikely((__pyx_t_1 == ((uint8_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(SetQHYCCDStreamMode(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_1)));

  /* "QHYCCD/pyqhyccd.pyx":153
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 * def SetQHYCCDStreamMode(cam, mode):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDStreamMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":156
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 * def InitQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_13InitQHYCCD(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_13InitQHYCCD = {"InitQHYCCD", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_13InitQHYCCD, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_13InitQHYCCD(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("InitQHYCCD (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 156, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "InitQHYCCD") < 0)) __PYX_ERR(0, 156, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("InitQHYCCD", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.InitQHYCCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_12InitQHYCCD(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_12InitQHYCCD(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("InitQHYCCD", 0);

  /* "QHYCCD/pyqhyccd.pyx":157
 * 
 * def InitQHYCCD(cam):
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def CloseQHYCCD(cam):
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(InitQHYCCD(PyLong_AsVoidPtr(__pyx_v_cam))));

  /* "QHYCCD/pyqhyccd.pyx":156
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 * def InitQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":159
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def CloseQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_15CloseQHYCCD(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_15CloseQHYCCD = {"CloseQHYCCD", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_15CloseQHYCCD, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_15CloseQHYCCD(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CloseQHYCCD (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CloseQHYCCD") < 0)) __PYX_ERR(0, 159, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CloseQHYCCD", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.CloseQHYCCD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_14CloseQHYCCD(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_14CloseQHYCCD(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CloseQHYCCD", 0);

  /* "QHYCCD/pyqhyccd.pyx":160
 * 
 * def CloseQHYCCD(cam):
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDChipInfo(cam):
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(CloseQHYCCD(PyLong_AsVoidPtr(__pyx_v_cam))));

  /* "QHYCCD/pyqhyccd.pyx":159
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def CloseQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":162
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDChipInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef double chipw, chiph, pixelw, pixelh
 *     cdef uint32_t imagew, imageh, bpp
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_17GetQHYCCDChipInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_17GetQHYCCDChipInfo = {"GetQHYCCDChipInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_17GetQHYCCDChipInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_17GetQHYCCDChipInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDChipInfo (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDChipInfo") < 0)) __PYX_ERR(0, 162, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDChipInfo", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDChipInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_16GetQHYCCDChipInfo(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_16GetQHYCCDChipInfo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  double __pyx_v_chipw;
  double __pyx_v_chiph;
  double __pyx_v_pixelw;
  double __pyx_v_pixelh;
  uint32_t __pyx_v_imagew;
  uint32_t __pyx_v_imageh;
  uint32_t __pyx_v_bpp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDChipInfo", 0);

  /* "QHYCCD/pyqhyccd.pyx":165
 *     cdef double chipw, chiph, pixelw, pixelh
 *     cdef uint32_t imagew, imageh, bpp
 *     chkerr(qhy.GetQHYCCDChipInfo(PyLong_AsVoidPtr(cam), &chipw, &chiph, &imagew, &imageh, &pixelw, &pixelh, &bpp))             # <<<<<<<<<<<<<<
 *     return (chipw, chiph, imagew, imageh, pixelw, pixelh, bpp)
 * 
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDChipInfo(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_chipw), (&__pyx_v_chiph), (&__pyx_v_imagew), (&__pyx_v_imageh), (&__pyx_v_pixelw), (&__pyx_v_pixelh), (&__pyx_v_bpp))));

  /* "QHYCCD/pyqhyccd.pyx":166
 *     cdef uint32_t imagew, imageh, bpp
 *     chkerr(qhy.GetQHYCCDChipInfo(PyLong_AsVoidPtr(cam), &chipw, &chiph, &imagew, &imageh, &pixelw, &pixelh, &bpp))
 *     return (chipw, chiph, imagew, imageh, pixelw, pixelh, bpp)             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDModel(camid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_chipw); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_chiph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_imagew); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_imageh); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pixelw); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_pixelh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_bpp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":162
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDChipInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef double chipw, chiph, pixelw, pixelh
 *     cdef uint32_t imagew, imageh, bpp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDChipInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":168
 *     return (chipw, chiph, imagew, imageh, pixelw, pixelh, bpp)
 * 
 * def GetQHYCCDModel(camid):             # <<<<<<<<<<<<<<
 *     cdef char cammodel[256]
 *     chkerr(qhy.GetQHYCCDModel(camid, cammodel))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_19GetQHYCCDModel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_19GetQHYCCDModel = {"GetQHYCCDModel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_19GetQHYCCDModel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_19GetQHYCCDModel(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_camid = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDModel (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_camid,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_camid,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_camid)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDModel") < 0)) __PYX_ERR(0, 168, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_camid = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDModel", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_18GetQHYCCDModel(__pyx_self, __pyx_v_camid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_18GetQHYCCDModel(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_camid) {
  char __pyx_v_cammodel[0x100];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDModel", 0);

  /* "QHYCCD/pyqhyccd.pyx":170
 * def GetQHYCCDModel(camid):
 *     cdef char cammodel[256]
 *     chkerr(qhy.GetQHYCCDModel(camid, cammodel))             # <<<<<<<<<<<<<<
 *     return cammodel
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_camid); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDModel(__pyx_t_1, __pyx_v_cammodel)));

  /* "QHYCCD/pyqhyccd.pyx":171
 *     cdef char cammodel[256]
 *     chkerr(qhy.GetQHYCCDModel(camid, cammodel))
 *     return cammodel             # <<<<<<<<<<<<<<
 * 
 * def IsQHYCCDControlAvailable(cam, controlId):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_FromString(__pyx_v_cammodel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":168
 *     return (chipw, chiph, imagew, imageh, pixelw, pixelh, bpp)
 * 
 * def GetQHYCCDModel(camid):             # <<<<<<<<<<<<<<
 *     cdef char cammodel[256]
 *     chkerr(qhy.GetQHYCCDModel(camid, cammodel))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":173
 *     return cammodel
 * 
 * def IsQHYCCDControlAvailable(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)
 *     if ret == qhy.QHYCCD_SUCCESS:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_21IsQHYCCDControlAvailable(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_21IsQHYCCDControlAvailable = {"IsQHYCCDControlAvailable", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_21IsQHYCCDControlAvailable, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_21IsQHYCCDControlAvailable(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_controlId = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("IsQHYCCDControlAvailable (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_controlId)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("IsQHYCCDControlAvailable", 1, 2, 2, 1); __PYX_ERR(0, 173, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "IsQHYCCDControlAvailable") < 0)) __PYX_ERR(0, 173, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_controlId = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("IsQHYCCDControlAvailable", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 173, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.IsQHYCCDControlAvailable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_20IsQHYCCDControlAvailable(__pyx_self, __pyx_v_cam, __pyx_v_controlId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_20IsQHYCCDControlAvailable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId) {
  uint32_t __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  CONTROL_ID __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("IsQHYCCDControlAvailable", 0);

  /* "QHYCCD/pyqhyccd.pyx":174
 * 
 * def IsQHYCCDControlAvailable(cam, controlId):
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)             # <<<<<<<<<<<<<<
 *     if ret == qhy.QHYCCD_SUCCESS:
 *         return True
 */
  __pyx_t_1 = ((CONTROL_ID)__Pyx_PyInt_As_CONTROL_ID(__pyx_v_controlId)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_v_ret = IsQHYCCDControlAvailable(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_1);

  /* "QHYCCD/pyqhyccd.pyx":175
 * def IsQHYCCDControlAvailable(cam, controlId):
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)
 *     if ret == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_ret == QHYCCD_SUCCESS) != 0);
  if (__pyx_t_2) {

    /* "QHYCCD/pyqhyccd.pyx":176
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)
 *     if ret == qhy.QHYCCD_SUCCESS:
 *         return True             # <<<<<<<<<<<<<<
 *     else:
 *         return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "QHYCCD/pyqhyccd.pyx":175
 * def IsQHYCCDControlAvailable(cam, controlId):
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)
 *     if ret == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
  }

  /* "QHYCCD/pyqhyccd.pyx":178
 *         return True
 *     else:
 *         return False             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDParam(cam, controlId):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "QHYCCD/pyqhyccd.pyx":173
 *     return cammodel
 * 
 * def IsQHYCCDControlAvailable(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)
 *     if ret == qhy.QHYCCD_SUCCESS:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.IsQHYCCDControlAvailable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":180
 *         return False
 * 
 * def GetQHYCCDParam(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)
 *     if ret != qhy.QHYCCD_ERROR:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_23GetQHYCCDParam(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_23GetQHYCCDParam = {"GetQHYCCDParam", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_23GetQHYCCDParam, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_23GetQHYCCDParam(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_controlId = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDParam (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_controlId)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetQHYCCDParam", 1, 2, 2, 1); __PYX_ERR(0, 180, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDParam") < 0)) __PYX_ERR(0, 180, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_controlId = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDParam", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_22GetQHYCCDParam(__pyx_self, __pyx_v_cam, __pyx_v_controlId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_22GetQHYCCDParam(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId) {
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  CONTROL_ID __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDParam", 0);

  /* "QHYCCD/pyqhyccd.pyx":181
 * 
 * def GetQHYCCDParam(cam, controlId):
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)             # <<<<<<<<<<<<<<
 *     if ret != qhy.QHYCCD_ERROR:
 *         return ret
 */
  __pyx_t_1 = ((CONTROL_ID)__Pyx_PyInt_As_CONTROL_ID(__pyx_v_controlId)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L1_error)
  __pyx_v_ret = GetQHYCCDParam(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_1);

  /* "QHYCCD/pyqhyccd.pyx":182
 * def GetQHYCCDParam(cam, controlId):
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)
 *     if ret != qhy.QHYCCD_ERROR:             # <<<<<<<<<<<<<<
 *         return ret
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_ret != QHYCCD_ERROR) != 0);
  if (__pyx_t_2) {

    /* "QHYCCD/pyqhyccd.pyx":183
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)
 *     if ret != qhy.QHYCCD_ERROR:
 *         return ret             # <<<<<<<<<<<<<<
 *     else:
 *         return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "QHYCCD/pyqhyccd.pyx":182
 * def GetQHYCCDParam(cam, controlId):
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)
 *     if ret != qhy.QHYCCD_ERROR:             # <<<<<<<<<<<<<<
 *         return ret
 *     else:
 */
  }

  /* "QHYCCD/pyqhyccd.pyx":185
 *         return ret
 *     else:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * def SetQHYCCDParam(cam, controlId, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "QHYCCD/pyqhyccd.pyx":180
 *         return False
 * 
 * def GetQHYCCDParam(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)
 *     if ret != qhy.QHYCCD_ERROR:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":187
 *         return None
 * 
 * def SetQHYCCDParam(cam, controlId, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_25SetQHYCCDParam(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_25SetQHYCCDParam = {"SetQHYCCDParam", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_25SetQHYCCDParam, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_25SetQHYCCDParam(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_controlId = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetQHYCCDParam (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,&__pyx_n_s_value,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,&__pyx_n_s_value,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_controlId)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDParam", 1, 3, 3, 1); __PYX_ERR(0, 187, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDParam", 1, 3, 3, 2); __PYX_ERR(0, 187, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetQHYCCDParam") < 0)) __PYX_ERR(0, 187, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_cam = values[0];
    __pyx_v_controlId = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetQHYCCDParam", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 187, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_24SetQHYCCDParam(__pyx_self, __pyx_v_cam, __pyx_v_controlId, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_24SetQHYCCDParam(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  CONTROL_ID __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetQHYCCDParam", 0);

  /* "QHYCCD/pyqhyccd.pyx":188
 * 
 * def SetQHYCCDParam(cam, controlId, value):
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDParamMinMaxStep(cam, controlId):
 */
  __pyx_t_1 = ((CONTROL_ID)__Pyx_PyInt_As_CONTROL_ID(__pyx_v_controlId)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(SetQHYCCDParam(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_1, __pyx_t_2)));

  /* "QHYCCD/pyqhyccd.pyx":187
 *         return None
 * 
 * def SetQHYCCDParam(cam, controlId, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":190
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 * def GetQHYCCDParamMinMaxStep(cam, controlId):             # <<<<<<<<<<<<<<
 *     cdef double pmin, pmax, pstep
 *     chkerr(qhy.GetQHYCCDParamMinMaxStep(PyLong_AsVoidPtr(cam), controlId, &pmin, &pmax, &pstep))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_27GetQHYCCDParamMinMaxStep(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_27GetQHYCCDParamMinMaxStep = {"GetQHYCCDParamMinMaxStep", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_27GetQHYCCDParamMinMaxStep, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_27GetQHYCCDParamMinMaxStep(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_controlId = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDParamMinMaxStep (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_controlId,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_controlId)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetQHYCCDParamMinMaxStep", 1, 2, 2, 1); __PYX_ERR(0, 190, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDParamMinMaxStep") < 0)) __PYX_ERR(0, 190, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_controlId = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDParamMinMaxStep", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDParamMinMaxStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_26GetQHYCCDParamMinMaxStep(__pyx_self, __pyx_v_cam, __pyx_v_controlId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_26GetQHYCCDParamMinMaxStep(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_controlId) {
  double __pyx_v_pmin;
  double __pyx_v_pmax;
  double __pyx_v_pstep;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  CONTROL_ID __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDParamMinMaxStep", 0);

  /* "QHYCCD/pyqhyccd.pyx":192
 * def GetQHYCCDParamMinMaxStep(cam, controlId):
 *     cdef double pmin, pmax, pstep
 *     chkerr(qhy.GetQHYCCDParamMinMaxStep(PyLong_AsVoidPtr(cam), controlId, &pmin, &pmax, &pstep))             # <<<<<<<<<<<<<<
 *     return (pmin, pmax, pstep)
 * 
 */
  __pyx_t_1 = ((CONTROL_ID)__Pyx_PyInt_As_CONTROL_ID(__pyx_v_controlId)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDParamMinMaxStep(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_1, (&__pyx_v_pmin), (&__pyx_v_pmax), (&__pyx_v_pstep))));

  /* "QHYCCD/pyqhyccd.pyx":193
 *     cdef double pmin, pmax, pstep
 *     chkerr(qhy.GetQHYCCDParamMinMaxStep(PyLong_AsVoidPtr(cam), controlId, &pmin, &pmax, &pstep))
 *     return (pmin, pmax, pstep)             # <<<<<<<<<<<<<<
 * 
 * def ExpQHYCCDSingleFrame(cam):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pmin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pmax); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_pstep); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":190
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 * def GetQHYCCDParamMinMaxStep(cam, controlId):             # <<<<<<<<<<<<<<
 *     cdef double pmin, pmax, pstep
 *     chkerr(qhy.GetQHYCCDParamMinMaxStep(PyLong_AsVoidPtr(cam), controlId, &pmin, &pmax, &pstep))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDParamMinMaxStep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":195
 *     return (pmin, pmax, pstep)
 * 
 * def ExpQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_29ExpQHYCCDSingleFrame(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_29ExpQHYCCDSingleFrame = {"ExpQHYCCDSingleFrame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_29ExpQHYCCDSingleFrame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_29ExpQHYCCDSingleFrame(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ExpQHYCCDSingleFrame (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ExpQHYCCDSingleFrame") < 0)) __PYX_ERR(0, 195, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ExpQHYCCDSingleFrame", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 195, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.ExpQHYCCDSingleFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_28ExpQHYCCDSingleFrame(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_28ExpQHYCCDSingleFrame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ExpQHYCCDSingleFrame", 0);

  /* "QHYCCD/pyqhyccd.pyx":196
 * 
 * def ExpQHYCCDSingleFrame(cam):
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def CancelQHYCCDExposing(cam):
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(__pyx_v_cam))));

  /* "QHYCCD/pyqhyccd.pyx":195
 *     return (pmin, pmax, pstep)
 * 
 * def ExpQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":198
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposing(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_31CancelQHYCCDExposing(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_31CancelQHYCCDExposing = {"CancelQHYCCDExposing", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_31CancelQHYCCDExposing, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_31CancelQHYCCDExposing(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CancelQHYCCDExposing (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CancelQHYCCDExposing") < 0)) __PYX_ERR(0, 198, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CancelQHYCCDExposing", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.CancelQHYCCDExposing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_30CancelQHYCCDExposing(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_30CancelQHYCCDExposing(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CancelQHYCCDExposing", 0);

  /* "QHYCCD/pyqhyccd.pyx":199
 * 
 * def CancelQHYCCDExposing(cam):
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def CancelQHYCCDExposingAndReadout(cam):
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(CancelQHYCCDExposing(PyLong_AsVoidPtr(__pyx_v_cam))));

  /* "QHYCCD/pyqhyccd.pyx":198
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposing(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":201
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposingAndReadout(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_33CancelQHYCCDExposingAndReadout(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_33CancelQHYCCDExposingAndReadout = {"CancelQHYCCDExposingAndReadout", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_33CancelQHYCCDExposingAndReadout, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_33CancelQHYCCDExposingAndReadout(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CancelQHYCCDExposingAndReadout (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "CancelQHYCCDExposingAndReadout") < 0)) __PYX_ERR(0, 201, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CancelQHYCCDExposingAndReadout", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.CancelQHYCCDExposingAndReadout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_32CancelQHYCCDExposingAndReadout(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_32CancelQHYCCDExposingAndReadout(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CancelQHYCCDExposingAndReadout", 0);

  /* "QHYCCD/pyqhyccd.pyx":202
 * 
 * def CancelQHYCCDExposingAndReadout(cam):
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDSingleFrame(cam):
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(__pyx_v_cam))));

  /* "QHYCCD/pyqhyccd.pyx":201
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposingAndReadout(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":204
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_35GetQHYCCDSingleFrame(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_35GetQHYCCDSingleFrame = {"GetQHYCCDSingleFrame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_35GetQHYCCDSingleFrame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_35GetQHYCCDSingleFrame(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDSingleFrame (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDSingleFrame") < 0)) __PYX_ERR(0, 204, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDSingleFrame", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 204, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDSingleFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_34GetQHYCCDSingleFrame(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_34GetQHYCCDSingleFrame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  uint32_t __pyx_v_w;
  uint32_t __pyx_v_h;
  uint32_t __pyx_v_bpp;
  uint32_t __pyx_v_channels;
  uint8_t *__pyx_v_imgdata;
  uint32_t __pyx_v_memlength;
  npy_intp __pyx_v_shape[2];
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDSingleFrame", 0);

  /* "QHYCCD/pyqhyccd.pyx":208
 *     cdef uint8_t *imgdata
 *     cdef uint32_t memlength
 *     memlength = qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))             # <<<<<<<<<<<<<<
 *     imgdata = <uint8_t *>malloc(memlength * sizeof(uint8_t))
 *     chkerr(qhy.GetQHYCCDSingleFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata))
 */
  __pyx_v_memlength = GetQHYCCDMemLength(PyLong_AsVoidPtr(__pyx_v_cam));

  /* "QHYCCD/pyqhyccd.pyx":209
 *     cdef uint32_t memlength
 *     memlength = qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 *     imgdata = <uint8_t *>malloc(memlength * sizeof(uint8_t))             # <<<<<<<<<<<<<<
 *     chkerr(qhy.GetQHYCCDSingleFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata))
 *     cdef np.npy_intp shape[2]
 */
  __pyx_v_imgdata = ((uint8_t *)malloc((__pyx_v_memlength * (sizeof(uint8_t)))));

  /* "QHYCCD/pyqhyccd.pyx":210
 *     memlength = qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 *     imgdata = <uint8_t *>malloc(memlength * sizeof(uint8_t))
 *     chkerr(qhy.GetQHYCCDSingleFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata))             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp shape[2]
 *     shape[0] = <np.npy_intp> h
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDSingleFrame(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_w), (&__pyx_v_h), (&__pyx_v_bpp), (&__pyx_v_channels), __pyx_v_imgdata)));

  /* "QHYCCD/pyqhyccd.pyx":212
 *     chkerr(qhy.GetQHYCCDSingleFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata))
 *     cdef np.npy_intp shape[2]
 *     shape[0] = <np.npy_intp> h             # <<<<<<<<<<<<<<
 *     shape[1] = <np.npy_intp> w
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 */
  (__pyx_v_shape[0]) = ((npy_intp)__pyx_v_h);

  /* "QHYCCD/pyqhyccd.pyx":213
 *     cdef np.npy_intp shape[2]
 *     shape[0] = <np.npy_intp> h
 *     shape[1] = <np.npy_intp> w             # <<<<<<<<<<<<<<
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)
 */
  (__pyx_v_shape[1]) = ((npy_intp)__pyx_v_w);

  /* "QHYCCD/pyqhyccd.pyx":214
 *     shape[0] = <np.npy_intp> h
 *     shape[1] = <np.npy_intp> w
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)             # <<<<<<<<<<<<<<
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)
 *     return data
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_shape, NPY_UINT16, ((void *)__pyx_v_imgdata)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":215
 *     shape[1] = <np.npy_intp> w
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)             # <<<<<<<<<<<<<<
 *     return data
 * 
 */
  if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 215, __pyx_L1_error)
  PyArray_ENABLEFLAGS(((PyArrayObject *)__pyx_v_data), NPY_ARRAY_OWNDATA);

  /* "QHYCCD/pyqhyccd.pyx":216
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)
 *     return data             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDMemLength(cam):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":204
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDSingleFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":218
 *     return data
 * 
 * def GetQHYCCDMemLength(cam):             # <<<<<<<<<<<<<<
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_37GetQHYCCDMemLength(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_37GetQHYCCDMemLength = {"GetQHYCCDMemLength", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_37GetQHYCCDMemLength, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_37GetQHYCCDMemLength(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDMemLength (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDMemLength") < 0)) __PYX_ERR(0, 218, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDMemLength", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 218, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDMemLength", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_36GetQHYCCDMemLength(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_36GetQHYCCDMemLength(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDMemLength", 0);

  /* "QHYCCD/pyqhyccd.pyx":219
 * 
 * def GetQHYCCDMemLength(cam):
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))             # <<<<<<<<<<<<<<
 * 
 * def SetQHYCCDBinMode(cam, wbin, hbin):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(GetQHYCCDMemLength(PyLong_AsVoidPtr(__pyx_v_cam))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":218
 *     return data
 * 
 * def GetQHYCCDMemLength(cam):             # <<<<<<<<<<<<<<
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDMemLength", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":221
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 * def SetQHYCCDBinMode(cam, wbin, hbin):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_39SetQHYCCDBinMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_39SetQHYCCDBinMode = {"SetQHYCCDBinMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_39SetQHYCCDBinMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_39SetQHYCCDBinMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_wbin = 0;
  PyObject *__pyx_v_hbin = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetQHYCCDBinMode (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_wbin,&__pyx_n_s_hbin,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_wbin,&__pyx_n_s_hbin,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wbin)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDBinMode", 1, 3, 3, 1); __PYX_ERR(0, 221, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hbin)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDBinMode", 1, 3, 3, 2); __PYX_ERR(0, 221, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetQHYCCDBinMode") < 0)) __PYX_ERR(0, 221, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_cam = values[0];
    __pyx_v_wbin = values[1];
    __pyx_v_hbin = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetQHYCCDBinMode", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 221, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDBinMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_38SetQHYCCDBinMode(__pyx_self, __pyx_v_cam, __pyx_v_wbin, __pyx_v_hbin);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_38SetQHYCCDBinMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_wbin, PyObject *__pyx_v_hbin) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetQHYCCDBinMode", 0);

  /* "QHYCCD/pyqhyccd.pyx":222
 * 
 * def SetQHYCCDBinMode(cam, wbin, hbin):
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))             # <<<<<<<<<<<<<<
 * 
 * def SetQHYCCDResolution(cam, x, y, xsize, ysize):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_wbin); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_hbin); if (unlikely((__pyx_t_2 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 222, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(SetQHYCCDBinMode(PyLong_AsVoidPtr(__pyx_v_cam), ((uint32_t)__pyx_t_1), ((uint32_t)__pyx_t_2))));

  /* "QHYCCD/pyqhyccd.pyx":221
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 * def SetQHYCCDBinMode(cam, wbin, hbin):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDBinMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":224
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 * def SetQHYCCDResolution(cam, x, y, xsize, ysize):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_41SetQHYCCDResolution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_41SetQHYCCDResolution = {"SetQHYCCDResolution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_41SetQHYCCDResolution, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_41SetQHYCCDResolution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_xsize = 0;
  PyObject *__pyx_v_ysize = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetQHYCCDResolution (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_xsize,&__pyx_n_s_ysize,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_xsize,&__pyx_n_s_ysize,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDResolution", 1, 5, 5, 1); __PYX_ERR(0, 224, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDResolution", 1, 5, 5, 2); __PYX_ERR(0, 224, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_xsize)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDResolution", 1, 5, 5, 3); __PYX_ERR(0, 224, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ysize)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDResolution", 1, 5, 5, 4); __PYX_ERR(0, 224, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetQHYCCDResolution") < 0)) __PYX_ERR(0, 224, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_cam = values[0];
    __pyx_v_x = values[1];
    __pyx_v_y = values[2];
    __pyx_v_xsize = values[3];
    __pyx_v_ysize = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetQHYCCDResolution", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDResolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_40SetQHYCCDResolution(__pyx_self, __pyx_v_cam, __pyx_v_x, __pyx_v_y, __pyx_v_xsize, __pyx_v_ysize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_40SetQHYCCDResolution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_xsize, PyObject *__pyx_v_ysize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint32_t __pyx_t_2;
  uint32_t __pyx_t_3;
  uint32_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetQHYCCDResolution", 0);

  /* "QHYCCD/pyqhyccd.pyx":225
 * 
 * def SetQHYCCDResolution(cam, x, y, xsize, ysize):
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDExposureRemaining(cam):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_x); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_y); if (unlikely((__pyx_t_2 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_uint32_t(__pyx_v_xsize); if (unlikely((__pyx_t_3 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_v_ysize); if (unlikely((__pyx_t_4 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(SetQHYCCDResolution(PyLong_AsVoidPtr(__pyx_v_cam), ((uint32_t)__pyx_t_1), ((uint32_t)__pyx_t_2), ((uint32_t)__pyx_t_3), ((uint32_t)__pyx_t_4))));

  /* "QHYCCD/pyqhyccd.pyx":224
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 * def SetQHYCCDResolution(cam, x, y, xsize, ysize):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDResolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":227
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 * def GetQHYCCDExposureRemaining(cam):             # <<<<<<<<<<<<<<
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_43GetQHYCCDExposureRemaining(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_43GetQHYCCDExposureRemaining = {"GetQHYCCDExposureRemaining", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_43GetQHYCCDExposureRemaining, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_43GetQHYCCDExposureRemaining(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDExposureRemaining (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDExposureRemaining") < 0)) __PYX_ERR(0, 227, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDExposureRemaining", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 227, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDExposureRemaining", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_42GetQHYCCDExposureRemaining(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_42GetQHYCCDExposureRemaining(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDExposureRemaining", 0);

  /* "QHYCCD/pyqhyccd.pyx":228
 * 
 * def GetQHYCCDExposureRemaining(cam):
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDType(cam):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(__pyx_v_cam))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":227
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 * def GetQHYCCDExposureRemaining(cam):             # <<<<<<<<<<<<<<
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDExposureRemaining", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":230
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDType(cam):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))
 *     if ret != qhy.QHYCCD_ERROR:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_45GetQHYCCDType(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_45GetQHYCCDType = {"GetQHYCCDType", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_45GetQHYCCDType, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_45GetQHYCCDType(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDType (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDType") < 0)) __PYX_ERR(0, 230, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDType", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 230, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_44GetQHYCCDType(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_44GetQHYCCDType(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDType", 0);

  /* "QHYCCD/pyqhyccd.pyx":231
 * 
 * def GetQHYCCDType(cam):
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))             # <<<<<<<<<<<<<<
 *     if ret != qhy.QHYCCD_ERROR:
 *         return ret
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(GetQHYCCDType(PyLong_AsVoidPtr(__pyx_v_cam))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":232
 * def GetQHYCCDType(cam):
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))
 *     if ret != qhy.QHYCCD_ERROR:             # <<<<<<<<<<<<<<
 *         return ret
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(QHYCCD_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ret, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_3)) {

    /* "QHYCCD/pyqhyccd.pyx":233
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))
 *     if ret != qhy.QHYCCD_ERROR:
 *         return ret             # <<<<<<<<<<<<<<
 *     else:
 *         raise OSError(-ret, os.stderror(-ret))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_ret);
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "QHYCCD/pyqhyccd.pyx":232
 * def GetQHYCCDType(cam):
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))
 *     if ret != qhy.QHYCCD_ERROR:             # <<<<<<<<<<<<<<
 *         return ret
 *     else:
 */
  }

  /* "QHYCCD/pyqhyccd.pyx":235
 *         return ret
 *     else:
 *         raise OSError(-ret, os.stderror(-ret))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDSDKVersion():
 */
  /*else*/ {
    __pyx_t_2 = PyNumber_Negative(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_stderror); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Negative(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_OSError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 235, __pyx_L1_error)
  }

  /* "QHYCCD/pyqhyccd.pyx":230
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDType(cam):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))
 *     if ret != qhy.QHYCCD_ERROR:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":237
 *         raise OSError(-ret, os.stderror(-ret))
 * 
 * def GetQHYCCDSDKVersion():             # <<<<<<<<<<<<<<
 *     cdef uint32_t year, month, day, subday
 *     chkerr(qhy.GetQHYCCDSDKVersion(&year, &month, &day, &subday))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_47GetQHYCCDSDKVersion(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_47GetQHYCCDSDKVersion = {"GetQHYCCDSDKVersion", (PyCFunction)__pyx_pw_6QHYCCD_8pyqhyccd_47GetQHYCCDSDKVersion, METH_NOARGS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_47GetQHYCCDSDKVersion(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDSDKVersion (wrapper)", 0);
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_46GetQHYCCDSDKVersion(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_46GetQHYCCDSDKVersion(CYTHON_UNUSED PyObject *__pyx_self) {
  uint32_t __pyx_v_year;
  uint32_t __pyx_v_month;
  uint32_t __pyx_v_day;
  uint32_t __pyx_v_subday;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDSDKVersion", 0);

  /* "QHYCCD/pyqhyccd.pyx":239
 * def GetQHYCCDSDKVersion():
 *     cdef uint32_t year, month, day, subday
 *     chkerr(qhy.GetQHYCCDSDKVersion(&year, &month, &day, &subday))             # <<<<<<<<<<<<<<
 *     return f"QHYCCD SDK {year}-{month}-{day},{subday}"
 * 
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDSDKVersion((&__pyx_v_year), (&__pyx_v_month), (&__pyx_v_day), (&__pyx_v_subday))));

  /* "QHYCCD/pyqhyccd.pyx":240
 *     cdef uint32_t year, month, day, subday
 *     chkerr(qhy.GetQHYCCDSDKVersion(&year, &month, &day, &subday))
 *     return f"QHYCCD SDK {year}-{month}-{day},{subday}"             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDNumberOfReadModes(cam):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_QHYCCD_SDK);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_QHYCCD_SDK);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_QHYCCD_SDK);
  __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_year); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_);
  __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_v_month); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_);
  __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_day); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__2);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__2);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__2);
  __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_v_subday); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 8, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":237
 *         raise OSError(-ret, os.stderror(-ret))
 * 
 * def GetQHYCCDSDKVersion():             # <<<<<<<<<<<<<<
 *     cdef uint32_t year, month, day, subday
 *     chkerr(qhy.GetQHYCCDSDKVersion(&year, &month, &day, &subday))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDSDKVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":242
 *     return f"QHYCCD SDK {year}-{month}-{day},{subday}"
 * 
 * def GetQHYCCDNumberOfReadModes(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t numModes
 *     chkerr(qhy.GetQHYCCDNumberOfReadModes(PyLong_AsVoidPtr(cam), &numModes))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_49GetQHYCCDNumberOfReadModes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_49GetQHYCCDNumberOfReadModes = {"GetQHYCCDNumberOfReadModes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_49GetQHYCCDNumberOfReadModes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_49GetQHYCCDNumberOfReadModes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDNumberOfReadModes (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDNumberOfReadModes") < 0)) __PYX_ERR(0, 242, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDNumberOfReadModes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 242, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDNumberOfReadModes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_48GetQHYCCDNumberOfReadModes(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_48GetQHYCCDNumberOfReadModes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  uint32_t __pyx_v_numModes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDNumberOfReadModes", 0);

  /* "QHYCCD/pyqhyccd.pyx":244
 * def GetQHYCCDNumberOfReadModes(cam):
 *     cdef uint32_t numModes
 *     chkerr(qhy.GetQHYCCDNumberOfReadModes(PyLong_AsVoidPtr(cam), &numModes))             # <<<<<<<<<<<<<<
 *     return numModes
 * 
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDNumberOfReadModes(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_numModes))));

  /* "QHYCCD/pyqhyccd.pyx":245
 *     cdef uint32_t numModes
 *     chkerr(qhy.GetQHYCCDNumberOfReadModes(PyLong_AsVoidPtr(cam), &numModes))
 *     return numModes             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDReadModeResolution(cam, modeNumber):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_numModes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":242
 *     return f"QHYCCD SDK {year}-{month}-{day},{subday}"
 * 
 * def GetQHYCCDNumberOfReadModes(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t numModes
 *     chkerr(qhy.GetQHYCCDNumberOfReadModes(PyLong_AsVoidPtr(cam), &numModes))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDNumberOfReadModes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":247
 *     return numModes
 * 
 * def GetQHYCCDReadModeResolution(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef uint32_t width, height
 *     chkerr(qhy.GetQHYCCDReadModeResolution(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, &width, &height))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_51GetQHYCCDReadModeResolution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_51GetQHYCCDReadModeResolution = {"GetQHYCCDReadModeResolution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_51GetQHYCCDReadModeResolution, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_51GetQHYCCDReadModeResolution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_modeNumber = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDReadModeResolution (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_modeNumber,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_modeNumber,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_modeNumber)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 247, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetQHYCCDReadModeResolution", 1, 2, 2, 1); __PYX_ERR(0, 247, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDReadModeResolution") < 0)) __PYX_ERR(0, 247, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_modeNumber = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDReadModeResolution", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDReadModeResolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_50GetQHYCCDReadModeResolution(__pyx_self, __pyx_v_cam, __pyx_v_modeNumber);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_50GetQHYCCDReadModeResolution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_modeNumber) {
  uint32_t __pyx_v_width;
  uint32_t __pyx_v_height;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDReadModeResolution", 0);

  /* "QHYCCD/pyqhyccd.pyx":249
 * def GetQHYCCDReadModeResolution(cam, modeNumber):
 *     cdef uint32_t width, height
 *     chkerr(qhy.GetQHYCCDReadModeResolution(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, &width, &height))             # <<<<<<<<<<<<<<
 *     return (width, height)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_modeNumber); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDReadModeResolution(PyLong_AsVoidPtr(__pyx_v_cam), ((uint32_t)__pyx_t_1), (&__pyx_v_width), (&__pyx_v_height))));

  /* "QHYCCD/pyqhyccd.pyx":250
 *     cdef uint32_t width, height
 *     chkerr(qhy.GetQHYCCDReadModeResolution(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, &width, &height))
 *     return (width, height)             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDReadModeName(cam, modeNumber):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":247
 *     return numModes
 * 
 * def GetQHYCCDReadModeResolution(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef uint32_t width, height
 *     chkerr(qhy.GetQHYCCDReadModeResolution(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, &width, &height))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDReadModeResolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":252
 *     return (width, height)
 * 
 * def GetQHYCCDReadModeName(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef char name[32]
 *     chkerr(qhy.GetQHYCCDReadModeName(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, name))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_53GetQHYCCDReadModeName(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_53GetQHYCCDReadModeName = {"GetQHYCCDReadModeName", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_53GetQHYCCDReadModeName, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_53GetQHYCCDReadModeName(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_modeNumber = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDReadModeName (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_modeNumber,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_modeNumber,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_modeNumber)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("GetQHYCCDReadModeName", 1, 2, 2, 1); __PYX_ERR(0, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDReadModeName") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_modeNumber = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDReadModeName", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDReadModeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_52GetQHYCCDReadModeName(__pyx_self, __pyx_v_cam, __pyx_v_modeNumber);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_52GetQHYCCDReadModeName(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_modeNumber) {
  char __pyx_v_name[32];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDReadModeName", 0);

  /* "QHYCCD/pyqhyccd.pyx":254
 * def GetQHYCCDReadModeName(cam, modeNumber):
 *     cdef char name[32]
 *     chkerr(qhy.GetQHYCCDReadModeName(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, name))             # <<<<<<<<<<<<<<
 *     return name
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_modeNumber); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDReadModeName(PyLong_AsVoidPtr(__pyx_v_cam), ((uint32_t)__pyx_t_1), __pyx_v_name)));

  /* "QHYCCD/pyqhyccd.pyx":255
 *     cdef char name[32]
 *     chkerr(qhy.GetQHYCCDReadModeName(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, name))
 *     return name             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDReadMode(cam):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":252
 *     return (width, height)
 * 
 * def GetQHYCCDReadModeName(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef char name[32]
 *     chkerr(qhy.GetQHYCCDReadModeName(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, name))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDReadModeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":257
 *     return name
 * 
 * def GetQHYCCDReadMode(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t modeNumber
 *     chkerr(qhy.GetQHYCCDReadMode(PyLong_AsVoidPtr(cam), &modeNumber))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_55GetQHYCCDReadMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_55GetQHYCCDReadMode = {"GetQHYCCDReadMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_55GetQHYCCDReadMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_55GetQHYCCDReadMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDReadMode (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDReadMode") < 0)) __PYX_ERR(0, 257, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDReadMode", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 257, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDReadMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_54GetQHYCCDReadMode(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_54GetQHYCCDReadMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  uint32_t __pyx_v_modeNumber;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDReadMode", 0);

  /* "QHYCCD/pyqhyccd.pyx":259
 * def GetQHYCCDReadMode(cam):
 *     cdef uint32_t modeNumber
 *     chkerr(qhy.GetQHYCCDReadMode(PyLong_AsVoidPtr(cam), &modeNumber))             # <<<<<<<<<<<<<<
 *     return modeNumber
 * 
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDReadMode(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_modeNumber))));

  /* "QHYCCD/pyqhyccd.pyx":260
 *     cdef uint32_t modeNumber
 *     chkerr(qhy.GetQHYCCDReadMode(PyLong_AsVoidPtr(cam), &modeNumber))
 *     return modeNumber             # <<<<<<<<<<<<<<
 * 
 * def SetQHYCCDReadMode(cam, modeNumber):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_modeNumber); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":257
 *     return name
 * 
 * def GetQHYCCDReadMode(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t modeNumber
 *     chkerr(qhy.GetQHYCCDReadMode(PyLong_AsVoidPtr(cam), &modeNumber))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDReadMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":262
 *     return modeNumber
 * 
 * def SetQHYCCDReadMode(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_57SetQHYCCDReadMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_57SetQHYCCDReadMode = {"SetQHYCCDReadMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_57SetQHYCCDReadMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_57SetQHYCCDReadMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_modeNumber = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetQHYCCDReadMode (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_modeNumber,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_modeNumber,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_modeNumber)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDReadMode", 1, 2, 2, 1); __PYX_ERR(0, 262, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetQHYCCDReadMode") < 0)) __PYX_ERR(0, 262, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_modeNumber = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetQHYCCDReadMode", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDReadMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_56SetQHYCCDReadMode(__pyx_self, __pyx_v_cam, __pyx_v_modeNumber);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_56SetQHYCCDReadMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_modeNumber) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetQHYCCDReadMode", 0);

  /* "QHYCCD/pyqhyccd.pyx":263
 * 
 * def SetQHYCCDReadMode(cam, modeNumber):
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDOverScanArea(cam):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_modeNumber); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(SetQHYCCDReadMode(PyLong_AsVoidPtr(__pyx_v_cam), ((uint32_t)__pyx_t_1))));

  /* "QHYCCD/pyqhyccd.pyx":262
 *     return modeNumber
 * 
 * def SetQHYCCDReadMode(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDReadMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":265
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 * def GetQHYCCDOverScanArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDOverScanArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_59GetQHYCCDOverScanArea(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_59GetQHYCCDOverScanArea = {"GetQHYCCDOverScanArea", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_59GetQHYCCDOverScanArea, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_59GetQHYCCDOverScanArea(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDOverScanArea (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDOverScanArea") < 0)) __PYX_ERR(0, 265, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDOverScanArea", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDOverScanArea", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_58GetQHYCCDOverScanArea(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_58GetQHYCCDOverScanArea(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  uint32_t __pyx_v_startX;
  uint32_t __pyx_v_startY;
  uint32_t __pyx_v_sizeX;
  uint32_t __pyx_v_sizeY;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDOverScanArea", 0);

  /* "QHYCCD/pyqhyccd.pyx":267
 * def GetQHYCCDOverScanArea(cam):
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDOverScanArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))             # <<<<<<<<<<<<<<
 *     return (startX, startY, sizeX, sizeY)
 * 
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDOverScanArea(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_startX), (&__pyx_v_startY), (&__pyx_v_sizeX), (&__pyx_v_sizeY))));

  /* "QHYCCD/pyqhyccd.pyx":268
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDOverScanArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 *     return (startX, startY, sizeX, sizeY)             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDEffectiveArea(cam):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_startX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_startY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_sizeX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_sizeY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":265
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 * def GetQHYCCDOverScanArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDOverScanArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDOverScanArea", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":270
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def GetQHYCCDEffectiveArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDEffectiveArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_61GetQHYCCDEffectiveArea(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_61GetQHYCCDEffectiveArea = {"GetQHYCCDEffectiveArea", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_61GetQHYCCDEffectiveArea, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_61GetQHYCCDEffectiveArea(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDEffectiveArea (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDEffectiveArea") < 0)) __PYX_ERR(0, 270, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDEffectiveArea", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 270, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDEffectiveArea", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_60GetQHYCCDEffectiveArea(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_60GetQHYCCDEffectiveArea(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  uint32_t __pyx_v_startX;
  uint32_t __pyx_v_startY;
  uint32_t __pyx_v_sizeX;
  uint32_t __pyx_v_sizeY;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDEffectiveArea", 0);

  /* "QHYCCD/pyqhyccd.pyx":272
 * def GetQHYCCDEffectiveArea(cam):
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDEffectiveArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))             # <<<<<<<<<<<<<<
 *     return (startX, startY, sizeX, sizeY)
 * 
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDEffectiveArea(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_startX), (&__pyx_v_startY), (&__pyx_v_sizeX), (&__pyx_v_sizeY))));

  /* "QHYCCD/pyqhyccd.pyx":273
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDEffectiveArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 *     return (startX, startY, sizeX, sizeY)             # <<<<<<<<<<<<<<
 * 
 * def SetQHYCCDBinMode(cam, binw, binh):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_startX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_startY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_sizeX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_sizeY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":270
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def GetQHYCCDEffectiveArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDEffectiveArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDEffectiveArea", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":275
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def SetQHYCCDBinMode(cam, binw, binh):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_63SetQHYCCDBinMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_63SetQHYCCDBinMode = {"SetQHYCCDBinMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_63SetQHYCCDBinMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_63SetQHYCCDBinMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_binw = 0;
  PyObject *__pyx_v_binh = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetQHYCCDBinMode (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_binw,&__pyx_n_s_binh,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_binw,&__pyx_n_s_binh,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_binw)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDBinMode", 1, 3, 3, 1); __PYX_ERR(0, 275, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_binh)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDBinMode", 1, 3, 3, 2); __PYX_ERR(0, 275, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetQHYCCDBinMode") < 0)) __PYX_ERR(0, 275, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_cam = values[0];
    __pyx_v_binw = values[1];
    __pyx_v_binh = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetQHYCCDBinMode", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 275, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDBinMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_62SetQHYCCDBinMode(__pyx_self, __pyx_v_cam, __pyx_v_binw, __pyx_v_binh);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_62SetQHYCCDBinMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_binw, PyObject *__pyx_v_binh) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetQHYCCDBinMode", 0);

  /* "QHYCCD/pyqhyccd.pyx":276
 * 
 * def SetQHYCCDBinMode(cam, binw, binh):
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))             # <<<<<<<<<<<<<<
 * 
 * def BeginQHYCCDLive(cam):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_binw); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_binh); if (unlikely((__pyx_t_2 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(SetQHYCCDBinMode(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_1, __pyx_t_2)));

  /* "QHYCCD/pyqhyccd.pyx":275
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def SetQHYCCDBinMode(cam, binw, binh):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDBinMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":278
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 * def BeginQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_65BeginQHYCCDLive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_65BeginQHYCCDLive = {"BeginQHYCCDLive", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_65BeginQHYCCDLive, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_65BeginQHYCCDLive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("BeginQHYCCDLive (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "BeginQHYCCDLive") < 0)) __PYX_ERR(0, 278, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("BeginQHYCCDLive", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 278, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.BeginQHYCCDLive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_64BeginQHYCCDLive(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_64BeginQHYCCDLive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("BeginQHYCCDLive", 0);

  /* "QHYCCD/pyqhyccd.pyx":279
 * 
 * def BeginQHYCCDLive(cam):
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def StopQHYCCDLive(cam):
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(BeginQHYCCDLive(PyLong_AsVoidPtr(__pyx_v_cam))));

  /* "QHYCCD/pyqhyccd.pyx":278
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 * def BeginQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":281
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def StopQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_67StopQHYCCDLive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_67StopQHYCCDLive = {"StopQHYCCDLive", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_67StopQHYCCDLive, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_67StopQHYCCDLive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("StopQHYCCDLive (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "StopQHYCCDLive") < 0)) __PYX_ERR(0, 281, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("StopQHYCCDLive", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.StopQHYCCDLive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_66StopQHYCCDLive(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_66StopQHYCCDLive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("StopQHYCCDLive", 0);

  /* "QHYCCD/pyqhyccd.pyx":282
 * 
 * def StopQHYCCDLive(cam):
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDLiveFrame(cam):
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(StopQHYCCDLive(PyLong_AsVoidPtr(__pyx_v_cam))));

  /* "QHYCCD/pyqhyccd.pyx":281
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def StopQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":284
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDLiveFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_69GetQHYCCDLiveFrame(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_69GetQHYCCDLiveFrame = {"GetQHYCCDLiveFrame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_69GetQHYCCDLiveFrame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_69GetQHYCCDLiveFrame(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDLiveFrame (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDLiveFrame") < 0)) __PYX_ERR(0, 284, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDLiveFrame", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 284, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDLiveFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_68GetQHYCCDLiveFrame(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_68GetQHYCCDLiveFrame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  uint32_t __pyx_v_w;
  uint32_t __pyx_v_h;
  uint32_t __pyx_v_bpp;
  uint32_t __pyx_v_channels;
  uint8_t *__pyx_v_imgdata;
  uint32_t __pyx_v_memlength;
  uint32_t __pyx_v_ret;
  npy_intp __pyx_v_shape[2];
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDLiveFrame", 0);

  /* "QHYCCD/pyqhyccd.pyx":288
 *     cdef uint8_t *imgdata
 *     cdef uint32_t memlength
 *     memlength = qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))             # <<<<<<<<<<<<<<
 *     imgdata = <uint8_t *>malloc(memlength * sizeof(uint8_t))
 *     ret = qhy.QHYCCD_ERROR
 */
  __pyx_v_memlength = GetQHYCCDMemLength(PyLong_AsVoidPtr(__pyx_v_cam));

  /* "QHYCCD/pyqhyccd.pyx":289
 *     cdef uint32_t memlength
 *     memlength = qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 *     imgdata = <uint8_t *>malloc(memlength * sizeof(uint8_t))             # <<<<<<<<<<<<<<
 *     ret = qhy.QHYCCD_ERROR
 *     while(ret == qhy.QHYCCD_ERROR):
 */
  __pyx_v_imgdata = ((uint8_t *)malloc((__pyx_v_memlength * (sizeof(uint8_t)))));

  /* "QHYCCD/pyqhyccd.pyx":290
 *     memlength = qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 *     imgdata = <uint8_t *>malloc(memlength * sizeof(uint8_t))
 *     ret = qhy.QHYCCD_ERROR             # <<<<<<<<<<<<<<
 *     while(ret == qhy.QHYCCD_ERROR):
 *         ret = qhy.GetQHYCCDLiveFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata)
 */
  __pyx_v_ret = QHYCCD_ERROR;

  /* "QHYCCD/pyqhyccd.pyx":291
 *     imgdata = <uint8_t *>malloc(memlength * sizeof(uint8_t))
 *     ret = qhy.QHYCCD_ERROR
 *     while(ret == qhy.QHYCCD_ERROR):             # <<<<<<<<<<<<<<
 *         ret = qhy.GetQHYCCDLiveFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata)
 *     cdef np.npy_intp shape[2]
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_ret == QHYCCD_ERROR) != 0);
    if (!__pyx_t_1) break;

    /* "QHYCCD/pyqhyccd.pyx":292
 *     ret = qhy.QHYCCD_ERROR
 *     while(ret == qhy.QHYCCD_ERROR):
 *         ret = qhy.GetQHYCCDLiveFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata)             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp shape[2]
 *     shape[0] = <np.npy_intp> h
 */
    __pyx_v_ret = GetQHYCCDLiveFrame(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_w), (&__pyx_v_h), (&__pyx_v_bpp), (&__pyx_v_channels), __pyx_v_imgdata);
  }

  /* "QHYCCD/pyqhyccd.pyx":294
 *         ret = qhy.GetQHYCCDLiveFrame(PyLong_AsVoidPtr(cam), &w, &h, &bpp, &channels, imgdata)
 *     cdef np.npy_intp shape[2]
 *     shape[0] = <np.npy_intp> h             # <<<<<<<<<<<<<<
 *     shape[1] = <np.npy_intp> w
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 */
  (__pyx_v_shape[0]) = ((npy_intp)__pyx_v_h);

  /* "QHYCCD/pyqhyccd.pyx":295
 *     cdef np.npy_intp shape[2]
 *     shape[0] = <np.npy_intp> h
 *     shape[1] = <np.npy_intp> w             # <<<<<<<<<<<<<<
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)
 */
  (__pyx_v_shape[1]) = ((npy_intp)__pyx_v_w);

  /* "QHYCCD/pyqhyccd.pyx":296
 *     shape[0] = <np.npy_intp> h
 *     shape[1] = <np.npy_intp> w
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)             # <<<<<<<<<<<<<<
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)
 *     return data
 */
  __pyx_t_2 = PyArray_SimpleNewFromData(2, __pyx_v_shape, NPY_UINT16, ((void *)__pyx_v_imgdata)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_data = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "QHYCCD/pyqhyccd.pyx":297
 *     shape[1] = <np.npy_intp> w
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)             # <<<<<<<<<<<<<<
 *     return data
 * 
 */
  if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 297, __pyx_L1_error)
  PyArray_ENABLEFLAGS(((PyArrayObject *)__pyx_v_data), NPY_ARRAY_OWNDATA);

  /* "QHYCCD/pyqhyccd.pyx":298
 *     data = np.PyArray_SimpleNewFromData(2, shape, np.NPY_UINT16, <void *>imgdata)
 *     np.PyArray_ENABLEFLAGS(data, np.NPY_ARRAY_OWNDATA)
 *     return data             # <<<<<<<<<<<<<<
 * 
 * def GetQHYCCDPreciseExposureInfo(cam):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":284
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDLiveFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDLiveFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":300
 *     return data
 * 
 * def GetQHYCCDPreciseExposureInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime
 *     cdef uint8_t isLongExposureMode
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_71GetQHYCCDPreciseExposureInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_71GetQHYCCDPreciseExposureInfo = {"GetQHYCCDPreciseExposureInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_71GetQHYCCDPreciseExposureInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_71GetQHYCCDPreciseExposureInfo(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetQHYCCDPreciseExposureInfo (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 300, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetQHYCCDPreciseExposureInfo") < 0)) __PYX_ERR(0, 300, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetQHYCCDPreciseExposureInfo", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 300, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDPreciseExposureInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_70GetQHYCCDPreciseExposureInfo(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_70GetQHYCCDPreciseExposureInfo(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  uint32_t __pyx_v_PixelPeriod_ps;
  uint32_t __pyx_v_LinePeriod_ns;
  uint32_t __pyx_v_FramePeriod_us;
  uint32_t __pyx_v_ClocksPerLine;
  uint32_t __pyx_v_LinesPerFrame;
  uint32_t __pyx_v_ActualExposureTime;
  uint8_t __pyx_v_isLongExposureMode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetQHYCCDPreciseExposureInfo", 0);

  /* "QHYCCD/pyqhyccd.pyx":303
 *     cdef uint32_t PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime
 *     cdef uint8_t isLongExposureMode
 *     chkerr(qhy.GetQHYCCDPreciseExposureInfo(PyLong_AsVoidPtr(cam),             # <<<<<<<<<<<<<<
 *                                             &PixelPeriod_ps,
 *                                             &LinePeriod_ns,
 */
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(GetQHYCCDPreciseExposureInfo(PyLong_AsVoidPtr(__pyx_v_cam), (&__pyx_v_PixelPeriod_ps), (&__pyx_v_LinePeriod_ns), (&__pyx_v_FramePeriod_us), (&__pyx_v_ClocksPerLine), (&__pyx_v_LinesPerFrame), (&__pyx_v_ActualExposureTime), (&__pyx_v_isLongExposureMode))));

  /* "QHYCCD/pyqhyccd.pyx":311
 *                                             &ActualExposureTime,
 *                                             &isLongExposureMode))
 *     return (PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime, isLongExposureMode)             # <<<<<<<<<<<<<<
 * 
 * def SetQHYCCDBitsMode(cam, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_PixelPeriod_ps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_LinePeriod_ns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_FramePeriod_us); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_ClocksPerLine); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_v_LinesPerFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_uint32_t(__pyx_v_ActualExposureTime); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_uint8_t(__pyx_v_isLongExposureMode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":300
 *     return data
 * 
 * def GetQHYCCDPreciseExposureInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime
 *     cdef uint8_t isLongExposureMode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetQHYCCDPreciseExposureInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":313
 *     return (PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime, isLongExposureMode)
 * 
 * def SetQHYCCDBitsMode(cam, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_73SetQHYCCDBitsMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_73SetQHYCCDBitsMode = {"SetQHYCCDBitsMode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_73SetQHYCCDBitsMode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_73SetQHYCCDBitsMode(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  PyObject *__pyx_v_value = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetQHYCCDBitsMode (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_value,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,&__pyx_n_s_value,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("SetQHYCCDBitsMode", 1, 2, 2, 1); __PYX_ERR(0, 313, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "SetQHYCCDBitsMode") < 0)) __PYX_ERR(0, 313, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_cam = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetQHYCCDBitsMode", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDBitsMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_72SetQHYCCDBitsMode(__pyx_self, __pyx_v_cam, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_72SetQHYCCDBitsMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetQHYCCDBitsMode", 0);

  /* "QHYCCD/pyqhyccd.pyx":314
 * 
 * def SetQHYCCDBitsMode(cam, value):
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))             # <<<<<<<<<<<<<<
 * 
 * def GetBinModes(cam):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  (void)(__pyx_f_6QHYCCD_8pyqhyccd_chkerr(SetQHYCCDBitsMode(PyLong_AsVoidPtr(__pyx_v_cam), ((uint32_t)__pyx_t_1))));

  /* "QHYCCD/pyqhyccd.pyx":313
 *     return (PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime, isLongExposureMode)
 * 
 * def SetQHYCCDBitsMode(cam, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.SetQHYCCDBitsMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "QHYCCD/pyqhyccd.pyx":316
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 * def GetBinModes(cam):             # <<<<<<<<<<<<<<
 *     modes = [1]
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_75GetBinModes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6QHYCCD_8pyqhyccd_75GetBinModes = {"GetBinModes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6QHYCCD_8pyqhyccd_75GetBinModes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6QHYCCD_8pyqhyccd_75GetBinModes(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cam = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetBinModes (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cam,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cam)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "GetBinModes") < 0)) __PYX_ERR(0, 316, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cam = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetBinModes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 316, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetBinModes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6QHYCCD_8pyqhyccd_74GetBinModes(__pyx_self, __pyx_v_cam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6QHYCCD_8pyqhyccd_74GetBinModes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cam) {
  PyObject *__pyx_v_modes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  CONTROL_ID __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetBinModes", 0);

  /* "QHYCCD/pyqhyccd.pyx":317
 * 
 * def GetBinModes(cam):
 *     modes = [1]             # <<<<<<<<<<<<<<
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(2)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
  __pyx_v_modes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":318
 * def GetBinModes(cam):
 *     modes = [1]
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         modes.append(2)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CONTROL_ID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_CAM_BIN2X2MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((CONTROL_ID)__Pyx_PyInt_As_CONTROL_ID(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((IsQHYCCDControlAvailable(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_3) == QHYCCD_SUCCESS) != 0);
  if (__pyx_t_4) {

    /* "QHYCCD/pyqhyccd.pyx":319
 *     modes = [1]
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(2)             # <<<<<<<<<<<<<<
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(3)
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_modes, __pyx_int_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 319, __pyx_L1_error)

    /* "QHYCCD/pyqhyccd.pyx":318
 * def GetBinModes(cam):
 *     modes = [1]
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         modes.append(2)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:
 */
  }

  /* "QHYCCD/pyqhyccd.pyx":320
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(2)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         modes.append(3)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN4X4MODE) == qhy.QHYCCD_SUCCESS:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CONTROL_ID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_CAM_BIN3X3MODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = ((CONTROL_ID)__Pyx_PyInt_As_CONTROL_ID(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((IsQHYCCDControlAvailable(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_3) == QHYCCD_SUCCESS) != 0);
  if (__pyx_t_4) {

    /* "QHYCCD/pyqhyccd.pyx":321
 *         modes.append(2)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(3)             # <<<<<<<<<<<<<<
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN4X4MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(4)
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_modes, __pyx_int_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 321, __pyx_L1_error)

    /* "QHYCCD/pyqhyccd.pyx":320
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(2)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         modes.append(3)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN4X4MODE) == qhy.QHYCCD_SUCCESS:
 */
  }

  /* "QHYCCD/pyqhyccd.pyx":322
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(3)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN4X4MODE) == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         modes.append(4)
 *     return modes
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CONTROL_ID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_CAM_BIN4X4MODE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((CONTROL_ID)__Pyx_PyInt_As_CONTROL_ID(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((IsQHYCCDControlAvailable(PyLong_AsVoidPtr(__pyx_v_cam), __pyx_t_3) == QHYCCD_SUCCESS) != 0);
  if (__pyx_t_4) {

    /* "QHYCCD/pyqhyccd.pyx":323
 *         modes.append(3)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN4X4MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(4)             # <<<<<<<<<<<<<<
 *     return modes
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_modes, __pyx_int_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 323, __pyx_L1_error)

    /* "QHYCCD/pyqhyccd.pyx":322
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN3X3MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(3)
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN4X4MODE) == qhy.QHYCCD_SUCCESS:             # <<<<<<<<<<<<<<
 *         modes.append(4)
 *     return modes
 */
  }

  /* "QHYCCD/pyqhyccd.pyx":324
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN4X4MODE) == qhy.QHYCCD_SUCCESS:
 *         modes.append(4)
 *     return modes             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_modes);
  __pyx_r = __pyx_v_modes;
  goto __pyx_L0;

  /* "QHYCCD/pyqhyccd.pyx":316
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 * def GetBinModes(cam):             # <<<<<<<<<<<<<<
 *     modes = [1]
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("QHYCCD.pyqhyccd.GetBinModes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_modes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":264
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":264
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":303
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":789
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":789
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":792
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":793
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":792
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":795
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":796
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":795
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":808
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":810
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 819, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 819, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 819, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":820
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_3))) __PYX_ERR(1, 820, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":821
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 821, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 821, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 821, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 823, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 824, __pyx_L1_error)

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 828, __pyx_L1_error)

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 848, __pyx_L1_error)

        /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 854, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 854, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 856, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 857, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 857, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 858, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 859, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 861, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":862
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 862, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 862, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":863
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":864
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":865
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 865, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 865, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":866
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":867
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 867, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 867, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":869
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 869, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":870
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":874
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(1, 874, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":810
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1031
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1032
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 1044, __pyx_L3_error)

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1045
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1045, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1046, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1046, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 1050, __pyx_L3_error)

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1051
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1051, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1052
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1052, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1052, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1054
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1055
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1056
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 1056, __pyx_L3_error)

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1055
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1057
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 1057, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1058
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1058, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 1058, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1055
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1054
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1061
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1071
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1061
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1074
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1084
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1074
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1087
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1093
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1087
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1096
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1100
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1096
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1103
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1107
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1103
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_COMPILING_IN_LIMITED_API
  {0, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {0, __pyx_k_ActualExposureTime, sizeof(__pyx_k_ActualExposureTime), 0, 0, 1, 1},
  {0, __pyx_k_BeginQHYCCDLive, sizeof(__pyx_k_BeginQHYCCDLive), 0, 0, 1, 1},
  {0, __pyx_k_CAM_16BITS, sizeof(__pyx_k_CAM_16BITS), 0, 0, 1, 1},
  {0, __pyx_k_CAM_8BITS, sizeof(__pyx_k_CAM_8BITS), 0, 0, 1, 1},
  {0, __pyx_k_CAM_BIN1X1MODE, sizeof(__pyx_k_CAM_BIN1X1MODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_BIN2X2MODE, sizeof(__pyx_k_CAM_BIN2X2MODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_BIN3X3MODE, sizeof(__pyx_k_CAM_BIN3X3MODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_BIN4X4MODE, sizeof(__pyx_k_CAM_BIN4X4MODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_CALIBRATEFPN_INTERFACE, sizeof(__pyx_k_CAM_CALIBRATEFPN_INTERFACE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_CHIPTEMPERATURESENSOR_INTERF, sizeof(__pyx_k_CAM_CHIPTEMPERATURESENSOR_INTERF), 0, 0, 1, 1},
  {0, __pyx_k_CAM_COLOR, sizeof(__pyx_k_CAM_COLOR), 0, 0, 1, 1},
  {0, __pyx_k_CAM_FINETONE_INTERFACE, sizeof(__pyx_k_CAM_FINETONE_INTERFACE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_GPS, sizeof(__pyx_k_CAM_GPS), 0, 0, 1, 1},
  {0, __pyx_k_CAM_HUMIDITY, sizeof(__pyx_k_CAM_HUMIDITY), 0, 0, 1, 1},
  {0, __pyx_k_CAM_IGNOREOVERSCAN_INTERFACE, sizeof(__pyx_k_CAM_IGNOREOVERSCAN_INTERFACE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_IS_COLOR, sizeof(__pyx_k_CAM_IS_COLOR), 0, 0, 1, 1},
  {0, __pyx_k_CAM_LIGHT_PERFORMANCE_MODE, sizeof(__pyx_k_CAM_LIGHT_PERFORMANCE_MODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_LIVEVIDEOMODE, sizeof(__pyx_k_CAM_LIVEVIDEOMODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_MECHANICALSHUTTER, sizeof(__pyx_k_CAM_MECHANICALSHUTTER), 0, 0, 1, 1},
  {0, __pyx_k_CAM_PRESSURE, sizeof(__pyx_k_CAM_PRESSURE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_QHY5II_GUIDE_MODE, sizeof(__pyx_k_CAM_QHY5II_GUIDE_MODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_SHUTTERMOTORHEATING_INTERFAC, sizeof(__pyx_k_CAM_SHUTTERMOTORHEATING_INTERFAC), 0, 0, 1, 1},
  {0, __pyx_k_CAM_SINGLEFRAMEMODE, sizeof(__pyx_k_CAM_SINGLEFRAMEMODE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_SINGNALCLAMP_INTERFACE, sizeof(__pyx_k_CAM_SINGNALCLAMP_INTERFACE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_TECOVERPROTECT_INTERFACE, sizeof(__pyx_k_CAM_TECOVERPROTECT_INTERFACE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_TRIGER_INTERFACE, sizeof(__pyx_k_CAM_TRIGER_INTERFACE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_USBREADOUTSLOWEST_INTERFACE, sizeof(__pyx_k_CAM_USBREADOUTSLOWEST_INTERFACE), 0, 0, 1, 1},
  {0, __pyx_k_CAM_VIEW_MODE, sizeof(__pyx_k_CAM_VIEW_MODE), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_AMPV, sizeof(__pyx_k_CONTROL_AMPV), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_BRIGHTNESS, sizeof(__pyx_k_CONTROL_BRIGHTNESS), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_CFWPORT, sizeof(__pyx_k_CONTROL_CFWPORT), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_CFWSLOTSNUM, sizeof(__pyx_k_CONTROL_CFWSLOTSNUM), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_CHANNELS, sizeof(__pyx_k_CONTROL_CHANNELS), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_CONTRAST, sizeof(__pyx_k_CONTROL_CONTRAST), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_COOLER, sizeof(__pyx_k_CONTROL_COOLER), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_CURPWM, sizeof(__pyx_k_CONTROL_CURPWM), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_CURTEMP, sizeof(__pyx_k_CONTROL_CURTEMP), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_DDR, sizeof(__pyx_k_CONTROL_DDR), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_EXPOSURE, sizeof(__pyx_k_CONTROL_EXPOSURE), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_GAIN, sizeof(__pyx_k_CONTROL_GAIN), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_GAMMA, sizeof(__pyx_k_CONTROL_GAMMA), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_ID, sizeof(__pyx_k_CONTROL_ID), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_MANULPWM, sizeof(__pyx_k_CONTROL_MANULPWM), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_MAX_ID, sizeof(__pyx_k_CONTROL_MAX_ID), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_MAX_ID_Error, sizeof(__pyx_k_CONTROL_MAX_ID_Error), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_OFFSET, sizeof(__pyx_k_CONTROL_OFFSET), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_ROWNOISERE, sizeof(__pyx_k_CONTROL_ROWNOISERE), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_SPEED, sizeof(__pyx_k_CONTROL_SPEED), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_ST4PORT, sizeof(__pyx_k_CONTROL_ST4PORT), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_SensorChamberCycle_PUMP, sizeof(__pyx_k_CONTROL_SensorChamberCycle_PUMP), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_TRANSFERBIT, sizeof(__pyx_k_CONTROL_TRANSFERBIT), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_USBTRAFFIC, sizeof(__pyx_k_CONTROL_USBTRAFFIC), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_VACUUM_PUMP, sizeof(__pyx_k_CONTROL_VACUUM_PUMP), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_VCAM, sizeof(__pyx_k_CONTROL_VCAM), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_WBB, sizeof(__pyx_k_CONTROL_WBB), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_WBG, sizeof(__pyx_k_CONTROL_WBG), 0, 0, 1, 1},
  {0, __pyx_k_CONTROL_WBR, sizeof(__pyx_k_CONTROL_WBR), 0, 0, 1, 1},
  {0, __pyx_k_CancelQHYCCDExposing, sizeof(__pyx_k_CancelQHYCCDExposing), 0, 0, 1, 1},
  {0, __pyx_k_CancelQHYCCDExposingAndReadout, sizeof(__pyx_k_CancelQHYCCDExposingAndReadout), 0, 0, 1, 1},
  {0, __pyx_k_ClocksPerLine, sizeof(__pyx_k_ClocksPerLine), 0, 0, 1, 1},
  {0, __pyx_k_CloseQHYCCD, sizeof(__pyx_k_CloseQHYCCD), 0, 0, 1, 1},
  {0, __pyx_k_DDR_BUFFER_CAPACITY, sizeof(__pyx_k_DDR_BUFFER_CAPACITY), 0, 0, 1, 1},
  {0, __pyx_k_DDR_BUFFER_READ_THRESHOLD, sizeof(__pyx_k_DDR_BUFFER_READ_THRESHOLD), 0, 0, 1, 1},
  {0, __pyx_k_DefaultGain, sizeof(__pyx_k_DefaultGain), 0, 0, 1, 1},
  {0, __pyx_k_DefaultOffset, sizeof(__pyx_k_DefaultOffset), 0, 0, 1, 1},
  {0, __pyx_k_ExpQHYCCDSingleFrame, sizeof(__pyx_k_ExpQHYCCDSingleFrame), 0, 0, 1, 1},
  {0, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {0, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {0, __pyx_k_FramePeriod_us, sizeof(__pyx_k_FramePeriod_us), 0, 0, 1, 1},
  {0, __pyx_k_GetBinModes, sizeof(__pyx_k_GetBinModes), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDChipInfo, sizeof(__pyx_k_GetQHYCCDChipInfo), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDEffectiveArea, sizeof(__pyx_k_GetQHYCCDEffectiveArea), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDExposureRemaining, sizeof(__pyx_k_GetQHYCCDExposureRemaining), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDId, sizeof(__pyx_k_GetQHYCCDId), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDLiveFrame, sizeof(__pyx_k_GetQHYCCDLiveFrame), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDMemLength, sizeof(__pyx_k_GetQHYCCDMemLength), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDModel, sizeof(__pyx_k_GetQHYCCDModel), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDNumberOfReadModes, sizeof(__pyx_k_GetQHYCCDNumberOfReadModes), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDOverScanArea, sizeof(__pyx_k_GetQHYCCDOverScanArea), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDParam, sizeof(__pyx_k_GetQHYCCDParam), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDParamMinMaxStep, sizeof(__pyx_k_GetQHYCCDParamMinMaxStep), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDPreciseExposureInfo, sizeof(__pyx_k_GetQHYCCDPreciseExposureInfo), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDReadMode, sizeof(__pyx_k_GetQHYCCDReadMode), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDReadModeName, sizeof(__pyx_k_GetQHYCCDReadModeName), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDReadModeResolution, sizeof(__pyx_k_GetQHYCCDReadModeResolution), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDSDKVersion, sizeof(__pyx_k_GetQHYCCDSDKVersion), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDSingleFrame, sizeof(__pyx_k_GetQHYCCDSingleFrame), 0, 0, 1, 1},
  {0, __pyx_k_GetQHYCCDType, sizeof(__pyx_k_GetQHYCCDType), 0, 0, 1, 1},
  {0, __pyx_k_IS_EXPOSING_DONE, sizeof(__pyx_k_IS_EXPOSING_DONE), 0, 0, 1, 1},
  {0, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {0, __pyx_k_InitQHYCCD, sizeof(__pyx_k_InitQHYCCD), 0, 0, 1, 1},
  {0, __pyx_k_InitQHYCCDResource, sizeof(__pyx_k_InitQHYCCDResource), 0, 0, 1, 1},
  {0, __pyx_k_IsQHYCCDControlAvailable, sizeof(__pyx_k_IsQHYCCDControlAvailable), 0, 0, 1, 1},
  {0, __pyx_k_LinePeriod_ns, sizeof(__pyx_k_LinePeriod_ns), 0, 0, 1, 1},
  {0, __pyx_k_LinesPerFrame, sizeof(__pyx_k_LinesPerFrame), 0, 0, 1, 1},
  {0, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {0, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
  {0, __pyx_k_OpenQHYCCD, sizeof(__pyx_k_OpenQHYCCD), 0, 0, 1, 1},
  {0, __pyx_k_OutputDataActualBits, sizeof(__pyx_k_OutputDataActualBits), 0, 0, 1, 1},
  {0, __pyx_k_OutputDataAlignment, sizeof(__pyx_k_OutputDataAlignment), 0, 0, 1, 1},
  {0, __pyx_k_PixelPeriod_ps, sizeof(__pyx_k_PixelPeriod_ps), 0, 0, 1, 1},
  {0, __pyx_k_QHYCCD_3A_AUTOBALANCE, sizeof(__pyx_k_QHYCCD_3A_AUTOBALANCE), 0, 0, 1, 1},
  {0, __pyx_k_QHYCCD_3A_AUTOEXPOSURE, sizeof(__pyx_k_QHYCCD_3A_AUTOEXPOSURE), 0, 0, 1, 1},
  {0, __pyx_k_QHYCCD_3A_AUTOFOCUS, sizeof(__pyx_k_QHYCCD_3A_AUTOFOCUS), 0, 0, 1, 1},
  {0, __pyx_k_QHYCCD_SDK, sizeof(__pyx_k_QHYCCD_SDK), 0, 1, 0, 0},
  {0, __pyx_k_QHYCCD_pyqhyccd, sizeof(__pyx_k_QHYCCD_pyqhyccd), 0, 0, 1, 1},
  {0, __pyx_k_QHYCCD_pyqhyccd_pyx, sizeof(__pyx_k_QHYCCD_pyqhyccd_pyx), 0, 0, 1, 0},
  {0, __pyx_k_ReleaseQHYCCDResource, sizeof(__pyx_k_ReleaseQHYCCDResource), 0, 0, 1, 1},
  {0, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {0, __pyx_k_ScanQHYCCD, sizeof(__pyx_k_ScanQHYCCD), 0, 0, 1, 1},
  {0, __pyx_k_ScreenStretchB, sizeof(__pyx_k_ScreenStretchB), 0, 0, 1, 1},
  {0, __pyx_k_ScreenStretchW, sizeof(__pyx_k_ScreenStretchW), 0, 0, 1, 1},
  {0, __pyx_k_SetQHYCCDBinMode, sizeof(__pyx_k_SetQHYCCDBinMode), 0, 0, 1, 1},
  {0, __pyx_k_SetQHYCCDBitsMode, sizeof(__pyx_k_SetQHYCCDBitsMode), 0, 0, 1, 1},
  {0, __pyx_k_SetQHYCCDParam, sizeof(__pyx_k_SetQHYCCDParam), 0, 0, 1, 1},
  {0, __pyx_k_SetQHYCCDReadMode, sizeof(__pyx_k_SetQHYCCDReadMode), 0, 0, 1, 1},
  {0, __pyx_k_SetQHYCCDResolution, sizeof(__pyx_k_SetQHYCCDResolution), 0, 0, 1, 1},
  {0, __pyx_k_SetQHYCCDStreamMode, sizeof(__pyx_k_SetQHYCCDStreamMode), 0, 0, 1, 1},
  {0, __pyx_k_StopQHYCCDLive, sizeof(__pyx_k_StopQHYCCDLive), 0, 0, 1, 1},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {0, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 1},
  {0, __pyx_k__82, sizeof(__pyx_k__82), 0, 0, 1, 1},
  {0, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {0, __pyx_k_binh, sizeof(__pyx_k_binh), 0, 0, 1, 1},
  {0, __pyx_k_binw, sizeof(__pyx_k_binw), 0, 0, 1, 1},
  {0, __pyx_k_bpp, sizeof(__pyx_k_bpp), 0, 0, 1, 1},
  {0, __pyx_k_cam, sizeof(__pyx_k_cam), 0, 0, 1, 1},
  {0, __pyx_k_camid, sizeof(__pyx_k_camid), 0, 0, 1, 1},
  {0, __pyx_k_cammodel, sizeof(__pyx_k_cammodel), 0, 0, 1, 1},
  {0, __pyx_k_channels, sizeof(__pyx_k_channels), 0, 0, 1, 1},
  {0, __pyx_k_chiph, sizeof(__pyx_k_chiph), 0, 0, 1, 1},
  {0, __pyx_k_chipw, sizeof(__pyx_k_chipw), 0, 0, 1, 1},
  {0, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_controlId, sizeof(__pyx_k_controlId), 0, 0, 1, 1},
  {0, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {0, __pyx_k_day, sizeof(__pyx_k_day), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {0, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 0},
  {0, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {0, __pyx_k_hasHardwareFrameCounter, sizeof(__pyx_k_hasHardwareFrameCounter), 0, 0, 1, 1},
  {0, __pyx_k_hbin, sizeof(__pyx_k_hbin), 0, 0, 1, 1},
  {0, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {0, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {0, __pyx_k_imageh, sizeof(__pyx_k_imageh), 0, 0, 1, 1},
  {0, __pyx_k_imagew, sizeof(__pyx_k_imagew), 0, 0, 1, 1},
  {0, __pyx_k_imgdata, sizeof(__pyx_k_imgdata), 0, 0, 1, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_isLongExposureMode, sizeof(__pyx_k_isLongExposureMode), 0, 0, 1, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_memlength, sizeof(__pyx_k_memlength), 0, 0, 1, 1},
  {0, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {0, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {0, __pyx_k_modeNumber, sizeof(__pyx_k_modeNumber), 0, 0, 1, 1},
  {0, __pyx_k_modes, sizeof(__pyx_k_modes), 0, 0, 1, 1},
  {0, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {0, __pyx_k_month, sizeof(__pyx_k_month), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {0, __pyx_k_numModes, sizeof(__pyx_k_numModes), 0, 0, 1, 1},
  {0, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {0, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {0, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {0, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {0, __pyx_k_pixelh, sizeof(__pyx_k_pixelh), 0, 0, 1, 1},
  {0, __pyx_k_pixelw, sizeof(__pyx_k_pixelw), 0, 0, 1, 1},
  {0, __pyx_k_pmax, sizeof(__pyx_k_pmax), 0, 0, 1, 1},
  {0, __pyx_k_pmin, sizeof(__pyx_k_pmin), 0, 0, 1, 1},
  {0, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {0, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {0, __pyx_k_pstep, sizeof(__pyx_k_pstep), 0, 0, 1, 1},
  {0, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {0, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {0, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
  {0, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {0, __pyx_k_sizeX, sizeof(__pyx_k_sizeX), 0, 0, 1, 1},
  {0, __pyx_k_sizeY, sizeof(__pyx_k_sizeY), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_startX, sizeof(__pyx_k_startX), 0, 0, 1, 1},
  {0, __pyx_k_startY, sizeof(__pyx_k_startY), 0, 0, 1, 1},
  {0, __pyx_k_stderror, sizeof(__pyx_k_stderror), 0, 0, 1, 1},
  {0, __pyx_k_strerror, sizeof(__pyx_k_strerror), 0, 0, 1, 1},
  {0, __pyx_k_subday, sizeof(__pyx_k_subday), 0, 0, 1, 1},
  {0, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {0, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {0, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {0, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {0, __pyx_k_wbin, sizeof(__pyx_k_wbin), 0, 0, 1, 1},
  {0, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {0, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {0, __pyx_k_xsize, sizeof(__pyx_k_xsize), 0, 0, 1, 1},
  {0, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, __pyx_k_year, sizeof(__pyx_k_year), 0, 0, 1, 1},
  {0, __pyx_k_ysize, sizeof(__pyx_k_ysize), 0, 0, 1, 1},
  #else
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_n_s_ActualExposureTime, __pyx_k_ActualExposureTime, sizeof(__pyx_k_ActualExposureTime), 0, 0, 1, 1},
  {&__pyx_n_s_BeginQHYCCDLive, __pyx_k_BeginQHYCCDLive, sizeof(__pyx_k_BeginQHYCCDLive), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_16BITS, __pyx_k_CAM_16BITS, sizeof(__pyx_k_CAM_16BITS), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_8BITS, __pyx_k_CAM_8BITS, sizeof(__pyx_k_CAM_8BITS), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_BIN1X1MODE, __pyx_k_CAM_BIN1X1MODE, sizeof(__pyx_k_CAM_BIN1X1MODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_BIN2X2MODE, __pyx_k_CAM_BIN2X2MODE, sizeof(__pyx_k_CAM_BIN2X2MODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_BIN3X3MODE, __pyx_k_CAM_BIN3X3MODE, sizeof(__pyx_k_CAM_BIN3X3MODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_BIN4X4MODE, __pyx_k_CAM_BIN4X4MODE, sizeof(__pyx_k_CAM_BIN4X4MODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_CALIBRATEFPN_INTERFACE, __pyx_k_CAM_CALIBRATEFPN_INTERFACE, sizeof(__pyx_k_CAM_CALIBRATEFPN_INTERFACE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF, __pyx_k_CAM_CHIPTEMPERATURESENSOR_INTERF, sizeof(__pyx_k_CAM_CHIPTEMPERATURESENSOR_INTERF), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_COLOR, __pyx_k_CAM_COLOR, sizeof(__pyx_k_CAM_COLOR), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_FINETONE_INTERFACE, __pyx_k_CAM_FINETONE_INTERFACE, sizeof(__pyx_k_CAM_FINETONE_INTERFACE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_GPS, __pyx_k_CAM_GPS, sizeof(__pyx_k_CAM_GPS), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_HUMIDITY, __pyx_k_CAM_HUMIDITY, sizeof(__pyx_k_CAM_HUMIDITY), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE, __pyx_k_CAM_IGNOREOVERSCAN_INTERFACE, sizeof(__pyx_k_CAM_IGNOREOVERSCAN_INTERFACE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_IS_COLOR, __pyx_k_CAM_IS_COLOR, sizeof(__pyx_k_CAM_IS_COLOR), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE, __pyx_k_CAM_LIGHT_PERFORMANCE_MODE, sizeof(__pyx_k_CAM_LIGHT_PERFORMANCE_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_LIVEVIDEOMODE, __pyx_k_CAM_LIVEVIDEOMODE, sizeof(__pyx_k_CAM_LIVEVIDEOMODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_MECHANICALSHUTTER, __pyx_k_CAM_MECHANICALSHUTTER, sizeof(__pyx_k_CAM_MECHANICALSHUTTER), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_PRESSURE, __pyx_k_CAM_PRESSURE, sizeof(__pyx_k_CAM_PRESSURE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_QHY5II_GUIDE_MODE, __pyx_k_CAM_QHY5II_GUIDE_MODE, sizeof(__pyx_k_CAM_QHY5II_GUIDE_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC, __pyx_k_CAM_SHUTTERMOTORHEATING_INTERFAC, sizeof(__pyx_k_CAM_SHUTTERMOTORHEATING_INTERFAC), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_SINGLEFRAMEMODE, __pyx_k_CAM_SINGLEFRAMEMODE, sizeof(__pyx_k_CAM_SINGLEFRAMEMODE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_SINGNALCLAMP_INTERFACE, __pyx_k_CAM_SINGNALCLAMP_INTERFACE, sizeof(__pyx_k_CAM_SINGNALCLAMP_INTERFACE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_TECOVERPROTECT_INTERFACE, __pyx_k_CAM_TECOVERPROTECT_INTERFACE, sizeof(__pyx_k_CAM_TECOVERPROTECT_INTERFACE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_TRIGER_INTERFACE, __pyx_k_CAM_TRIGER_INTERFACE, sizeof(__pyx_k_CAM_TRIGER_INTERFACE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE, __pyx_k_CAM_USBREADOUTSLOWEST_INTERFACE, sizeof(__pyx_k_CAM_USBREADOUTSLOWEST_INTERFACE), 0, 0, 1, 1},
  {&__pyx_n_s_CAM_VIEW_MODE, __pyx_k_CAM_VIEW_MODE, sizeof(__pyx_k_CAM_VIEW_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_AMPV, __pyx_k_CONTROL_AMPV, sizeof(__pyx_k_CONTROL_AMPV), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_BRIGHTNESS, __pyx_k_CONTROL_BRIGHTNESS, sizeof(__pyx_k_CONTROL_BRIGHTNESS), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_CFWPORT, __pyx_k_CONTROL_CFWPORT, sizeof(__pyx_k_CONTROL_CFWPORT), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_CFWSLOTSNUM, __pyx_k_CONTROL_CFWSLOTSNUM, sizeof(__pyx_k_CONTROL_CFWSLOTSNUM), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_CHANNELS, __pyx_k_CONTROL_CHANNELS, sizeof(__pyx_k_CONTROL_CHANNELS), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_CONTRAST, __pyx_k_CONTROL_CONTRAST, sizeof(__pyx_k_CONTROL_CONTRAST), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_COOLER, __pyx_k_CONTROL_COOLER, sizeof(__pyx_k_CONTROL_COOLER), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_CURPWM, __pyx_k_CONTROL_CURPWM, sizeof(__pyx_k_CONTROL_CURPWM), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_CURTEMP, __pyx_k_CONTROL_CURTEMP, sizeof(__pyx_k_CONTROL_CURTEMP), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_DDR, __pyx_k_CONTROL_DDR, sizeof(__pyx_k_CONTROL_DDR), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_EXPOSURE, __pyx_k_CONTROL_EXPOSURE, sizeof(__pyx_k_CONTROL_EXPOSURE), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_GAIN, __pyx_k_CONTROL_GAIN, sizeof(__pyx_k_CONTROL_GAIN), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_GAMMA, __pyx_k_CONTROL_GAMMA, sizeof(__pyx_k_CONTROL_GAMMA), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_ID, __pyx_k_CONTROL_ID, sizeof(__pyx_k_CONTROL_ID), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_MANULPWM, __pyx_k_CONTROL_MANULPWM, sizeof(__pyx_k_CONTROL_MANULPWM), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_MAX_ID, __pyx_k_CONTROL_MAX_ID, sizeof(__pyx_k_CONTROL_MAX_ID), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_MAX_ID_Error, __pyx_k_CONTROL_MAX_ID_Error, sizeof(__pyx_k_CONTROL_MAX_ID_Error), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_OFFSET, __pyx_k_CONTROL_OFFSET, sizeof(__pyx_k_CONTROL_OFFSET), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_ROWNOISERE, __pyx_k_CONTROL_ROWNOISERE, sizeof(__pyx_k_CONTROL_ROWNOISERE), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_SPEED, __pyx_k_CONTROL_SPEED, sizeof(__pyx_k_CONTROL_SPEED), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_ST4PORT, __pyx_k_CONTROL_ST4PORT, sizeof(__pyx_k_CONTROL_ST4PORT), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_SensorChamberCycle_PUMP, __pyx_k_CONTROL_SensorChamberCycle_PUMP, sizeof(__pyx_k_CONTROL_SensorChamberCycle_PUMP), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_TRANSFERBIT, __pyx_k_CONTROL_TRANSFERBIT, sizeof(__pyx_k_CONTROL_TRANSFERBIT), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_USBTRAFFIC, __pyx_k_CONTROL_USBTRAFFIC, sizeof(__pyx_k_CONTROL_USBTRAFFIC), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_VACUUM_PUMP, __pyx_k_CONTROL_VACUUM_PUMP, sizeof(__pyx_k_CONTROL_VACUUM_PUMP), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_VCAM, __pyx_k_CONTROL_VCAM, sizeof(__pyx_k_CONTROL_VCAM), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_WBB, __pyx_k_CONTROL_WBB, sizeof(__pyx_k_CONTROL_WBB), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_WBG, __pyx_k_CONTROL_WBG, sizeof(__pyx_k_CONTROL_WBG), 0, 0, 1, 1},
  {&__pyx_n_s_CONTROL_WBR, __pyx_k_CONTROL_WBR, sizeof(__pyx_k_CONTROL_WBR), 0, 0, 1, 1},
  {&__pyx_n_s_CancelQHYCCDExposing, __pyx_k_CancelQHYCCDExposing, sizeof(__pyx_k_CancelQHYCCDExposing), 0, 0, 1, 1},
  {&__pyx_n_s_CancelQHYCCDExposingAndReadout, __pyx_k_CancelQHYCCDExposingAndReadout, sizeof(__pyx_k_CancelQHYCCDExposingAndReadout), 0, 0, 1, 1},
  {&__pyx_n_s_ClocksPerLine, __pyx_k_ClocksPerLine, sizeof(__pyx_k_ClocksPerLine), 0, 0, 1, 1},
  {&__pyx_n_s_CloseQHYCCD, __pyx_k_CloseQHYCCD, sizeof(__pyx_k_CloseQHYCCD), 0, 0, 1, 1},
  {&__pyx_n_s_DDR_BUFFER_CAPACITY, __pyx_k_DDR_BUFFER_CAPACITY, sizeof(__pyx_k_DDR_BUFFER_CAPACITY), 0, 0, 1, 1},
  {&__pyx_n_s_DDR_BUFFER_READ_THRESHOLD, __pyx_k_DDR_BUFFER_READ_THRESHOLD, sizeof(__pyx_k_DDR_BUFFER_READ_THRESHOLD), 0, 0, 1, 1},
  {&__pyx_n_s_DefaultGain, __pyx_k_DefaultGain, sizeof(__pyx_k_DefaultGain), 0, 0, 1, 1},
  {&__pyx_n_s_DefaultOffset, __pyx_k_DefaultOffset, sizeof(__pyx_k_DefaultOffset), 0, 0, 1, 1},
  {&__pyx_n_s_ExpQHYCCDSingleFrame, __pyx_k_ExpQHYCCDSingleFrame, sizeof(__pyx_k_ExpQHYCCDSingleFrame), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_FramePeriod_us, __pyx_k_FramePeriod_us, sizeof(__pyx_k_FramePeriod_us), 0, 0, 1, 1},
  {&__pyx_n_s_GetBinModes, __pyx_k_GetBinModes, sizeof(__pyx_k_GetBinModes), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDChipInfo, __pyx_k_GetQHYCCDChipInfo, sizeof(__pyx_k_GetQHYCCDChipInfo), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDEffectiveArea, __pyx_k_GetQHYCCDEffectiveArea, sizeof(__pyx_k_GetQHYCCDEffectiveArea), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDExposureRemaining, __pyx_k_GetQHYCCDExposureRemaining, sizeof(__pyx_k_GetQHYCCDExposureRemaining), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDId, __pyx_k_GetQHYCCDId, sizeof(__pyx_k_GetQHYCCDId), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDLiveFrame, __pyx_k_GetQHYCCDLiveFrame, sizeof(__pyx_k_GetQHYCCDLiveFrame), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDMemLength, __pyx_k_GetQHYCCDMemLength, sizeof(__pyx_k_GetQHYCCDMemLength), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDModel, __pyx_k_GetQHYCCDModel, sizeof(__pyx_k_GetQHYCCDModel), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDNumberOfReadModes, __pyx_k_GetQHYCCDNumberOfReadModes, sizeof(__pyx_k_GetQHYCCDNumberOfReadModes), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDOverScanArea, __pyx_k_GetQHYCCDOverScanArea, sizeof(__pyx_k_GetQHYCCDOverScanArea), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDParam, __pyx_k_GetQHYCCDParam, sizeof(__pyx_k_GetQHYCCDParam), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDParamMinMaxStep, __pyx_k_GetQHYCCDParamMinMaxStep, sizeof(__pyx_k_GetQHYCCDParamMinMaxStep), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDPreciseExposureInfo, __pyx_k_GetQHYCCDPreciseExposureInfo, sizeof(__pyx_k_GetQHYCCDPreciseExposureInfo), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDReadMode, __pyx_k_GetQHYCCDReadMode, sizeof(__pyx_k_GetQHYCCDReadMode), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDReadModeName, __pyx_k_GetQHYCCDReadModeName, sizeof(__pyx_k_GetQHYCCDReadModeName), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDReadModeResolution, __pyx_k_GetQHYCCDReadModeResolution, sizeof(__pyx_k_GetQHYCCDReadModeResolution), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDSDKVersion, __pyx_k_GetQHYCCDSDKVersion, sizeof(__pyx_k_GetQHYCCDSDKVersion), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDSingleFrame, __pyx_k_GetQHYCCDSingleFrame, sizeof(__pyx_k_GetQHYCCDSingleFrame), 0, 0, 1, 1},
  {&__pyx_n_s_GetQHYCCDType, __pyx_k_GetQHYCCDType, sizeof(__pyx_k_GetQHYCCDType), 0, 0, 1, 1},
  {&__pyx_n_s_IS_EXPOSING_DONE, __pyx_k_IS_EXPOSING_DONE, sizeof(__pyx_k_IS_EXPOSING_DONE), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_InitQHYCCD, __pyx_k_InitQHYCCD, sizeof(__pyx_k_InitQHYCCD), 0, 0, 1, 1},
  {&__pyx_n_s_InitQHYCCDResource, __pyx_k_InitQHYCCDResource, sizeof(__pyx_k_InitQHYCCDResource), 0, 0, 1, 1},
  {&__pyx_n_s_IsQHYCCDControlAvailable, __pyx_k_IsQHYCCDControlAvailable, sizeof(__pyx_k_IsQHYCCDControlAvailable), 0, 0, 1, 1},
  {&__pyx_n_s_LinePeriod_ns, __pyx_k_LinePeriod_ns, sizeof(__pyx_k_LinePeriod_ns), 0, 0, 1, 1},
  {&__pyx_n_s_LinesPerFrame, __pyx_k_LinesPerFrame, sizeof(__pyx_k_LinesPerFrame), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
  {&__pyx_n_s_OpenQHYCCD, __pyx_k_OpenQHYCCD, sizeof(__pyx_k_OpenQHYCCD), 0, 0, 1, 1},
  {&__pyx_n_s_OutputDataActualBits, __pyx_k_OutputDataActualBits, sizeof(__pyx_k_OutputDataActualBits), 0, 0, 1, 1},
  {&__pyx_n_s_OutputDataAlignment, __pyx_k_OutputDataAlignment, sizeof(__pyx_k_OutputDataAlignment), 0, 0, 1, 1},
  {&__pyx_n_s_PixelPeriod_ps, __pyx_k_PixelPeriod_ps, sizeof(__pyx_k_PixelPeriod_ps), 0, 0, 1, 1},
  {&__pyx_n_s_QHYCCD_3A_AUTOBALANCE, __pyx_k_QHYCCD_3A_AUTOBALANCE, sizeof(__pyx_k_QHYCCD_3A_AUTOBALANCE), 0, 0, 1, 1},
  {&__pyx_n_s_QHYCCD_3A_AUTOEXPOSURE, __pyx_k_QHYCCD_3A_AUTOEXPOSURE, sizeof(__pyx_k_QHYCCD_3A_AUTOEXPOSURE), 0, 0, 1, 1},
  {&__pyx_n_s_QHYCCD_3A_AUTOFOCUS, __pyx_k_QHYCCD_3A_AUTOFOCUS, sizeof(__pyx_k_QHYCCD_3A_AUTOFOCUS), 0, 0, 1, 1},
  {&__pyx_kp_u_QHYCCD_SDK, __pyx_k_QHYCCD_SDK, sizeof(__pyx_k_QHYCCD_SDK), 0, 1, 0, 0},
  {&__pyx_n_s_QHYCCD_pyqhyccd, __pyx_k_QHYCCD_pyqhyccd, sizeof(__pyx_k_QHYCCD_pyqhyccd), 0, 0, 1, 1},
  {&__pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_k_QHYCCD_pyqhyccd_pyx, sizeof(__pyx_k_QHYCCD_pyqhyccd_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_ReleaseQHYCCDResource, __pyx_k_ReleaseQHYCCDResource, sizeof(__pyx_k_ReleaseQHYCCDResource), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_ScanQHYCCD, __pyx_k_ScanQHYCCD, sizeof(__pyx_k_ScanQHYCCD), 0, 0, 1, 1},
  {&__pyx_n_s_ScreenStretchB, __pyx_k_ScreenStretchB, sizeof(__pyx_k_ScreenStretchB), 0, 0, 1, 1},
  {&__pyx_n_s_ScreenStretchW, __pyx_k_ScreenStretchW, sizeof(__pyx_k_ScreenStretchW), 0, 0, 1, 1},
  {&__pyx_n_s_SetQHYCCDBinMode, __pyx_k_SetQHYCCDBinMode, sizeof(__pyx_k_SetQHYCCDBinMode), 0, 0, 1, 1},
  {&__pyx_n_s_SetQHYCCDBitsMode, __pyx_k_SetQHYCCDBitsMode, sizeof(__pyx_k_SetQHYCCDBitsMode), 0, 0, 1, 1},
  {&__pyx_n_s_SetQHYCCDParam, __pyx_k_SetQHYCCDParam, sizeof(__pyx_k_SetQHYCCDParam), 0, 0, 1, 1},
  {&__pyx_n_s_SetQHYCCDReadMode, __pyx_k_SetQHYCCDReadMode, sizeof(__pyx_k_SetQHYCCDReadMode), 0, 0, 1, 1},
  {&__pyx_n_s_SetQHYCCDResolution, __pyx_k_SetQHYCCDResolution, sizeof(__pyx_k_SetQHYCCDResolution), 0, 0, 1, 1},
  {&__pyx_n_s_SetQHYCCDStreamMode, __pyx_k_SetQHYCCDStreamMode, sizeof(__pyx_k_SetQHYCCDStreamMode), 0, 0, 1, 1},
  {&__pyx_n_s_StopQHYCCDLive, __pyx_k_StopQHYCCDLive, sizeof(__pyx_k_StopQHYCCDLive), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_n_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 1},
  {&__pyx_n_s__82, __pyx_k__82, sizeof(__pyx_k__82), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_binh, __pyx_k_binh, sizeof(__pyx_k_binh), 0, 0, 1, 1},
  {&__pyx_n_s_binw, __pyx_k_binw, sizeof(__pyx_k_binw), 0, 0, 1, 1},
  {&__pyx_n_s_bpp, __pyx_k_bpp, sizeof(__pyx_k_bpp), 0, 0, 1, 1},
  {&__pyx_n_s_cam, __pyx_k_cam, sizeof(__pyx_k_cam), 0, 0, 1, 1},
  {&__pyx_n_s_camid, __pyx_k_camid, sizeof(__pyx_k_camid), 0, 0, 1, 1},
  {&__pyx_n_s_cammodel, __pyx_k_cammodel, sizeof(__pyx_k_cammodel), 0, 0, 1, 1},
  {&__pyx_n_s_channels, __pyx_k_channels, sizeof(__pyx_k_channels), 0, 0, 1, 1},
  {&__pyx_n_s_chiph, __pyx_k_chiph, sizeof(__pyx_k_chiph), 0, 0, 1, 1},
  {&__pyx_n_s_chipw, __pyx_k_chipw, sizeof(__pyx_k_chipw), 0, 0, 1, 1},
  {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_controlId, __pyx_k_controlId, sizeof(__pyx_k_controlId), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_day, __pyx_k_day, sizeof(__pyx_k_day), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_kp_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 0},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_hasHardwareFrameCounter, __pyx_k_hasHardwareFrameCounter, sizeof(__pyx_k_hasHardwareFrameCounter), 0, 0, 1, 1},
  {&__pyx_n_s_hbin, __pyx_k_hbin, sizeof(__pyx_k_hbin), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_imageh, __pyx_k_imageh, sizeof(__pyx_k_imageh), 0, 0, 1, 1},
  {&__pyx_n_s_imagew, __pyx_k_imagew, sizeof(__pyx_k_imagew), 0, 0, 1, 1},
  {&__pyx_n_s_imgdata, __pyx_k_imgdata, sizeof(__pyx_k_imgdata), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_isLongExposureMode, __pyx_k_isLongExposureMode, sizeof(__pyx_k_isLongExposureMode), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_memlength, __pyx_k_memlength, sizeof(__pyx_k_memlength), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_modeNumber, __pyx_k_modeNumber, sizeof(__pyx_k_modeNumber), 0, 0, 1, 1},
  {&__pyx_n_s_modes, __pyx_k_modes, sizeof(__pyx_k_modes), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_month, __pyx_k_month, sizeof(__pyx_k_month), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numModes, __pyx_k_numModes, sizeof(__pyx_k_numModes), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_pixelh, __pyx_k_pixelh, sizeof(__pyx_k_pixelh), 0, 0, 1, 1},
  {&__pyx_n_s_pixelw, __pyx_k_pixelw, sizeof(__pyx_k_pixelw), 0, 0, 1, 1},
  {&__pyx_n_s_pmax, __pyx_k_pmax, sizeof(__pyx_k_pmax), 0, 0, 1, 1},
  {&__pyx_n_s_pmin, __pyx_k_pmin, sizeof(__pyx_k_pmin), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pstep, __pyx_k_pstep, sizeof(__pyx_k_pstep), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sizeX, __pyx_k_sizeX, sizeof(__pyx_k_sizeX), 0, 0, 1, 1},
  {&__pyx_n_s_sizeY, __pyx_k_sizeY, sizeof(__pyx_k_sizeY), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_startX, __pyx_k_startX, sizeof(__pyx_k_startX), 0, 0, 1, 1},
  {&__pyx_n_s_startY, __pyx_k_startY, sizeof(__pyx_k_startY), 0, 0, 1, 1},
  {&__pyx_n_s_stderror, __pyx_k_stderror, sizeof(__pyx_k_stderror), 0, 0, 1, 1},
  {&__pyx_n_s_strerror, __pyx_k_strerror, sizeof(__pyx_k_strerror), 0, 0, 1, 1},
  {&__pyx_n_s_subday, __pyx_k_subday, sizeof(__pyx_k_subday), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_wbin, __pyx_k_wbin, sizeof(__pyx_k_wbin), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xsize, __pyx_k_xsize, sizeof(__pyx_k_xsize), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_year, __pyx_k_year, sizeof(__pyx_k_year), 0, 0, 1, 1},
  {&__pyx_n_s_ysize, __pyx_k_ysize, sizeof(__pyx_k_ysize), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 133, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 824, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 828, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 1046, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1052
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "QHYCCD/pyqhyccd.pyx":136
 * 
 * 
 * def InitQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 */
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_InitQHYCCDResource, 136, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 136, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":139
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 * def ReleaseQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 */
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_ReleaseQHYCCDResource, 139, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 139, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":142
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 * def ScanQHYCCD():             # <<<<<<<<<<<<<<
 *     return(qhy.ScanQHYCCD())
 * 
 */
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_ScanQHYCCD, 142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 142, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":145
 *     return(qhy.ScanQHYCCD())
 * 
 * def GetQHYCCDId(i):             # <<<<<<<<<<<<<<
 *     cdef char camid[256]
 *     chkerr(qhy.GetQHYCCDId(i, camid))
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_n_s_i, __pyx_n_s_camid); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDId, 145, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 145, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":150
 *     return camid
 * 
 * def OpenQHYCCD(camid):             # <<<<<<<<<<<<<<
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_camid); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_OpenQHYCCD, 150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 150, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":153
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 * def SetQHYCCDStreamMode(cam, mode):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_s_cam, __pyx_n_s_mode); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_SetQHYCCDStreamMode, 153, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 153, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":156
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 * def InitQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_InitQHYCCD, 156, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 156, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":159
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def CloseQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_CloseQHYCCD, 159, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 159, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":162
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDChipInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef double chipw, chiph, pixelw, pixelh
 *     cdef uint32_t imagew, imageh, bpp
 */
  __pyx_tuple__22 = PyTuple_Pack(8, __pyx_n_s_cam, __pyx_n_s_chipw, __pyx_n_s_chiph, __pyx_n_s_pixelw, __pyx_n_s_pixelh, __pyx_n_s_imagew, __pyx_n_s_imageh, __pyx_n_s_bpp); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDChipInfo, 162, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 162, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":168
 *     return (chipw, chiph, imagew, imageh, pixelw, pixelh, bpp)
 * 
 * def GetQHYCCDModel(camid):             # <<<<<<<<<<<<<<
 *     cdef char cammodel[256]
 *     chkerr(qhy.GetQHYCCDModel(camid, cammodel))
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_camid, __pyx_n_s_cammodel); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDModel, 168, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 168, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":173
 *     return cammodel
 * 
 * def IsQHYCCDControlAvailable(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)
 *     if ret == qhy.QHYCCD_SUCCESS:
 */
  __pyx_tuple__26 = PyTuple_Pack(3, __pyx_n_s_cam, __pyx_n_s_controlId, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_IsQHYCCDControlAvailable, 173, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 173, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":180
 *         return False
 * 
 * def GetQHYCCDParam(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)
 *     if ret != qhy.QHYCCD_ERROR:
 */
  __pyx_tuple__28 = PyTuple_Pack(3, __pyx_n_s_cam, __pyx_n_s_controlId, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDParam, 180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 180, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":187
 *         return None
 * 
 * def SetQHYCCDParam(cam, controlId, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(3, __pyx_n_s_cam, __pyx_n_s_controlId, __pyx_n_s_value); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_SetQHYCCDParam, 187, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 187, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":190
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 * def GetQHYCCDParamMinMaxStep(cam, controlId):             # <<<<<<<<<<<<<<
 *     cdef double pmin, pmax, pstep
 *     chkerr(qhy.GetQHYCCDParamMinMaxStep(PyLong_AsVoidPtr(cam), controlId, &pmin, &pmax, &pstep))
 */
  __pyx_tuple__32 = PyTuple_Pack(5, __pyx_n_s_cam, __pyx_n_s_controlId, __pyx_n_s_pmin, __pyx_n_s_pmax, __pyx_n_s_pstep); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDParamMinMaxStep, 190, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 190, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":195
 *     return (pmin, pmax, pstep)
 * 
 * def ExpQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_ExpQHYCCDSingleFrame, 195, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 195, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":198
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposing(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_CancelQHYCCDExposing, 198, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 198, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":201
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposingAndReadout(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_CancelQHYCCDExposingAndReadout, 201, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 201, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":204
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */
  __pyx_tuple__40 = PyTuple_Pack(9, __pyx_n_s_cam, __pyx_n_s_w, __pyx_n_s_h, __pyx_n_s_bpp, __pyx_n_s_channels, __pyx_n_s_imgdata, __pyx_n_s_memlength, __pyx_n_s_shape, __pyx_n_s_data); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDSingleFrame, 204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 204, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":218
 *     return data
 * 
 * def GetQHYCCDMemLength(cam):             # <<<<<<<<<<<<<<
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDMemLength, 218, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 218, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":221
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 * def SetQHYCCDBinMode(cam, wbin, hbin):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(3, __pyx_n_s_cam, __pyx_n_s_wbin, __pyx_n_s_hbin); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_SetQHYCCDBinMode, 221, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 221, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":224
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 * def SetQHYCCDResolution(cam, x, y, xsize, ysize):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(5, __pyx_n_s_cam, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_xsize, __pyx_n_s_ysize); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_SetQHYCCDResolution, 224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":227
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 * def GetQHYCCDExposureRemaining(cam):             # <<<<<<<<<<<<<<
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDExposureRemaining, 227, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 227, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":230
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDType(cam):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))
 *     if ret != qhy.QHYCCD_ERROR:
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_cam, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDType, 230, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 230, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":237
 *         raise OSError(-ret, os.stderror(-ret))
 * 
 * def GetQHYCCDSDKVersion():             # <<<<<<<<<<<<<<
 *     cdef uint32_t year, month, day, subday
 *     chkerr(qhy.GetQHYCCDSDKVersion(&year, &month, &day, &subday))
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_n_s_year, __pyx_n_s_month, __pyx_n_s_day, __pyx_n_s_subday); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDSDKVersion, 237, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 237, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":242
 *     return f"QHYCCD SDK {year}-{month}-{day},{subday}"
 * 
 * def GetQHYCCDNumberOfReadModes(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t numModes
 *     chkerr(qhy.GetQHYCCDNumberOfReadModes(PyLong_AsVoidPtr(cam), &numModes))
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_cam, __pyx_n_s_numModes); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDNumberOfReadModes, 242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 242, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":247
 *     return numModes
 * 
 * def GetQHYCCDReadModeResolution(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef uint32_t width, height
 *     chkerr(qhy.GetQHYCCDReadModeResolution(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, &width, &height))
 */
  __pyx_tuple__56 = PyTuple_Pack(4, __pyx_n_s_cam, __pyx_n_s_modeNumber, __pyx_n_s_width, __pyx_n_s_height); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDReadModeResolution, 247, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 247, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":252
 *     return (width, height)
 * 
 * def GetQHYCCDReadModeName(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef char name[32]
 *     chkerr(qhy.GetQHYCCDReadModeName(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, name))
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_n_s_cam, __pyx_n_s_modeNumber, __pyx_n_s_name_2); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDReadModeName, 252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 252, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":257
 *     return name
 * 
 * def GetQHYCCDReadMode(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t modeNumber
 *     chkerr(qhy.GetQHYCCDReadMode(PyLong_AsVoidPtr(cam), &modeNumber))
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_n_s_cam, __pyx_n_s_modeNumber); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDReadMode, 257, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 257, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":262
 *     return modeNumber
 * 
 * def SetQHYCCDReadMode(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_s_cam, __pyx_n_s_modeNumber); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_SetQHYCCDReadMode, 262, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 262, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":265
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 * def GetQHYCCDOverScanArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDOverScanArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */
  __pyx_tuple__64 = PyTuple_Pack(5, __pyx_n_s_cam, __pyx_n_s_startX, __pyx_n_s_startY, __pyx_n_s_sizeX, __pyx_n_s_sizeY); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDOverScanArea, 265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 265, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":270
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def GetQHYCCDEffectiveArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDEffectiveArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */
  __pyx_tuple__66 = PyTuple_Pack(5, __pyx_n_s_cam, __pyx_n_s_startX, __pyx_n_s_startY, __pyx_n_s_sizeX, __pyx_n_s_sizeY); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDEffectiveArea, 270, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 270, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":275
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def SetQHYCCDBinMode(cam, binw, binh):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(3, __pyx_n_s_cam, __pyx_n_s_binw, __pyx_n_s_binh); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_SetQHYCCDBinMode, 275, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 275, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":278
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 * def BeginQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_BeginQHYCCDLive, 278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 278, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":281
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def StopQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_cam); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_StopQHYCCDLive, 281, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 281, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":284
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDLiveFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */
  __pyx_tuple__74 = PyTuple_Pack(10, __pyx_n_s_cam, __pyx_n_s_w, __pyx_n_s_h, __pyx_n_s_bpp, __pyx_n_s_channels, __pyx_n_s_imgdata, __pyx_n_s_memlength, __pyx_n_s_ret, __pyx_n_s_shape, __pyx_n_s_data); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDLiveFrame, 284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 284, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":300
 *     return data
 * 
 * def GetQHYCCDPreciseExposureInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime
 *     cdef uint8_t isLongExposureMode
 */
  __pyx_tuple__76 = PyTuple_Pack(8, __pyx_n_s_cam, __pyx_n_s_PixelPeriod_ps, __pyx_n_s_LinePeriod_ns, __pyx_n_s_FramePeriod_us, __pyx_n_s_ClocksPerLine, __pyx_n_s_LinesPerFrame, __pyx_n_s_ActualExposureTime, __pyx_n_s_isLongExposureMode); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetQHYCCDPreciseExposureInfo, 300, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 300, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":313
 *     return (PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime, isLongExposureMode)
 * 
 * def SetQHYCCDBitsMode(cam, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(2, __pyx_n_s_cam, __pyx_n_s_value); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_SetQHYCCDBitsMode, 313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 313, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":316
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 * def GetBinModes(cam):             # <<<<<<<<<<<<<<
 *     modes = [1]
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 */
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_n_s_cam, __pyx_n_s_modes); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_QHYCCD_pyqhyccd_pyx, __pyx_n_s_GetBinModes, 316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_n_s_ActualExposureTime) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_n_s_BeginQHYCCDLive) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_s_CAM_16BITS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_n_s_CAM_8BITS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_n_s_CAM_BIN1X1MODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_CAM_BIN2X2MODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_s_CAM_BIN3X3MODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_n_s_CAM_BIN4X4MODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_CAM_CALIBRATEFPN_INTERFACE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_s_CAM_COLOR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_CAM_FINETONE_INTERFACE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_s_CAM_GPS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_CAM_HUMIDITY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_CAM_IS_COLOR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_CAM_LIVEVIDEOMODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_n_s_CAM_MECHANICALSHUTTER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_n_s_CAM_PRESSURE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_n_s_CAM_QHY5II_GUIDE_MODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_CAM_SINGLEFRAMEMODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_n_s_CAM_SINGNALCLAMP_INTERFACE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_CAM_TECOVERPROTECT_INTERFACE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_CAM_TRIGER_INTERFACE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_CAM_VIEW_MODE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_CONTROL_AMPV) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_CONTROL_BRIGHTNESS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_CONTROL_CFWPORT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_CONTROL_CFWSLOTSNUM) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_CONTROL_CHANNELS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_CONTROL_CONTRAST) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_CONTROL_COOLER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_CONTROL_CURPWM) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_CONTROL_CURTEMP) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_CONTROL_DDR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s_CONTROL_EXPOSURE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_n_s_CONTROL_GAIN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_s_CONTROL_GAMMA) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_CONTROL_ID) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_CONTROL_MANULPWM) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_CONTROL_MAX_ID) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_CONTROL_MAX_ID_Error) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_CONTROL_OFFSET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_CONTROL_ROWNOISERE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_CONTROL_SPEED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_CONTROL_ST4PORT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_CONTROL_SensorChamberCycle_PUMP) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_CONTROL_TRANSFERBIT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_CONTROL_USBTRAFFIC) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_s_CONTROL_VACUUM_PUMP) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_CONTROL_VCAM) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_CONTROL_WBB) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_CONTROL_WBG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_CONTROL_WBR) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_CancelQHYCCDExposing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_CancelQHYCCDExposingAndReadout) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_ClocksPerLine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_CloseQHYCCD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_DDR_BUFFER_CAPACITY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_DDR_BUFFER_READ_THRESHOLD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_DefaultGain) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_n_s_DefaultOffset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_ExpQHYCCDSingleFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_kp_u_Format_string_allocated_too_shor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_kp_u_Format_string_allocated_too_shor_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_FramePeriod_us) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_s_GetBinModes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_GetQHYCCDChipInfo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_GetQHYCCDEffectiveArea) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_s_GetQHYCCDExposureRemaining) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_n_s_GetQHYCCDId) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_GetQHYCCDLiveFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_n_s_GetQHYCCDMemLength) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_s_GetQHYCCDModel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_s_GetQHYCCDNumberOfReadModes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_n_s_GetQHYCCDOverScanArea) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_n_s_GetQHYCCDParam) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s_GetQHYCCDParamMinMaxStep) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_s_GetQHYCCDPreciseExposureInfo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_n_s_GetQHYCCDReadMode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_n_s_GetQHYCCDReadModeName) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_n_s_GetQHYCCDReadModeResolution) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_n_s_GetQHYCCDSDKVersion) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_n_s_GetQHYCCDSingleFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_n_s_GetQHYCCDType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_s_IS_EXPOSING_DONE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_s_ImportError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_n_s_InitQHYCCD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_n_s_InitQHYCCDResource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_n_s_IsQHYCCDControlAvailable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_n_s_LinePeriod_ns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_n_s_LinesPerFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_kp_u_Non_native_byte_order_not_suppor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_n_s_OSError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_n_s_OpenQHYCCD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_n_s_OutputDataActualBits) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_n_s_OutputDataAlignment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_n_s_PixelPeriod_ps) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_n_s_QHYCCD_3A_AUTOBALANCE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s_QHYCCD_3A_AUTOEXPOSURE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_n_s_QHYCCD_3A_AUTOFOCUS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_kp_u_QHYCCD_SDK) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_n_s_QHYCCD_pyqhyccd) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_kp_s_QHYCCD_pyqhyccd_pyx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_s_ReleaseQHYCCDResource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_n_s_RuntimeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_n_s_ScanQHYCCD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_n_s_ScreenStretchB) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_n_s_ScreenStretchW) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_n_s_SetQHYCCDBinMode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_n_s_SetQHYCCDBitsMode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_n_s_SetQHYCCDParam) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_SetQHYCCDReadMode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_n_s_SetQHYCCDResolution) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_n_s_SetQHYCCDStreamMode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_StopQHYCCDLive) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_kp_u__2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s__8) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_n_s__82) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_s_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_s_binh) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_s_binw) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_bpp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_s_cam) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_s_camid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_s_cammodel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_s_channels) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_s_chiph) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_n_s_chipw) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_n_s_class_getitem) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_n_s_controlId) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_n_s_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s_day) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_n_s_doc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_kp_s_error) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_n_s_h) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_s_hasHardwareFrameCounter) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_n_s_hbin) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_height) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_n_s_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_n_s_imageh) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_n_s_imagew) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_n_s_imgdata) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_n_s_init_subclass) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_n_s_isLongExposureMode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_memlength) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_n_s_metaclass) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_n_s_mode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_n_s_modeNumber) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_n_s_modes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_n_s_module) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_n_s_month) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_n_s_np) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_numModes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_n_s_numpy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_kp_s_numpy_core_multiarray_failed_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_kp_s_numpy_core_umath_failed_to_impor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_n_s_os) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_n_s_pixelh) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_n_s_pixelw) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_n_s_pmax) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_n_s_pmin) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_n_s_prepare) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_n_s_print) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_n_s_pstep) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_n_s_qualname) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_n_s_ret) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_n_s_set_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_n_s_shape) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_n_s_sizeX) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_n_s_sizeY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_n_s_startX) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_n_s_startY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_n_s_stderror) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_n_s_strerror) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_n_s_subday) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_n_s_super) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_n_s_sys) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_kp_u_unknown_dtype_code_in_numpy_pxd) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_n_s_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_w) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_warnings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_n_s_wbin) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_n_s_width) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[198], &__pyx_n_s_x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[199], &__pyx_n_s_xsize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[200], &__pyx_n_s_y) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[201], &__pyx_n_s_year) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[202], &__pyx_n_s_ysize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 251, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pyqhyccd(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pyqhyccd},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "pyqhyccd",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_COMPILING_IN_LIMITED_API
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_COMPILING_IN_LIMITED_API
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpyqhyccd(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpyqhyccd(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pyqhyccd(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pyqhyccd(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_pyqhyccd(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'pyqhyccd' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pyqhyccd", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pyqhyccd(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_QHYCCD__pyqhyccd) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "QHYCCD.pyqhyccd")) {
      if (unlikely(PyDict_SetItemString(modules, "QHYCCD.pyqhyccd", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "QHYCCD/pyqhyccd.pyx":1
 * import os             # <<<<<<<<<<<<<<
 * import sys
 * import warnings
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":2
 * import os
 * import sys             # <<<<<<<<<<<<<<
 * import warnings
 * cimport cython
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_sys, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":3
 * import os
 * import sys
 * import warnings             # <<<<<<<<<<<<<<
 * cimport cython
 * cimport qhyccd as qhy
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_warnings, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":6
 * cimport cython
 * cimport qhyccd as qhy
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * from libc.stdint cimport uint32_t, uint8_t, uint16_t
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":14
 * from cpython.ref cimport PyObject
 * 
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * __all__ = ['InitQHYCCDResource',
 */
  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 14, __pyx_L1_error)

  /* "QHYCCD/pyqhyccd.pyx":16
 * np.import_array()
 * 
 * __all__ = ['InitQHYCCDResource',             # <<<<<<<<<<<<<<
 * 'ReleaseQHYCCDResource',
 * 'ScanQHYCCD',
 */
  __pyx_t_1 = PyList_New(39); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_InitQHYCCDResource);
  __Pyx_GIVEREF(__pyx_n_s_InitQHYCCDResource);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_InitQHYCCDResource);
  __Pyx_INCREF(__pyx_n_s_ReleaseQHYCCDResource);
  __Pyx_GIVEREF(__pyx_n_s_ReleaseQHYCCDResource);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ReleaseQHYCCDResource);
  __Pyx_INCREF(__pyx_n_s_ScanQHYCCD);
  __Pyx_GIVEREF(__pyx_n_s_ScanQHYCCD);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_ScanQHYCCD);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDId);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDId);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_GetQHYCCDId);
  __Pyx_INCREF(__pyx_n_s_OpenQHYCCD);
  __Pyx_GIVEREF(__pyx_n_s_OpenQHYCCD);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_OpenQHYCCD);
  __Pyx_INCREF(__pyx_n_s_SetQHYCCDStreamMode);
  __Pyx_GIVEREF(__pyx_n_s_SetQHYCCDStreamMode);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_SetQHYCCDStreamMode);
  __Pyx_INCREF(__pyx_n_s_InitQHYCCD);
  __Pyx_GIVEREF(__pyx_n_s_InitQHYCCD);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_InitQHYCCD);
  __Pyx_INCREF(__pyx_n_s_CloseQHYCCD);
  __Pyx_GIVEREF(__pyx_n_s_CloseQHYCCD);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_CloseQHYCCD);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDChipInfo);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDChipInfo);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_GetQHYCCDChipInfo);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDModel);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDModel);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_GetQHYCCDModel);
  __Pyx_INCREF(__pyx_n_s_IsQHYCCDControlAvailable);
  __Pyx_GIVEREF(__pyx_n_s_IsQHYCCDControlAvailable);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_IsQHYCCDControlAvailable);
  __Pyx_INCREF(__pyx_n_s_CONTROL_ID);
  __Pyx_GIVEREF(__pyx_n_s_CONTROL_ID);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_CONTROL_ID);
  __Pyx_INCREF(__pyx_n_s_SetQHYCCDParam);
  __Pyx_GIVEREF(__pyx_n_s_SetQHYCCDParam);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_SetQHYCCDParam);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDParam);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDParam);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_GetQHYCCDParam);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDParamMinMaxStep);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDParamMinMaxStep);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_GetQHYCCDParamMinMaxStep);
  __Pyx_INCREF(__pyx_n_s_ExpQHYCCDSingleFrame);
  __Pyx_GIVEREF(__pyx_n_s_ExpQHYCCDSingleFrame);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_ExpQHYCCDSingleFrame);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDSingleFrame);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDSingleFrame);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_GetQHYCCDSingleFrame);
  __Pyx_INCREF(__pyx_n_s_CancelQHYCCDExposing);
  __Pyx_GIVEREF(__pyx_n_s_CancelQHYCCDExposing);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_CancelQHYCCDExposing);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDMemLength);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDMemLength);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_s_GetQHYCCDMemLength);
  __Pyx_INCREF(__pyx_n_s_SetQHYCCDBinMode);
  __Pyx_GIVEREF(__pyx_n_s_SetQHYCCDBinMode);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_s_SetQHYCCDBinMode);
  __Pyx_INCREF(__pyx_n_s_SetQHYCCDResolution);
  __Pyx_GIVEREF(__pyx_n_s_SetQHYCCDResolution);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_s_SetQHYCCDResolution);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDExposureRemaining);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDExposureRemaining);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_s_GetQHYCCDExposureRemaining);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDType);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDType);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_n_s_GetQHYCCDType);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDSDKVersion);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDSDKVersion);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_n_s_GetQHYCCDSDKVersion);
  __Pyx_INCREF(__pyx_n_s_CancelQHYCCDExposingAndReadout);
  __Pyx_GIVEREF(__pyx_n_s_CancelQHYCCDExposingAndReadout);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_n_s_CancelQHYCCDExposingAndReadout);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDNumberOfReadModes);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDNumberOfReadModes);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_n_s_GetQHYCCDNumberOfReadModes);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDReadModeResolution);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDReadModeResolution);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_n_s_GetQHYCCDReadModeResolution);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDReadModeName);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDReadModeName);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_n_s_GetQHYCCDReadModeName);
  __Pyx_INCREF(__pyx_n_s_SetQHYCCDReadMode);
  __Pyx_GIVEREF(__pyx_n_s_SetQHYCCDReadMode);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_n_s_SetQHYCCDReadMode);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDReadMode);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDReadMode);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_n_s_GetQHYCCDReadMode);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDEffectiveArea);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDEffectiveArea);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_n_s_GetQHYCCDEffectiveArea);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDOverScanArea);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDOverScanArea);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_n_s_GetQHYCCDOverScanArea);
  __Pyx_INCREF(__pyx_n_s_SetQHYCCDBinMode);
  __Pyx_GIVEREF(__pyx_n_s_SetQHYCCDBinMode);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_n_s_SetQHYCCDBinMode);
  __Pyx_INCREF(__pyx_n_s_BeginQHYCCDLive);
  __Pyx_GIVEREF(__pyx_n_s_BeginQHYCCDLive);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_n_s_BeginQHYCCDLive);
  __Pyx_INCREF(__pyx_n_s_StopQHYCCDLive);
  __Pyx_GIVEREF(__pyx_n_s_StopQHYCCDLive);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_n_s_StopQHYCCDLive);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDLiveFrame);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDLiveFrame);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_n_s_GetQHYCCDLiveFrame);
  __Pyx_INCREF(__pyx_n_s_GetQHYCCDPreciseExposureInfo);
  __Pyx_GIVEREF(__pyx_n_s_GetQHYCCDPreciseExposureInfo);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_n_s_GetQHYCCDPreciseExposureInfo);
  __Pyx_INCREF(__pyx_n_s_SetQHYCCDBitsMode);
  __Pyx_GIVEREF(__pyx_n_s_SetQHYCCDBitsMode);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_n_s_SetQHYCCDBitsMode);
  __Pyx_INCREF(__pyx_n_s_GetBinModes);
  __Pyx_GIVEREF(__pyx_n_s_GetBinModes);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_n_s_GetBinModes);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":61
 *     object PyLong_FromVoidPtr(void *)
 * 
 * class CONTROL_ID:             # <<<<<<<<<<<<<<
 *     CONTROL_BRIGHTNESS=qhy.CONTROL_BRIGHTNESS
 *     CONTROL_CONTRAST=qhy.CONTROL_CONTRAST
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_CONTROL_ID, __pyx_n_s_CONTROL_ID, (PyObject *) NULL, __pyx_n_s_QHYCCD_pyqhyccd, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "QHYCCD/pyqhyccd.pyx":62
 * 
 * class CONTROL_ID:
 *     CONTROL_BRIGHTNESS=qhy.CONTROL_BRIGHTNESS             # <<<<<<<<<<<<<<
 *     CONTROL_CONTRAST=qhy.CONTROL_CONTRAST
 *     CONTROL_WBR=qhy.CONTROL_WBR
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_BRIGHTNESS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_BRIGHTNESS, __pyx_t_3) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":63
 * class CONTROL_ID:
 *     CONTROL_BRIGHTNESS=qhy.CONTROL_BRIGHTNESS
 *     CONTROL_CONTRAST=qhy.CONTROL_CONTRAST             # <<<<<<<<<<<<<<
 *     CONTROL_WBR=qhy.CONTROL_WBR
 *     CONTROL_WBB=qhy.CONTROL_WBB
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_CONTRAST); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_CONTRAST, __pyx_t_3) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":64
 *     CONTROL_BRIGHTNESS=qhy.CONTROL_BRIGHTNESS
 *     CONTROL_CONTRAST=qhy.CONTROL_CONTRAST
 *     CONTROL_WBR=qhy.CONTROL_WBR             # <<<<<<<<<<<<<<
 *     CONTROL_WBB=qhy.CONTROL_WBB
 *     CONTROL_WBG=qhy.CONTROL_WBG
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_WBR); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_WBR, __pyx_t_3) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":65
 *     CONTROL_CONTRAST=qhy.CONTROL_CONTRAST
 *     CONTROL_WBR=qhy.CONTROL_WBR
 *     CONTROL_WBB=qhy.CONTROL_WBB             # <<<<<<<<<<<<<<
 *     CONTROL_WBG=qhy.CONTROL_WBG
 *     CONTROL_GAMMA=qhy.CONTROL_GAMMA
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_WBB); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_WBB, __pyx_t_3) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":66
 *     CONTROL_WBR=qhy.CONTROL_WBR
 *     CONTROL_WBB=qhy.CONTROL_WBB
 *     CONTROL_WBG=qhy.CONTROL_WBG             # <<<<<<<<<<<<<<
 *     CONTROL_GAMMA=qhy.CONTROL_GAMMA
 *     CONTROL_GAIN=qhy.CONTROL_GAIN
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_WBG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_WBG, __pyx_t_3) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":67
 *     CONTROL_WBB=qhy.CONTROL_WBB
 *     CONTROL_WBG=qhy.CONTROL_WBG
 *     CONTROL_GAMMA=qhy.CONTROL_GAMMA             # <<<<<<<<<<<<<<
 *     CONTROL_GAIN=qhy.CONTROL_GAIN
 *     CONTROL_OFFSET=qhy.CONTROL_OFFSET
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_GAMMA); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_GAMMA, __pyx_t_3) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":68
 *     CONTROL_WBG=qhy.CONTROL_WBG
 *     CONTROL_GAMMA=qhy.CONTROL_GAMMA
 *     CONTROL_GAIN=qhy.CONTROL_GAIN             # <<<<<<<<<<<<<<
 *     CONTROL_OFFSET=qhy.CONTROL_OFFSET
 *     CONTROL_EXPOSURE=qhy.CONTROL_EXPOSURE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_GAIN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_GAIN, __pyx_t_3) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":69
 *     CONTROL_GAMMA=qhy.CONTROL_GAMMA
 *     CONTROL_GAIN=qhy.CONTROL_GAIN
 *     CONTROL_OFFSET=qhy.CONTROL_OFFSET             # <<<<<<<<<<<<<<
 *     CONTROL_EXPOSURE=qhy.CONTROL_EXPOSURE
 *     CONTROL_SPEED=qhy.CONTROL_SPEED
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_OFFSET); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_OFFSET, __pyx_t_3) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":70
 *     CONTROL_GAIN=qhy.CONTROL_GAIN
 *     CONTROL_OFFSET=qhy.CONTROL_OFFSET
 *     CONTROL_EXPOSURE=qhy.CONTROL_EXPOSURE             # <<<<<<<<<<<<<<
 *     CONTROL_SPEED=qhy.CONTROL_SPEED
 *     CONTROL_TRANSFERBIT=qhy.CONTROL_TRANSFERBIT
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_EXPOSURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_EXPOSURE, __pyx_t_3) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":71
 *     CONTROL_OFFSET=qhy.CONTROL_OFFSET
 *     CONTROL_EXPOSURE=qhy.CONTROL_EXPOSURE
 *     CONTROL_SPEED=qhy.CONTROL_SPEED             # <<<<<<<<<<<<<<
 *     CONTROL_TRANSFERBIT=qhy.CONTROL_TRANSFERBIT
 *     CONTROL_CHANNELS=qhy.CONTROL_CHANNELS
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_SPEED); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_SPEED, __pyx_t_3) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":72
 *     CONTROL_EXPOSURE=qhy.CONTROL_EXPOSURE
 *     CONTROL_SPEED=qhy.CONTROL_SPEED
 *     CONTROL_TRANSFERBIT=qhy.CONTROL_TRANSFERBIT             # <<<<<<<<<<<<<<
 *     CONTROL_CHANNELS=qhy.CONTROL_CHANNELS
 *     CONTROL_USBTRAFFIC=qhy.CONTROL_USBTRAFFIC
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_TRANSFERBIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_TRANSFERBIT, __pyx_t_3) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":73
 *     CONTROL_SPEED=qhy.CONTROL_SPEED
 *     CONTROL_TRANSFERBIT=qhy.CONTROL_TRANSFERBIT
 *     CONTROL_CHANNELS=qhy.CONTROL_CHANNELS             # <<<<<<<<<<<<<<
 *     CONTROL_USBTRAFFIC=qhy.CONTROL_USBTRAFFIC
 *     CONTROL_ROWNOISERE=qhy.CONTROL_ROWNOISERE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_CHANNELS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_CHANNELS, __pyx_t_3) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":74
 *     CONTROL_TRANSFERBIT=qhy.CONTROL_TRANSFERBIT
 *     CONTROL_CHANNELS=qhy.CONTROL_CHANNELS
 *     CONTROL_USBTRAFFIC=qhy.CONTROL_USBTRAFFIC             # <<<<<<<<<<<<<<
 *     CONTROL_ROWNOISERE=qhy.CONTROL_ROWNOISERE
 *     CONTROL_CURTEMP=qhy.CONTROL_CURTEMP
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_USBTRAFFIC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_USBTRAFFIC, __pyx_t_3) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":75
 *     CONTROL_CHANNELS=qhy.CONTROL_CHANNELS
 *     CONTROL_USBTRAFFIC=qhy.CONTROL_USBTRAFFIC
 *     CONTROL_ROWNOISERE=qhy.CONTROL_ROWNOISERE             # <<<<<<<<<<<<<<
 *     CONTROL_CURTEMP=qhy.CONTROL_CURTEMP
 *     CONTROL_CURPWM=qhy.CONTROL_CURPWM
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_ROWNOISERE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_ROWNOISERE, __pyx_t_3) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":76
 *     CONTROL_USBTRAFFIC=qhy.CONTROL_USBTRAFFIC
 *     CONTROL_ROWNOISERE=qhy.CONTROL_ROWNOISERE
 *     CONTROL_CURTEMP=qhy.CONTROL_CURTEMP             # <<<<<<<<<<<<<<
 *     CONTROL_CURPWM=qhy.CONTROL_CURPWM
 *     CONTROL_MANULPWM=qhy.CONTROL_MANULPWM
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_CURTEMP); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_CURTEMP, __pyx_t_3) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":77
 *     CONTROL_ROWNOISERE=qhy.CONTROL_ROWNOISERE
 *     CONTROL_CURTEMP=qhy.CONTROL_CURTEMP
 *     CONTROL_CURPWM=qhy.CONTROL_CURPWM             # <<<<<<<<<<<<<<
 *     CONTROL_MANULPWM=qhy.CONTROL_MANULPWM
 *     CONTROL_CFWPORT=qhy.CONTROL_CFWPORT
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_CURPWM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_CURPWM, __pyx_t_3) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":78
 *     CONTROL_CURTEMP=qhy.CONTROL_CURTEMP
 *     CONTROL_CURPWM=qhy.CONTROL_CURPWM
 *     CONTROL_MANULPWM=qhy.CONTROL_MANULPWM             # <<<<<<<<<<<<<<
 *     CONTROL_CFWPORT=qhy.CONTROL_CFWPORT
 *     CONTROL_COOLER=qhy.CONTROL_COOLER
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_MANULPWM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_MANULPWM, __pyx_t_3) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":79
 *     CONTROL_CURPWM=qhy.CONTROL_CURPWM
 *     CONTROL_MANULPWM=qhy.CONTROL_MANULPWM
 *     CONTROL_CFWPORT=qhy.CONTROL_CFWPORT             # <<<<<<<<<<<<<<
 *     CONTROL_COOLER=qhy.CONTROL_COOLER
 *     CONTROL_ST4PORT=qhy.CONTROL_ST4PORT
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_CFWPORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_CFWPORT, __pyx_t_3) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":80
 *     CONTROL_MANULPWM=qhy.CONTROL_MANULPWM
 *     CONTROL_CFWPORT=qhy.CONTROL_CFWPORT
 *     CONTROL_COOLER=qhy.CONTROL_COOLER             # <<<<<<<<<<<<<<
 *     CONTROL_ST4PORT=qhy.CONTROL_ST4PORT
 *     CAM_COLOR=qhy.CAM_COLOR
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_COOLER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_COOLER, __pyx_t_3) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":81
 *     CONTROL_CFWPORT=qhy.CONTROL_CFWPORT
 *     CONTROL_COOLER=qhy.CONTROL_COOLER
 *     CONTROL_ST4PORT=qhy.CONTROL_ST4PORT             # <<<<<<<<<<<<<<
 *     CAM_COLOR=qhy.CAM_COLOR
 *     CAM_BIN1X1MODE=qhy.CAM_BIN1X1MODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_ST4PORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_ST4PORT, __pyx_t_3) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":82
 *     CONTROL_COOLER=qhy.CONTROL_COOLER
 *     CONTROL_ST4PORT=qhy.CONTROL_ST4PORT
 *     CAM_COLOR=qhy.CAM_COLOR             # <<<<<<<<<<<<<<
 *     CAM_BIN1X1MODE=qhy.CAM_BIN1X1MODE
 *     CAM_BIN2X2MODE=qhy.CAM_BIN2X2MODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_COLOR); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_COLOR, __pyx_t_3) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":83
 *     CONTROL_ST4PORT=qhy.CONTROL_ST4PORT
 *     CAM_COLOR=qhy.CAM_COLOR
 *     CAM_BIN1X1MODE=qhy.CAM_BIN1X1MODE             # <<<<<<<<<<<<<<
 *     CAM_BIN2X2MODE=qhy.CAM_BIN2X2MODE
 *     CAM_BIN3X3MODE=qhy.CAM_BIN3X3MODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_BIN1X1MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_BIN1X1MODE, __pyx_t_3) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":84
 *     CAM_COLOR=qhy.CAM_COLOR
 *     CAM_BIN1X1MODE=qhy.CAM_BIN1X1MODE
 *     CAM_BIN2X2MODE=qhy.CAM_BIN2X2MODE             # <<<<<<<<<<<<<<
 *     CAM_BIN3X3MODE=qhy.CAM_BIN3X3MODE
 *     CAM_BIN4X4MODE=qhy.CAM_BIN4X4MODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_BIN2X2MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_BIN2X2MODE, __pyx_t_3) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":85
 *     CAM_BIN1X1MODE=qhy.CAM_BIN1X1MODE
 *     CAM_BIN2X2MODE=qhy.CAM_BIN2X2MODE
 *     CAM_BIN3X3MODE=qhy.CAM_BIN3X3MODE             # <<<<<<<<<<<<<<
 *     CAM_BIN4X4MODE=qhy.CAM_BIN4X4MODE
 *     CAM_MECHANICALSHUTTER=qhy.CAM_MECHANICALSHUTTER
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_BIN3X3MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_BIN3X3MODE, __pyx_t_3) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":86
 *     CAM_BIN2X2MODE=qhy.CAM_BIN2X2MODE
 *     CAM_BIN3X3MODE=qhy.CAM_BIN3X3MODE
 *     CAM_BIN4X4MODE=qhy.CAM_BIN4X4MODE             # <<<<<<<<<<<<<<
 *     CAM_MECHANICALSHUTTER=qhy.CAM_MECHANICALSHUTTER
 *     CAM_TRIGER_INTERFACE=qhy.CAM_TRIGER_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_BIN4X4MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_BIN4X4MODE, __pyx_t_3) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":87
 *     CAM_BIN3X3MODE=qhy.CAM_BIN3X3MODE
 *     CAM_BIN4X4MODE=qhy.CAM_BIN4X4MODE
 *     CAM_MECHANICALSHUTTER=qhy.CAM_MECHANICALSHUTTER             # <<<<<<<<<<<<<<
 *     CAM_TRIGER_INTERFACE=qhy.CAM_TRIGER_INTERFACE
 *     CAM_TECOVERPROTECT_INTERFACE=qhy.CAM_TECOVERPROTECT_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_MECHANICALSHUTTER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_MECHANICALSHUTTER, __pyx_t_3) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":88
 *     CAM_BIN4X4MODE=qhy.CAM_BIN4X4MODE
 *     CAM_MECHANICALSHUTTER=qhy.CAM_MECHANICALSHUTTER
 *     CAM_TRIGER_INTERFACE=qhy.CAM_TRIGER_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_TECOVERPROTECT_INTERFACE=qhy.CAM_TECOVERPROTECT_INTERFACE
 *     CAM_SINGNALCLAMP_INTERFACE=qhy.CAM_SINGNALCLAMP_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_TRIGER_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_TRIGER_INTERFACE, __pyx_t_3) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":89
 *     CAM_MECHANICALSHUTTER=qhy.CAM_MECHANICALSHUTTER
 *     CAM_TRIGER_INTERFACE=qhy.CAM_TRIGER_INTERFACE
 *     CAM_TECOVERPROTECT_INTERFACE=qhy.CAM_TECOVERPROTECT_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_SINGNALCLAMP_INTERFACE=qhy.CAM_SINGNALCLAMP_INTERFACE
 *     CAM_FINETONE_INTERFACE=qhy.CAM_FINETONE_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_TECOVERPROTECT_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_TECOVERPROTECT_INTERFACE, __pyx_t_3) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":90
 *     CAM_TRIGER_INTERFACE=qhy.CAM_TRIGER_INTERFACE
 *     CAM_TECOVERPROTECT_INTERFACE=qhy.CAM_TECOVERPROTECT_INTERFACE
 *     CAM_SINGNALCLAMP_INTERFACE=qhy.CAM_SINGNALCLAMP_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_FINETONE_INTERFACE=qhy.CAM_FINETONE_INTERFACE
 *     CAM_SHUTTERMOTORHEATING_INTERFACE=qhy.CAM_SHUTTERMOTORHEATING_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_SINGNALCLAMP_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_SINGNALCLAMP_INTERFACE, __pyx_t_3) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":91
 *     CAM_TECOVERPROTECT_INTERFACE=qhy.CAM_TECOVERPROTECT_INTERFACE
 *     CAM_SINGNALCLAMP_INTERFACE=qhy.CAM_SINGNALCLAMP_INTERFACE
 *     CAM_FINETONE_INTERFACE=qhy.CAM_FINETONE_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_SHUTTERMOTORHEATING_INTERFACE=qhy.CAM_SHUTTERMOTORHEATING_INTERFACE
 *     CAM_CALIBRATEFPN_INTERFACE=qhy.CAM_CALIBRATEFPN_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_FINETONE_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_FINETONE_INTERFACE, __pyx_t_3) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":92
 *     CAM_SINGNALCLAMP_INTERFACE=qhy.CAM_SINGNALCLAMP_INTERFACE
 *     CAM_FINETONE_INTERFACE=qhy.CAM_FINETONE_INTERFACE
 *     CAM_SHUTTERMOTORHEATING_INTERFACE=qhy.CAM_SHUTTERMOTORHEATING_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_CALIBRATEFPN_INTERFACE=qhy.CAM_CALIBRATEFPN_INTERFACE
 *     CAM_CHIPTEMPERATURESENSOR_INTERFACE=qhy.CAM_CHIPTEMPERATURESENSOR_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_SHUTTERMOTORHEATING_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_SHUTTERMOTORHEATING_INTERFAC, __pyx_t_3) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":93
 *     CAM_FINETONE_INTERFACE=qhy.CAM_FINETONE_INTERFACE
 *     CAM_SHUTTERMOTORHEATING_INTERFACE=qhy.CAM_SHUTTERMOTORHEATING_INTERFACE
 *     CAM_CALIBRATEFPN_INTERFACE=qhy.CAM_CALIBRATEFPN_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_CHIPTEMPERATURESENSOR_INTERFACE=qhy.CAM_CHIPTEMPERATURESENSOR_INTERFACE
 *     CAM_USBREADOUTSLOWEST_INTERFACE=qhy.CAM_USBREADOUTSLOWEST_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_CALIBRATEFPN_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_CALIBRATEFPN_INTERFACE, __pyx_t_3) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":94
 *     CAM_SHUTTERMOTORHEATING_INTERFACE=qhy.CAM_SHUTTERMOTORHEATING_INTERFACE
 *     CAM_CALIBRATEFPN_INTERFACE=qhy.CAM_CALIBRATEFPN_INTERFACE
 *     CAM_CHIPTEMPERATURESENSOR_INTERFACE=qhy.CAM_CHIPTEMPERATURESENSOR_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_USBREADOUTSLOWEST_INTERFACE=qhy.CAM_USBREADOUTSLOWEST_INTERFACE
 *     CAM_8BITS=qhy.CAM_8BITS
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_CHIPTEMPERATURESENSOR_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_CHIPTEMPERATURESENSOR_INTERF, __pyx_t_3) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":95
 *     CAM_CALIBRATEFPN_INTERFACE=qhy.CAM_CALIBRATEFPN_INTERFACE
 *     CAM_CHIPTEMPERATURESENSOR_INTERFACE=qhy.CAM_CHIPTEMPERATURESENSOR_INTERFACE
 *     CAM_USBREADOUTSLOWEST_INTERFACE=qhy.CAM_USBREADOUTSLOWEST_INTERFACE             # <<<<<<<<<<<<<<
 *     CAM_8BITS=qhy.CAM_8BITS
 *     CAM_16BITS=qhy.CAM_16BITS
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_USBREADOUTSLOWEST_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_USBREADOUTSLOWEST_INTERFACE, __pyx_t_3) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":96
 *     CAM_CHIPTEMPERATURESENSOR_INTERFACE=qhy.CAM_CHIPTEMPERATURESENSOR_INTERFACE
 *     CAM_USBREADOUTSLOWEST_INTERFACE=qhy.CAM_USBREADOUTSLOWEST_INTERFACE
 *     CAM_8BITS=qhy.CAM_8BITS             # <<<<<<<<<<<<<<
 *     CAM_16BITS=qhy.CAM_16BITS
 *     CAM_GPS=qhy.CAM_GPS
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_8BITS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_8BITS, __pyx_t_3) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":97
 *     CAM_USBREADOUTSLOWEST_INTERFACE=qhy.CAM_USBREADOUTSLOWEST_INTERFACE
 *     CAM_8BITS=qhy.CAM_8BITS
 *     CAM_16BITS=qhy.CAM_16BITS             # <<<<<<<<<<<<<<
 *     CAM_GPS=qhy.CAM_GPS
 *     CAM_IGNOREOVERSCAN_INTERFACE=qhy.CAM_IGNOREOVERSCAN_INTERFACE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_16BITS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_16BITS, __pyx_t_3) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":98
 *     CAM_8BITS=qhy.CAM_8BITS
 *     CAM_16BITS=qhy.CAM_16BITS
 *     CAM_GPS=qhy.CAM_GPS             # <<<<<<<<<<<<<<
 *     CAM_IGNOREOVERSCAN_INTERFACE=qhy.CAM_IGNOREOVERSCAN_INTERFACE
 *     QHYCCD_3A_AUTOBALANCE=qhy.QHYCCD_3A_AUTOBALANCE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_GPS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_GPS, __pyx_t_3) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":99
 *     CAM_16BITS=qhy.CAM_16BITS
 *     CAM_GPS=qhy.CAM_GPS
 *     CAM_IGNOREOVERSCAN_INTERFACE=qhy.CAM_IGNOREOVERSCAN_INTERFACE             # <<<<<<<<<<<<<<
 *     QHYCCD_3A_AUTOBALANCE=qhy.QHYCCD_3A_AUTOBALANCE
 *     QHYCCD_3A_AUTOEXPOSURE=qhy.QHYCCD_3A_AUTOEXPOSURE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_IGNOREOVERSCAN_INTERFACE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_IGNOREOVERSCAN_INTERFACE, __pyx_t_3) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":100
 *     CAM_GPS=qhy.CAM_GPS
 *     CAM_IGNOREOVERSCAN_INTERFACE=qhy.CAM_IGNOREOVERSCAN_INTERFACE
 *     QHYCCD_3A_AUTOBALANCE=qhy.QHYCCD_3A_AUTOBALANCE             # <<<<<<<<<<<<<<
 *     QHYCCD_3A_AUTOEXPOSURE=qhy.QHYCCD_3A_AUTOEXPOSURE
 *     QHYCCD_3A_AUTOFOCUS=qhy.QHYCCD_3A_AUTOFOCUS
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(QHYCCD_3A_AUTOBALANCE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_QHYCCD_3A_AUTOBALANCE, __pyx_t_3) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":101
 *     CAM_IGNOREOVERSCAN_INTERFACE=qhy.CAM_IGNOREOVERSCAN_INTERFACE
 *     QHYCCD_3A_AUTOBALANCE=qhy.QHYCCD_3A_AUTOBALANCE
 *     QHYCCD_3A_AUTOEXPOSURE=qhy.QHYCCD_3A_AUTOEXPOSURE             # <<<<<<<<<<<<<<
 *     QHYCCD_3A_AUTOFOCUS=qhy.QHYCCD_3A_AUTOFOCUS
 *     CONTROL_AMPV=qhy.CONTROL_AMPV
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(QHYCCD_3A_AUTOEXPOSURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_QHYCCD_3A_AUTOEXPOSURE, __pyx_t_3) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":102
 *     QHYCCD_3A_AUTOBALANCE=qhy.QHYCCD_3A_AUTOBALANCE
 *     QHYCCD_3A_AUTOEXPOSURE=qhy.QHYCCD_3A_AUTOEXPOSURE
 *     QHYCCD_3A_AUTOFOCUS=qhy.QHYCCD_3A_AUTOFOCUS             # <<<<<<<<<<<<<<
 *     CONTROL_AMPV=qhy.CONTROL_AMPV
 *     CONTROL_VCAM=qhy.CONTROL_VCAM
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(QHYCCD_3A_AUTOFOCUS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_QHYCCD_3A_AUTOFOCUS, __pyx_t_3) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":103
 *     QHYCCD_3A_AUTOEXPOSURE=qhy.QHYCCD_3A_AUTOEXPOSURE
 *     QHYCCD_3A_AUTOFOCUS=qhy.QHYCCD_3A_AUTOFOCUS
 *     CONTROL_AMPV=qhy.CONTROL_AMPV             # <<<<<<<<<<<<<<
 *     CONTROL_VCAM=qhy.CONTROL_VCAM
 *     CAM_VIEW_MODE=qhy.CAM_VIEW_MODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_AMPV); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_AMPV, __pyx_t_3) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":104
 *     QHYCCD_3A_AUTOFOCUS=qhy.QHYCCD_3A_AUTOFOCUS
 *     CONTROL_AMPV=qhy.CONTROL_AMPV
 *     CONTROL_VCAM=qhy.CONTROL_VCAM             # <<<<<<<<<<<<<<
 *     CAM_VIEW_MODE=qhy.CAM_VIEW_MODE
 *     CONTROL_CFWSLOTSNUM=qhy.CONTROL_CFWSLOTSNUM
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_VCAM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_VCAM, __pyx_t_3) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":105
 *     CONTROL_AMPV=qhy.CONTROL_AMPV
 *     CONTROL_VCAM=qhy.CONTROL_VCAM
 *     CAM_VIEW_MODE=qhy.CAM_VIEW_MODE             # <<<<<<<<<<<<<<
 *     CONTROL_CFWSLOTSNUM=qhy.CONTROL_CFWSLOTSNUM
 *     IS_EXPOSING_DONE=qhy.IS_EXPOSING_DONE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_VIEW_MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_VIEW_MODE, __pyx_t_3) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":106
 *     CONTROL_VCAM=qhy.CONTROL_VCAM
 *     CAM_VIEW_MODE=qhy.CAM_VIEW_MODE
 *     CONTROL_CFWSLOTSNUM=qhy.CONTROL_CFWSLOTSNUM             # <<<<<<<<<<<<<<
 *     IS_EXPOSING_DONE=qhy.IS_EXPOSING_DONE
 *     ScreenStretchB=qhy.ScreenStretchB
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_CFWSLOTSNUM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_CFWSLOTSNUM, __pyx_t_3) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":107
 *     CAM_VIEW_MODE=qhy.CAM_VIEW_MODE
 *     CONTROL_CFWSLOTSNUM=qhy.CONTROL_CFWSLOTSNUM
 *     IS_EXPOSING_DONE=qhy.IS_EXPOSING_DONE             # <<<<<<<<<<<<<<
 *     ScreenStretchB=qhy.ScreenStretchB
 *     ScreenStretchW=qhy.ScreenStretchW
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(IS_EXPOSING_DONE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_IS_EXPOSING_DONE, __pyx_t_3) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":108
 *     CONTROL_CFWSLOTSNUM=qhy.CONTROL_CFWSLOTSNUM
 *     IS_EXPOSING_DONE=qhy.IS_EXPOSING_DONE
 *     ScreenStretchB=qhy.ScreenStretchB             # <<<<<<<<<<<<<<
 *     ScreenStretchW=qhy.ScreenStretchW
 *     CONTROL_DDR=qhy.CONTROL_DDR
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(ScreenStretchB); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_ScreenStretchB, __pyx_t_3) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":109
 *     IS_EXPOSING_DONE=qhy.IS_EXPOSING_DONE
 *     ScreenStretchB=qhy.ScreenStretchB
 *     ScreenStretchW=qhy.ScreenStretchW             # <<<<<<<<<<<<<<
 *     CONTROL_DDR=qhy.CONTROL_DDR
 *     CAM_LIGHT_PERFORMANCE_MODE=qhy.CAM_LIGHT_PERFORMANCE_MODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(ScreenStretchW); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_ScreenStretchW, __pyx_t_3) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":110
 *     ScreenStretchB=qhy.ScreenStretchB
 *     ScreenStretchW=qhy.ScreenStretchW
 *     CONTROL_DDR=qhy.CONTROL_DDR             # <<<<<<<<<<<<<<
 *     CAM_LIGHT_PERFORMANCE_MODE=qhy.CAM_LIGHT_PERFORMANCE_MODE
 *     CAM_QHY5II_GUIDE_MODE=qhy.CAM_QHY5II_GUIDE_MODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_DDR); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_DDR, __pyx_t_3) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":111
 *     ScreenStretchW=qhy.ScreenStretchW
 *     CONTROL_DDR=qhy.CONTROL_DDR
 *     CAM_LIGHT_PERFORMANCE_MODE=qhy.CAM_LIGHT_PERFORMANCE_MODE             # <<<<<<<<<<<<<<
 *     CAM_QHY5II_GUIDE_MODE=qhy.CAM_QHY5II_GUIDE_MODE
 *     DDR_BUFFER_CAPACITY=qhy.DDR_BUFFER_CAPACITY
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_LIGHT_PERFORMANCE_MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_LIGHT_PERFORMANCE_MODE, __pyx_t_3) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":112
 *     CONTROL_DDR=qhy.CONTROL_DDR
 *     CAM_LIGHT_PERFORMANCE_MODE=qhy.CAM_LIGHT_PERFORMANCE_MODE
 *     CAM_QHY5II_GUIDE_MODE=qhy.CAM_QHY5II_GUIDE_MODE             # <<<<<<<<<<<<<<
 *     DDR_BUFFER_CAPACITY=qhy.DDR_BUFFER_CAPACITY
 *     DDR_BUFFER_READ_THRESHOLD=qhy.DDR_BUFFER_READ_THRESHOLD
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_QHY5II_GUIDE_MODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_QHY5II_GUIDE_MODE, __pyx_t_3) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":113
 *     CAM_LIGHT_PERFORMANCE_MODE=qhy.CAM_LIGHT_PERFORMANCE_MODE
 *     CAM_QHY5II_GUIDE_MODE=qhy.CAM_QHY5II_GUIDE_MODE
 *     DDR_BUFFER_CAPACITY=qhy.DDR_BUFFER_CAPACITY             # <<<<<<<<<<<<<<
 *     DDR_BUFFER_READ_THRESHOLD=qhy.DDR_BUFFER_READ_THRESHOLD
 *     DefaultGain=qhy.DefaultGain
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(DDR_BUFFER_CAPACITY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_DDR_BUFFER_CAPACITY, __pyx_t_3) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":114
 *     CAM_QHY5II_GUIDE_MODE=qhy.CAM_QHY5II_GUIDE_MODE
 *     DDR_BUFFER_CAPACITY=qhy.DDR_BUFFER_CAPACITY
 *     DDR_BUFFER_READ_THRESHOLD=qhy.DDR_BUFFER_READ_THRESHOLD             # <<<<<<<<<<<<<<
 *     DefaultGain=qhy.DefaultGain
 *     DefaultOffset=qhy.DefaultOffset
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(DDR_BUFFER_READ_THRESHOLD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_DDR_BUFFER_READ_THRESHOLD, __pyx_t_3) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":115
 *     DDR_BUFFER_CAPACITY=qhy.DDR_BUFFER_CAPACITY
 *     DDR_BUFFER_READ_THRESHOLD=qhy.DDR_BUFFER_READ_THRESHOLD
 *     DefaultGain=qhy.DefaultGain             # <<<<<<<<<<<<<<
 *     DefaultOffset=qhy.DefaultOffset
 *     OutputDataActualBits=qhy.OutputDataActualBits
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(DefaultGain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_DefaultGain, __pyx_t_3) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":116
 *     DDR_BUFFER_READ_THRESHOLD=qhy.DDR_BUFFER_READ_THRESHOLD
 *     DefaultGain=qhy.DefaultGain
 *     DefaultOffset=qhy.DefaultOffset             # <<<<<<<<<<<<<<
 *     OutputDataActualBits=qhy.OutputDataActualBits
 *     OutputDataAlignment=qhy.OutputDataAlignment
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(DefaultOffset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_DefaultOffset, __pyx_t_3) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":117
 *     DefaultGain=qhy.DefaultGain
 *     DefaultOffset=qhy.DefaultOffset
 *     OutputDataActualBits=qhy.OutputDataActualBits             # <<<<<<<<<<<<<<
 *     OutputDataAlignment=qhy.OutputDataAlignment
 *     CAM_SINGLEFRAMEMODE=qhy.CAM_SINGLEFRAMEMODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(OutputDataActualBits); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_OutputDataActualBits, __pyx_t_3) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":118
 *     DefaultOffset=qhy.DefaultOffset
 *     OutputDataActualBits=qhy.OutputDataActualBits
 *     OutputDataAlignment=qhy.OutputDataAlignment             # <<<<<<<<<<<<<<
 *     CAM_SINGLEFRAMEMODE=qhy.CAM_SINGLEFRAMEMODE
 *     CAM_LIVEVIDEOMODE=qhy.CAM_LIVEVIDEOMODE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(OutputDataAlignment); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_OutputDataAlignment, __pyx_t_3) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":119
 *     OutputDataActualBits=qhy.OutputDataActualBits
 *     OutputDataAlignment=qhy.OutputDataAlignment
 *     CAM_SINGLEFRAMEMODE=qhy.CAM_SINGLEFRAMEMODE             # <<<<<<<<<<<<<<
 *     CAM_LIVEVIDEOMODE=qhy.CAM_LIVEVIDEOMODE
 *     CAM_IS_COLOR=qhy.CAM_IS_COLOR
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_SINGLEFRAMEMODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_SINGLEFRAMEMODE, __pyx_t_3) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":120
 *     OutputDataAlignment=qhy.OutputDataAlignment
 *     CAM_SINGLEFRAMEMODE=qhy.CAM_SINGLEFRAMEMODE
 *     CAM_LIVEVIDEOMODE=qhy.CAM_LIVEVIDEOMODE             # <<<<<<<<<<<<<<
 *     CAM_IS_COLOR=qhy.CAM_IS_COLOR
 *     hasHardwareFrameCounter=qhy.hasHardwareFrameCounter
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_LIVEVIDEOMODE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_LIVEVIDEOMODE, __pyx_t_3) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":121
 *     CAM_SINGLEFRAMEMODE=qhy.CAM_SINGLEFRAMEMODE
 *     CAM_LIVEVIDEOMODE=qhy.CAM_LIVEVIDEOMODE
 *     CAM_IS_COLOR=qhy.CAM_IS_COLOR             # <<<<<<<<<<<<<<
 *     hasHardwareFrameCounter=qhy.hasHardwareFrameCounter
 *     CONTROL_MAX_ID_Error=qhy.CONTROL_MAX_ID_Error
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_IS_COLOR); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_IS_COLOR, __pyx_t_3) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":122
 *     CAM_LIVEVIDEOMODE=qhy.CAM_LIVEVIDEOMODE
 *     CAM_IS_COLOR=qhy.CAM_IS_COLOR
 *     hasHardwareFrameCounter=qhy.hasHardwareFrameCounter             # <<<<<<<<<<<<<<
 *     CONTROL_MAX_ID_Error=qhy.CONTROL_MAX_ID_Error
 *     CAM_HUMIDITY=qhy.CAM_HUMIDITY
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(hasHardwareFrameCounter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_hasHardwareFrameCounter, __pyx_t_3) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":123
 *     CAM_IS_COLOR=qhy.CAM_IS_COLOR
 *     hasHardwareFrameCounter=qhy.hasHardwareFrameCounter
 *     CONTROL_MAX_ID_Error=qhy.CONTROL_MAX_ID_Error             # <<<<<<<<<<<<<<
 *     CAM_HUMIDITY=qhy.CAM_HUMIDITY
 *     CAM_PRESSURE=qhy.CAM_PRESSURE
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_MAX_ID_Error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_MAX_ID_Error, __pyx_t_3) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":124
 *     hasHardwareFrameCounter=qhy.hasHardwareFrameCounter
 *     CONTROL_MAX_ID_Error=qhy.CONTROL_MAX_ID_Error
 *     CAM_HUMIDITY=qhy.CAM_HUMIDITY             # <<<<<<<<<<<<<<
 *     CAM_PRESSURE=qhy.CAM_PRESSURE
 *     CONTROL_VACUUM_PUMP=qhy.CONTROL_VACUUM_PUMP
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_HUMIDITY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_HUMIDITY, __pyx_t_3) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":125
 *     CONTROL_MAX_ID_Error=qhy.CONTROL_MAX_ID_Error
 *     CAM_HUMIDITY=qhy.CAM_HUMIDITY
 *     CAM_PRESSURE=qhy.CAM_PRESSURE             # <<<<<<<<<<<<<<
 *     CONTROL_VACUUM_PUMP=qhy.CONTROL_VACUUM_PUMP
 *     CONTROL_SensorChamberCycle_PUMP=qhy.CONTROL_SensorChamberCycle_PUMP
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CAM_PRESSURE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CAM_PRESSURE, __pyx_t_3) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":126
 *     CAM_HUMIDITY=qhy.CAM_HUMIDITY
 *     CAM_PRESSURE=qhy.CAM_PRESSURE
 *     CONTROL_VACUUM_PUMP=qhy.CONTROL_VACUUM_PUMP             # <<<<<<<<<<<<<<
 *     CONTROL_SensorChamberCycle_PUMP=qhy.CONTROL_SensorChamberCycle_PUMP
 *     CONTROL_MAX_ID=qhy.CONTROL_MAX_ID
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_VACUUM_PUMP); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_VACUUM_PUMP, __pyx_t_3) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":127
 *     CAM_PRESSURE=qhy.CAM_PRESSURE
 *     CONTROL_VACUUM_PUMP=qhy.CONTROL_VACUUM_PUMP
 *     CONTROL_SensorChamberCycle_PUMP=qhy.CONTROL_SensorChamberCycle_PUMP             # <<<<<<<<<<<<<<
 *     CONTROL_MAX_ID=qhy.CONTROL_MAX_ID
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_SensorChamberCycle_PUMP); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_SensorChamberCycle_PUMP, __pyx_t_3) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":128
 *     CONTROL_VACUUM_PUMP=qhy.CONTROL_VACUUM_PUMP
 *     CONTROL_SensorChamberCycle_PUMP=qhy.CONTROL_SensorChamberCycle_PUMP
 *     CONTROL_MAX_ID=qhy.CONTROL_MAX_ID             # <<<<<<<<<<<<<<
 * 
 * cdef int chkerr(long err):
 */
  __pyx_t_3 = __Pyx_PyInt_From_CONTROL_ID(CONTROL_MAX_ID); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_CONTROL_MAX_ID, __pyx_t_3) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "QHYCCD/pyqhyccd.pyx":61
 *     object PyLong_FromVoidPtr(void *)
 * 
 * class CONTROL_ID:             # <<<<<<<<<<<<<<
 *     CONTROL_BRIGHTNESS=qhy.CONTROL_BRIGHTNESS
 *     CONTROL_CONTRAST=qhy.CONTROL_CONTRAST
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_n_s_CONTROL_ID, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CONTROL_ID, __pyx_t_3) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":136
 * 
 * 
 * def InitQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_1InitQHYCCDResource, 0, __pyx_n_s_InitQHYCCDResource, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InitQHYCCDResource, __pyx_t_1) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":139
 *     chkerr(qhy.InitQHYCCDResource())
 * 
 * def ReleaseQHYCCDResource():             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_3ReleaseQHYCCDResource, 0, __pyx_n_s_ReleaseQHYCCDResource, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ReleaseQHYCCDResource, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":142
 *     chkerr(qhy.ReleaseQHYCCDResource())
 * 
 * def ScanQHYCCD():             # <<<<<<<<<<<<<<
 *     return(qhy.ScanQHYCCD())
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_5ScanQHYCCD, 0, __pyx_n_s_ScanQHYCCD, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ScanQHYCCD, __pyx_t_1) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":145
 *     return(qhy.ScanQHYCCD())
 * 
 * def GetQHYCCDId(i):             # <<<<<<<<<<<<<<
 *     cdef char camid[256]
 *     chkerr(qhy.GetQHYCCDId(i, camid))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_7GetQHYCCDId, 0, __pyx_n_s_GetQHYCCDId, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDId, __pyx_t_1) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":150
 *     return camid
 * 
 * def OpenQHYCCD(camid):             # <<<<<<<<<<<<<<
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_9OpenQHYCCD, 0, __pyx_n_s_OpenQHYCCD, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OpenQHYCCD, __pyx_t_1) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":153
 *     return PyLong_FromVoidPtr(qhy.OpenQHYCCD(<char *>camid))
 * 
 * def SetQHYCCDStreamMode(cam, mode):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_11SetQHYCCDStreamMode, 0, __pyx_n_s_SetQHYCCDStreamMode, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetQHYCCDStreamMode, __pyx_t_1) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":156
 *     chkerr(qhy.SetQHYCCDStreamMode(PyLong_AsVoidPtr(cam), mode))
 * 
 * def InitQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_13InitQHYCCD, 0, __pyx_n_s_InitQHYCCD, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InitQHYCCD, __pyx_t_1) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":159
 *     chkerr(qhy.InitQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def CloseQHYCCD(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_15CloseQHYCCD, 0, __pyx_n_s_CloseQHYCCD, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CloseQHYCCD, __pyx_t_1) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":162
 *     chkerr(qhy.CloseQHYCCD(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDChipInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef double chipw, chiph, pixelw, pixelh
 *     cdef uint32_t imagew, imageh, bpp
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_17GetQHYCCDChipInfo, 0, __pyx_n_s_GetQHYCCDChipInfo, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDChipInfo, __pyx_t_1) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":168
 *     return (chipw, chiph, imagew, imageh, pixelw, pixelh, bpp)
 * 
 * def GetQHYCCDModel(camid):             # <<<<<<<<<<<<<<
 *     cdef char cammodel[256]
 *     chkerr(qhy.GetQHYCCDModel(camid, cammodel))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_19GetQHYCCDModel, 0, __pyx_n_s_GetQHYCCDModel, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDModel, __pyx_t_1) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":173
 *     return cammodel
 * 
 * def IsQHYCCDControlAvailable(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), controlId)
 *     if ret == qhy.QHYCCD_SUCCESS:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_21IsQHYCCDControlAvailable, 0, __pyx_n_s_IsQHYCCDControlAvailable, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IsQHYCCDControlAvailable, __pyx_t_1) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":180
 *         return False
 * 
 * def GetQHYCCDParam(cam, controlId):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId)
 *     if ret != qhy.QHYCCD_ERROR:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_23GetQHYCCDParam, 0, __pyx_n_s_GetQHYCCDParam, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDParam, __pyx_t_1) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":187
 *         return None
 * 
 * def SetQHYCCDParam(cam, controlId, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_25SetQHYCCDParam, 0, __pyx_n_s_SetQHYCCDParam, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetQHYCCDParam, __pyx_t_1) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":190
 *     chkerr(qhy.SetQHYCCDParam(PyLong_AsVoidPtr(cam), controlId, value))
 * 
 * def GetQHYCCDParamMinMaxStep(cam, controlId):             # <<<<<<<<<<<<<<
 *     cdef double pmin, pmax, pstep
 *     chkerr(qhy.GetQHYCCDParamMinMaxStep(PyLong_AsVoidPtr(cam), controlId, &pmin, &pmax, &pstep))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_27GetQHYCCDParamMinMaxStep, 0, __pyx_n_s_GetQHYCCDParamMinMaxStep, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDParamMinMaxStep, __pyx_t_1) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":195
 *     return (pmin, pmax, pstep)
 * 
 * def ExpQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_29ExpQHYCCDSingleFrame, 0, __pyx_n_s_ExpQHYCCDSingleFrame, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ExpQHYCCDSingleFrame, __pyx_t_1) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":198
 *     chkerr(qhy.ExpQHYCCDSingleFrame(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposing(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_31CancelQHYCCDExposing, 0, __pyx_n_s_CancelQHYCCDExposing, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CancelQHYCCDExposing, __pyx_t_1) < 0) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":201
 *     chkerr(qhy.CancelQHYCCDExposing(PyLong_AsVoidPtr(cam)))
 * 
 * def CancelQHYCCDExposingAndReadout(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_33CancelQHYCCDExposingAndReadout, 0, __pyx_n_s_CancelQHYCCDExposingAndReadout, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CancelQHYCCDExposingAndReadout, __pyx_t_1) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":204
 *     chkerr(qhy.CancelQHYCCDExposingAndReadout(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDSingleFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_35GetQHYCCDSingleFrame, 0, __pyx_n_s_GetQHYCCDSingleFrame, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDSingleFrame, __pyx_t_1) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":218
 *     return data
 * 
 * def GetQHYCCDMemLength(cam):             # <<<<<<<<<<<<<<
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_37GetQHYCCDMemLength, 0, __pyx_n_s_GetQHYCCDMemLength, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDMemLength, __pyx_t_1) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":221
 *     return qhy.GetQHYCCDMemLength(PyLong_AsVoidPtr(cam))
 * 
 * def SetQHYCCDBinMode(cam, wbin, hbin):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_39SetQHYCCDBinMode, 0, __pyx_n_s_SetQHYCCDBinMode, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetQHYCCDBinMode, __pyx_t_1) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":224
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), <uint32_t> wbin, <uint32_t> hbin))
 * 
 * def SetQHYCCDResolution(cam, x, y, xsize, ysize):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_41SetQHYCCDResolution, 0, __pyx_n_s_SetQHYCCDResolution, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetQHYCCDResolution, __pyx_t_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":227
 *     chkerr(qhy.SetQHYCCDResolution(PyLong_AsVoidPtr(cam), <uint32_t> x, <uint32_t> y, <uint32_t> xsize, <uint32_t> ysize))
 * 
 * def GetQHYCCDExposureRemaining(cam):             # <<<<<<<<<<<<<<
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_43GetQHYCCDExposureRemaining, 0, __pyx_n_s_GetQHYCCDExposureRemaining, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDExposureRemaining, __pyx_t_1) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":230
 *     return(qhy.GetQHYCCDExposureRemaining(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDType(cam):             # <<<<<<<<<<<<<<
 *     ret = qhy.GetQHYCCDType(PyLong_AsVoidPtr(cam))
 *     if ret != qhy.QHYCCD_ERROR:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_45GetQHYCCDType, 0, __pyx_n_s_GetQHYCCDType, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDType, __pyx_t_1) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":237
 *         raise OSError(-ret, os.stderror(-ret))
 * 
 * def GetQHYCCDSDKVersion():             # <<<<<<<<<<<<<<
 *     cdef uint32_t year, month, day, subday
 *     chkerr(qhy.GetQHYCCDSDKVersion(&year, &month, &day, &subday))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_47GetQHYCCDSDKVersion, 0, __pyx_n_s_GetQHYCCDSDKVersion, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDSDKVersion, __pyx_t_1) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":242
 *     return f"QHYCCD SDK {year}-{month}-{day},{subday}"
 * 
 * def GetQHYCCDNumberOfReadModes(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t numModes
 *     chkerr(qhy.GetQHYCCDNumberOfReadModes(PyLong_AsVoidPtr(cam), &numModes))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_49GetQHYCCDNumberOfReadModes, 0, __pyx_n_s_GetQHYCCDNumberOfReadModes, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDNumberOfReadModes, __pyx_t_1) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":247
 *     return numModes
 * 
 * def GetQHYCCDReadModeResolution(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef uint32_t width, height
 *     chkerr(qhy.GetQHYCCDReadModeResolution(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, &width, &height))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_51GetQHYCCDReadModeResolution, 0, __pyx_n_s_GetQHYCCDReadModeResolution, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDReadModeResolution, __pyx_t_1) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":252
 *     return (width, height)
 * 
 * def GetQHYCCDReadModeName(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     cdef char name[32]
 *     chkerr(qhy.GetQHYCCDReadModeName(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber, name))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_53GetQHYCCDReadModeName, 0, __pyx_n_s_GetQHYCCDReadModeName, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDReadModeName, __pyx_t_1) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":257
 *     return name
 * 
 * def GetQHYCCDReadMode(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t modeNumber
 *     chkerr(qhy.GetQHYCCDReadMode(PyLong_AsVoidPtr(cam), &modeNumber))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_55GetQHYCCDReadMode, 0, __pyx_n_s_GetQHYCCDReadMode, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDReadMode, __pyx_t_1) < 0) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":262
 *     return modeNumber
 * 
 * def SetQHYCCDReadMode(cam, modeNumber):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_57SetQHYCCDReadMode, 0, __pyx_n_s_SetQHYCCDReadMode, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetQHYCCDReadMode, __pyx_t_1) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":265
 *     chkerr(qhy.SetQHYCCDReadMode(PyLong_AsVoidPtr(cam), <uint32_t> modeNumber))
 * 
 * def GetQHYCCDOverScanArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDOverScanArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_59GetQHYCCDOverScanArea, 0, __pyx_n_s_GetQHYCCDOverScanArea, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDOverScanArea, __pyx_t_1) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":270
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def GetQHYCCDEffectiveArea(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t startX, startY, sizeX, sizeY
 *     chkerr(qhy.GetQHYCCDEffectiveArea(PyLong_AsVoidPtr(cam), &startX, &startY, &sizeX, &sizeY))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_61GetQHYCCDEffectiveArea, 0, __pyx_n_s_GetQHYCCDEffectiveArea, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDEffectiveArea, __pyx_t_1) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":275
 *     return (startX, startY, sizeX, sizeY)
 * 
 * def SetQHYCCDBinMode(cam, binw, binh):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_63SetQHYCCDBinMode, 0, __pyx_n_s_SetQHYCCDBinMode, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetQHYCCDBinMode, __pyx_t_1) < 0) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":278
 *     chkerr(qhy.SetQHYCCDBinMode(PyLong_AsVoidPtr(cam), binw, binh))
 * 
 * def BeginQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_65BeginQHYCCDLive, 0, __pyx_n_s_BeginQHYCCDLive, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BeginQHYCCDLive, __pyx_t_1) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":281
 *     chkerr(qhy.BeginQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def StopQHYCCDLive(cam):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_67StopQHYCCDLive, 0, __pyx_n_s_StopQHYCCDLive, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StopQHYCCDLive, __pyx_t_1) < 0) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":284
 *     chkerr(qhy.StopQHYCCDLive(PyLong_AsVoidPtr(cam)))
 * 
 * def GetQHYCCDLiveFrame(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t w, h, bpp, channels
 *     cdef uint8_t *imgdata
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_69GetQHYCCDLiveFrame, 0, __pyx_n_s_GetQHYCCDLiveFrame, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDLiveFrame, __pyx_t_1) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":300
 *     return data
 * 
 * def GetQHYCCDPreciseExposureInfo(cam):             # <<<<<<<<<<<<<<
 *     cdef uint32_t PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime
 *     cdef uint8_t isLongExposureMode
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_71GetQHYCCDPreciseExposureInfo, 0, __pyx_n_s_GetQHYCCDPreciseExposureInfo, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetQHYCCDPreciseExposureInfo, __pyx_t_1) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":313
 *     return (PixelPeriod_ps, LinePeriod_ns, FramePeriod_us, ClocksPerLine, LinesPerFrame, ActualExposureTime, isLongExposureMode)
 * 
 * def SetQHYCCDBitsMode(cam, value):             # <<<<<<<<<<<<<<
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_73SetQHYCCDBitsMode, 0, __pyx_n_s_SetQHYCCDBitsMode, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SetQHYCCDBitsMode, __pyx_t_1) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":316
 *     chkerr(qhy.SetQHYCCDBitsMode(PyLong_AsVoidPtr(cam), <uint32_t> value))
 * 
 * def GetBinModes(cam):             # <<<<<<<<<<<<<<
 *     modes = [1]
 *     if qhy.IsQHYCCDControlAvailable(PyLong_AsVoidPtr(cam), CONTROL_ID.CAM_BIN2X2MODE) == qhy.QHYCCD_SUCCESS:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6QHYCCD_8pyqhyccd_75GetBinModes, 0, __pyx_n_s_GetBinModes, NULL, __pyx_n_s_QHYCCD_pyqhyccd, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GetBinModes, __pyx_t_1) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "QHYCCD/pyqhyccd.pyx":1
 * import os             # <<<<<<<<<<<<<<
 * import sys
 * import warnings
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "C:/ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1103
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init QHYCCD.pyqhyccd", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init QHYCCD.pyqhyccd");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    Py_ssize_t i;
    argstuple = PyTuple_New(nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, nargs, kwargs);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        PyObject *sep;
        PyObject *slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, CYTHON_UNUSED PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__8;
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *py_basicsize, *cached_type = NULL;
    Py_ssize_t basicsize;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (!py_basicsize) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred()) goto bad;
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    cached_type = PyType_FromSpecWithBases(spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, Py_ssize_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (i = 0; i < nargs; i++) newargs[i] = args[i];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, Py_ssize_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         cyfunc->func.m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", cyfunc->func.m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(__pyx_CyFunctionObject, func.vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(void) {
#if CYTHON_COMPILING_IN_LIMITED_API
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(&__pyx_CyFunctionType_spec, NULL);
#else
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CONTROL_ID(CONTROL_ID value) {
    const CONTROL_ID neg_one = (CONTROL_ID) ((CONTROL_ID) 0 - (CONTROL_ID) 1), const_zero = (CONTROL_ID) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CONTROL_ID) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CONTROL_ID) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CONTROL_ID) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(CONTROL_ID) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(CONTROL_ID) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CONTROL_ID),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) ((uint32_t) 0 - (uint32_t) 1), const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value) {
    const uint8_t neg_one = (uint8_t) ((uint8_t) 0 - (uint8_t) 1), const_zero = (uint8_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint8_t),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) ((uint32_t) 0 - (uint32_t) 1), const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *x) {
    const uint8_t neg_one = (uint8_t) ((uint8_t) 0 - (uint8_t) 1), const_zero = (uint8_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint8_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 2 * PyLong_SHIFT) {
                            return (uint8_t) (((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 3 * PyLong_SHIFT) {
                            return (uint8_t) (((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) >= 4 * PyLong_SHIFT) {
                            return (uint8_t) (((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint8_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint8_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint8_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint8_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint8_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint8_t) ((((((uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint8_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint8_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) (((uint8_t)-1)*(((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint8_t) ((((((((((uint8_t)digits[3]) << PyLong_SHIFT) | (uint8_t)digits[2]) << PyLong_SHIFT) | (uint8_t)digits[1]) << PyLong_SHIFT) | (uint8_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint8_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            uint8_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint8_t) -1;
        }
    } else {
        uint8_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint8_t) -1;
        val = __Pyx_PyInt_As_uint8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint8_t");
    return (uint8_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint8_t");
    return (uint8_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE CONTROL_ID __Pyx_PyInt_As_CONTROL_ID(PyObject *x) {
    const CONTROL_ID neg_one = (CONTROL_ID) ((CONTROL_ID) 0 - (CONTROL_ID) 1), const_zero = (CONTROL_ID) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(CONTROL_ID) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(CONTROL_ID, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (CONTROL_ID) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (CONTROL_ID) 0;
                case  1: __PYX_VERIFY_RETURN_INT(CONTROL_ID, digit, digits[0])
                case 2:
                    if (8 * sizeof(CONTROL_ID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) >= 2 * PyLong_SHIFT) {
                            return (CONTROL_ID) (((((CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(CONTROL_ID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) >= 3 * PyLong_SHIFT) {
                            return (CONTROL_ID) (((((((CONTROL_ID)digits[2]) << PyLong_SHIFT) | (CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(CONTROL_ID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) >= 4 * PyLong_SHIFT) {
                            return (CONTROL_ID) (((((((((CONTROL_ID)digits[3]) << PyLong_SHIFT) | (CONTROL_ID)digits[2]) << PyLong_SHIFT) | (CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (CONTROL_ID) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(CONTROL_ID) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(CONTROL_ID, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(CONTROL_ID) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(CONTROL_ID, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (CONTROL_ID) 0;
                case -1: __PYX_VERIFY_RETURN_INT(CONTROL_ID, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(CONTROL_ID,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(CONTROL_ID) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) - 1 > 2 * PyLong_SHIFT) {
                            return (CONTROL_ID) (((CONTROL_ID)-1)*(((((CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(CONTROL_ID) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) - 1 > 2 * PyLong_SHIFT) {
                            return (CONTROL_ID) ((((((CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(CONTROL_ID) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) - 1 > 3 * PyLong_SHIFT) {
                            return (CONTROL_ID) (((CONTROL_ID)-1)*(((((((CONTROL_ID)digits[2]) << PyLong_SHIFT) | (CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(CONTROL_ID) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) - 1 > 3 * PyLong_SHIFT) {
                            return (CONTROL_ID) ((((((((CONTROL_ID)digits[2]) << PyLong_SHIFT) | (CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(CONTROL_ID) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) - 1 > 4 * PyLong_SHIFT) {
                            return (CONTROL_ID) (((CONTROL_ID)-1)*(((((((((CONTROL_ID)digits[3]) << PyLong_SHIFT) | (CONTROL_ID)digits[2]) << PyLong_SHIFT) | (CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(CONTROL_ID) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(CONTROL_ID, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(CONTROL_ID) - 1 > 4 * PyLong_SHIFT) {
                            return (CONTROL_ID) ((((((((((CONTROL_ID)digits[3]) << PyLong_SHIFT) | (CONTROL_ID)digits[2]) << PyLong_SHIFT) | (CONTROL_ID)digits[1]) << PyLong_SHIFT) | (CONTROL_ID)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(CONTROL_ID) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(CONTROL_ID, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(CONTROL_ID) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(CONTROL_ID, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            CONTROL_ID val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (CONTROL_ID) -1;
        }
    } else {
        CONTROL_ID val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (CONTROL_ID) -1;
        val = __Pyx_PyInt_As_CONTROL_ID(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to CONTROL_ID");
    return (CONTROL_ID) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to CONTROL_ID");
    return (CONTROL_ID) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__82));
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
